/*
Copyright 2023 Codenotary Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package immudb.model;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "schema.proto";

option go_package = "github.com/codenotary/immudb/pkg/api/protomodel";
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  base_path: "/api/v2",
  info: {
    title: "immudb REST API v2";
    description: "Document Storage API"
  };
  security_definitions: {
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "sessionid"
        description: "Session Identifier"
      }
    }
  }
  security: {
    security_requirement: {
      key: "ApiKeyAuth"
    }
  }
};

message CreateCollectionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name",
        "documentIdFieldName"
      ]
    }
  };

  string name = 1;
  string documentIdFieldName = 2;
  repeated Field fields = 3;
  repeated Index indexes = 4;
}

message CreateCollectionResponse {}

message Field {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name",
        "type"
      ]
    }
  };

  string name = 1;
  FieldType type = 2;
}

enum FieldType {
  STRING = 0;
  BOOLEAN = 1;
  INTEGER = 2;
  DOUBLE = 3;
}

message Index {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "fields",
        "isUnique"
      ]
    }
  };

  repeated string fields = 1;
  bool isUnique = 2;
}

message GetCollectionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name"
      ]
    }
  };

  string name = 1;
}

message GetCollectionResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collection"
      ]
    }
  };

  Collection collection = 1;
}

message Collection {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name",
        "documentIdFieldName",
        "fields",
        "indexes"
      ]
    }
  };

  string name = 1;
  string documentIdFieldName = 2;
  repeated Field fields = 3;
  repeated Index indexes = 4;
}

message GetCollectionsRequest {}

message GetCollectionsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collections"
      ]
    }
  };

  repeated Collection collections = 1;
}

message DeleteCollectionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name"
      ]
    }
  };

  string name = 1;
}

message DeleteCollectionResponse {}

message UpdateCollectionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name",
        "documentIdFieldName"
      ]
    }
  };

  string name = 1;
  string documentIdFieldName = 2;
}

message UpdateCollectionResponse {}

message CreateIndexRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collectionName",
        "fields",
        "isUnique"
      ]
    }
  };

  string collectionName = 1;
  repeated string fields = 2;
  bool isUnique = 3;
}

message CreateIndexResponse {}

message DeleteIndexRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collectionName",
        "fields"
      ]
    }
  };

  string collectionName = 1;
  repeated string fields = 2;
}

message DeleteIndexResponse {}

message InsertDocumentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collectionName",
        "documents"
      ]
    }
  };

  string collectionName = 1;
  repeated google.protobuf.Struct documents = 2;
}

message InsertDocumentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "transactionId",
        "documentIds"
      ]
    }
  };

  uint64 transactionId = 1;
  repeated string documentIds = 2;
}

message ReplaceDocumentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "query",
        "document"
      ]
    }
  };

  Query query = 1;
  google.protobuf.Struct document = 2;
}

message ReplaceDocumentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "revisions"
      ]
    }
  };

  repeated DocumentAtRevision revisions = 1;
}

message DeleteDocumentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "query"
      ]
    }
  };

  Query query = 1;
}

message DeleteDocumentsResponse {}

message SearchDocumentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "searchId",
        "query",
        "page",
        "pageSize",
        "keepOpen"
      ]
    }
  };

  string searchId = 1;

  Query query = 2;

  uint32 page = 3;
  uint32 pageSize = 4;

  bool keepOpen = 5;
}

message Query {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collectionName",
        "expressions",
        "orderBy",
        "limit"
      ]
    }
  };

  string collectionName = 1;
  repeated QueryExpression expressions = 2;
  repeated OrderByClause orderBy = 3;
  uint32 limit = 4;
}

message QueryExpression {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "fieldComparisons"
      ]
    }
  };

  repeated FieldComparison fieldComparisons = 1;
}

message FieldComparison {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "field",
        "operator",
        "value"
      ]
    }
  };

  string field = 1;
  ComparisonOperator operator = 2;
  google.protobuf.Value value = 3;
}

enum ComparisonOperator {
  EQ = 0;
  NE = 1;
  LT = 2;
  LE = 3;
  GT = 4;
  GE = 5;
  LIKE = 6;
  NOT_LIKE = 7;
}

message OrderByClause {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "field",
        "desc"
      ]
    }
  };

  string field = 1;
  bool desc = 2;
}

message SearchDocumentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "searchId",
        "revisions"
      ]
    }
  };

  string searchId = 1;
  repeated DocumentAtRevision revisions = 2;
}

message DocumentAtRevision {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "transactionId",
        "documentId",
        "revision"
      ]
    }
  };

  uint64 transactionId = 1;
  string documentId = 2;
  uint64 revision = 3;
  DocumentMetadata metadata = 4;
  google.protobuf.Struct document = 5;
}

message DocumentMetadata {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "deleted"
      ]
    }
  };

  bool deleted = 1;
}

message CountDocumentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "query"
      ]
    }
  };

  Query query = 1;
}

message CountDocumentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "count"
      ]
    }
  };

  int64 count = 1;
}

message AuditDocumentRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collectionName",
        "documentId",
        "desc",
        "page",
        "pageSize"
      ]
    }
  };

  string collectionName = 1;
  string documentId = 2;
  bool desc = 3;
  uint32 page = 4;
  uint32 pageSize = 5;
}

message AuditDocumentResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "revisions"
      ]
    }
  };

  repeated DocumentAtRevision revisions = 1;
}

message ProofDocumentRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "collectionName",
        "documentId",
        "transactionId",
        "proofSinceTransactionId"
      ]
    }
  };

  string collectionName = 1;
  string documentId = 2;
  uint64 transactionId = 3;
  uint64 proofSinceTransactionId = 4;
}

message ProofDocumentResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "database",
        "collectionId",
        "documentIdFieldName",
        "encodedDocument",
        "verifiableTx"
      ]
    }
  };

  string database = 1;
  uint32 collectionId = 2;
  string documentIdFieldName = 3;
  bytes encodedDocument = 4;
  schema.VerifiableTxV2 verifiableTx = 5;
}

service DocumentService {
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse) {
    option (google.api.http) = {
      post: "/collection/{name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse) {
    option (google.api.http) = {
      get: "/collections"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc GetCollection(GetCollectionRequest) returns (GetCollectionResponse) {
    option (google.api.http) = {
      get: "/collection/{name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc UpdateCollection(UpdateCollectionRequest) returns (UpdateCollectionResponse) {
    option (google.api.http) = {
      put: "/collection/{name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse) {
    option (google.api.http) = {
      delete: "/collection/{name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse) {
    option (google.api.http) = {
      post: "/collection/{collectionName}/index"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc DeleteIndex(DeleteIndexRequest) returns (DeleteIndexResponse) {
    option (google.api.http) = {
      delete: "/collection/{collectionName}/index"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc InsertDocuments(InsertDocumentsRequest) returns (InsertDocumentsResponse) {
    option (google.api.http) = {
      post: "/collection/{collectionName}/documents"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc ReplaceDocuments(ReplaceDocumentsRequest) returns (ReplaceDocumentsResponse) {
    option (google.api.http) = {
      put: "/collection/{query.collectionName}/documents/replace"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }

  rpc DeleteDocuments(DeleteDocumentsRequest) returns (DeleteDocumentsResponse) {
    option (google.api.http) = {
      post: "/collection/{query.collectionName}/documents/delete"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }

  rpc SearchDocuments(SearchDocumentsRequest) returns (SearchDocumentsResponse) {
    option (google.api.http) = {
      post: "/collection/{query.collectionName}/documents/search"
      body: "*"

      additional_bindings: {
        post: "/collection/documents/search/{searchId}"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc CountDocuments(CountDocumentsRequest) returns (CountDocumentsResponse) {
    option (google.api.http) = {
      post: "/collection/{query.collectionName}/documents/count"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc AuditDocument(AuditDocumentRequest) returns (AuditDocumentResponse) {
    option (google.api.http) = {
      post: "/collection/{collectionName}/document/{documentId}/audit"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }

  rpc ProofDocument(ProofDocumentRequest) returns (ProofDocumentResponse) {
    option (google.api.http) = {
      post: "/collection/{collectionName}/document/{documentId}/proof"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }
}
