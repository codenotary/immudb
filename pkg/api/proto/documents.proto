/*
Copyright 2023 Codenotary Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package immudb.model;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "schema.proto";

option go_package = "github.com/codenotary/immudb/pkg/api/protomodel";
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  base_path: "/api/v2",
  info: {
    title: "immudb REST API v2";
    description: "Document Storage API"
  };
  security_definitions: {
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "sessionid"
        description: "Session Identifier"
      }
    }
  }
  security: {
    security_requirement: {
      key: "ApiKeyAuth"
    }
  }
};

message CreateCollectionRequest {
  string name = 1;
  string idFieldName = 2;
  repeated Field fields = 3;
  repeated Index indexes = 4;
}

message CreateCollectionResponse {}

message Field {
  string name = 1;
  FieldType type = 2;
}

enum FieldType {
  STRING = 0;
  BOOLEAN = 1;
  INTEGER = 2;
  DOUBLE = 3;
}

message Index {
  repeated string fields = 1;
  bool isUnique = 2;
}

message GetCollectionRequest {
  string name = 1;
}

message GetCollectionResponse {
  Collection collection = 1;
}

message Collection {
  string name = 1;
  string idFieldName = 2;
  repeated Field fields = 3;
  repeated Index indexes = 4;
}

message GetCollectionsRequest {}

message GetCollectionsResponse {
  repeated Collection collections = 1;
}

message DeleteCollectionRequest {
  string name = 1;
}

message DeleteCollectionResponse {}

message UpdateCollectionRequest {
  string name = 1;
  string idFieldName = 2;
}

message UpdateCollectionResponse {}

message CreateIndexRequest {
  string collection = 1;
  repeated string fields = 2;
  bool isUnique = 3;
}

message CreateIndexResponse {}

message DeleteIndexRequest {
  string collection = 1;
  repeated string fields = 2;
}

message DeleteIndexResponse {}

message InsertDocumentsRequest {
  string collection = 1;
  repeated google.protobuf.Struct documents = 2;
}

message InsertDocumentsResponse {
  uint64 transactionId = 1;
  repeated string documentIds = 2;
}

message ReplaceDocumentRequest {
  Query query = 1;
  google.protobuf.Struct document = 2;
}

message ReplaceDocumentResponse {
  uint64 transactionId = 1;
  string documentId = 2;
  uint64 revision = 3;
}

message SearchDocumentsRequest {
  string searchId = 1;
  Query query = 2;
  uint32 page = 3;
  uint32 pageSize = 4;
}

message Query {
  string collection = 1;
  repeated QueryExpression expressions = 2;
  repeated OrderByClause orderBy = 3;
}

message QueryExpression {
  repeated FieldComparison fieldComparisons = 1;
}

message FieldComparison {
  string field = 1;
  ComparisonOperator operator = 2;
  google.protobuf.Value value = 3;
}

enum ComparisonOperator {
  EQ = 0;
  NE = 1;
  LT = 2;
  LE = 3;
  GT = 4;
  GE = 5;
  LIKE = 6;
  NOT_LIKE = 7;
}

message OrderByClause {
  string field = 1;
  bool desc = 2;
}

message SearchDocumentsResponse {
  string searchId = 1;
  repeated DocumentAtRevision revisions = 2;
}

message DocumentAtRevision {
  uint64 transactionId = 1;
  uint64 revision = 2;
  DocumentMetadata metadata = 3;
  google.protobuf.Struct document = 4;
}

message DocumentMetadata {
  bool deleted = 1;
}

message AuditDocumentRequest {
  string collection = 1;
  string documentId = 2;
  bool desc = 3;
  uint32 page = 4;
  uint32 pageSize = 5;
}

message AuditDocumentResponse {
  repeated DocumentAtRevision revisions = 1;
}

message ProofDocumentRequest {
  string collection = 1;
  string documentId = 2;
  uint64 transactionId = 3;
  uint64 proofSinceTransactionId = 4;
}

message ProofDocumentResponse {
  string database = 1;
  uint32 collectionId = 2;
  string idFieldName = 3;
  bytes encodedDocument = 4;
  schema.VerifiableTxV2 verifiableTx = 5;
}

message DeleteDocumentsRequest {
  Query query = 1;
  uint32 limit = 2;
}

message DeleteDocumentsResponse {}

service DocumentService {
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse) {
    option (google.api.http) = {
      put: "/collections"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }

  rpc GetCollection(GetCollectionRequest) returns (GetCollectionResponse) {
    option (google.api.http) = {
      get: "/collections/{name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }

  rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse) {
    option (google.api.http) = {
      get: "/collections"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }

  rpc UpdateCollection(UpdateCollectionRequest) returns (UpdateCollectionResponse) {
    option (google.api.http) = {
      put: "/collections/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }

  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse) {
    option (google.api.http) = {
      delete: "/collections/{name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }

  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse) {
    option (google.api.http) = {
      put: "/index"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "index";
    };
  }

  rpc DeleteIndex(DeleteIndexRequest) returns (DeleteIndexResponse) {
    option (google.api.http) = {
      post: "/index/delete"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "index";
    };
  }

  rpc InsertDocuments(InsertDocumentsRequest) returns (InsertDocumentsResponse) {
    option (google.api.http) = {
      put: "/documents"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc ReplaceDocument(ReplaceDocumentRequest) returns (ReplaceDocumentResponse) {
    option (google.api.http) = {
      put: "/documents/replace"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }

  rpc DeleteDocuments(DeleteDocumentsRequest) returns (DeleteDocumentsResponse) {
    option (google.api.http) = {
      post: "/documents/delete"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }

  rpc SearchDocuments(SearchDocumentsRequest) returns (SearchDocumentsResponse) {
    option (google.api.http) = {
      post: "/documents/search"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  }

  rpc AuditDocument(AuditDocumentRequest) returns (AuditDocumentResponse) {
    option (google.api.http) = {
      post: "/documents/audit"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }

  rpc ProofDocument(ProofDocumentRequest) returns (ProofDocumentResponse) {
    option (google.api.http) = {
      post: "/documents/proof"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [
        "documents"
      ];
    };
  }
}
