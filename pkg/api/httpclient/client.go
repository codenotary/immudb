// Package httpclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package httpclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ModelComparisonOperator.
const (
	EQ      ModelComparisonOperator = "EQ"
	GE      ModelComparisonOperator = "GE"
	GT      ModelComparisonOperator = "GT"
	LE      ModelComparisonOperator = "LE"
	LIKE    ModelComparisonOperator = "LIKE"
	LT      ModelComparisonOperator = "LT"
	NE      ModelComparisonOperator = "NE"
	NOTLIKE ModelComparisonOperator = "NOT_LIKE"
)

// Defines values for ModelFieldType.
const (
	BOOLEAN ModelFieldType = "BOOLEAN"
	DOUBLE  ModelFieldType = "DOUBLE"
	INTEGER ModelFieldType = "INTEGER"
	STRING  ModelFieldType = "STRING"
)

// ImmudbmodelOpenSessionRequest defines model for immudbmodelOpenSessionRequest.
type ImmudbmodelOpenSessionRequest struct {
	Database *string `json:"database,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ImmudbmodelOpenSessionResponse defines model for immudbmodelOpenSessionResponse.
type ImmudbmodelOpenSessionResponse struct {
	ExpirationTimestamp *int32  `json:"expirationTimestamp,omitempty"`
	InactivityTimestamp *int32  `json:"inactivityTimestamp,omitempty"`
	ServerUUID          *string `json:"serverUUID,omitempty"`
	SessionID           *string `json:"sessionID,omitempty"`
}

// ModelAuditDocumentRequest defines model for modelAuditDocumentRequest.
type ModelAuditDocumentRequest struct {
	Collection *string `json:"collection,omitempty"`
	Desc       *bool   `json:"desc,omitempty"`
	DocumentId *string `json:"documentId,omitempty"`
	Page       *int64  `json:"page,omitempty"`
	PageSize   *int64  `json:"pageSize,omitempty"`
}

// ModelAuditDocumentResponse defines model for modelAuditDocumentResponse.
type ModelAuditDocumentResponse struct {
	Revisions *[]ModelDocumentAtRevision `json:"revisions,omitempty"`
}

// ModelCloseSessionRequest defines model for modelCloseSessionRequest.
type ModelCloseSessionRequest = map[string]interface{}

// ModelCloseSessionResponse defines model for modelCloseSessionResponse.
type ModelCloseSessionResponse = map[string]interface{}

// ModelCollection defines model for modelCollection.
type ModelCollection struct {
	Fields      *[]ModelField `json:"fields,omitempty"`
	IdFieldName *string       `json:"idFieldName,omitempty"`
	Indexes     *[]ModelIndex `json:"indexes,omitempty"`
	Name        *string       `json:"name,omitempty"`
}

// ModelComparisonOperator defines model for modelComparisonOperator.
type ModelComparisonOperator string

// ModelCreateCollectionRequest defines model for modelCreateCollectionRequest.
type ModelCreateCollectionRequest struct {
	Fields      *[]ModelField `json:"fields,omitempty"`
	IdFieldName *string       `json:"idFieldName,omitempty"`
	Indexes     *[]ModelIndex `json:"indexes,omitempty"`
	Name        *string       `json:"name,omitempty"`
}

// ModelCreateCollectionResponse defines model for modelCreateCollectionResponse.
type ModelCreateCollectionResponse = map[string]interface{}

// ModelCreateIndexRequest defines model for modelCreateIndexRequest.
type ModelCreateIndexRequest struct {
	Collection *string   `json:"collection,omitempty"`
	Fields     *[]string `json:"fields,omitempty"`
	IsUnique   *bool     `json:"isUnique,omitempty"`
}

// ModelCreateIndexResponse defines model for modelCreateIndexResponse.
type ModelCreateIndexResponse = map[string]interface{}

// ModelDeleteCollectionResponse defines model for modelDeleteCollectionResponse.
type ModelDeleteCollectionResponse = map[string]interface{}

// ModelDeleteDocumentsRequest defines model for modelDeleteDocumentsRequest.
type ModelDeleteDocumentsRequest struct {
	Limit *int64      `json:"limit,omitempty"`
	Query *ModelQuery `json:"query,omitempty"`
}

// ModelDeleteDocumentsResponse defines model for modelDeleteDocumentsResponse.
type ModelDeleteDocumentsResponse = map[string]interface{}

// ModelDeleteIndexRequest defines model for modelDeleteIndexRequest.
type ModelDeleteIndexRequest struct {
	Collection *string   `json:"collection,omitempty"`
	Fields     *[]string `json:"fields,omitempty"`
}

// ModelDeleteIndexResponse defines model for modelDeleteIndexResponse.
type ModelDeleteIndexResponse = map[string]interface{}

// ModelDocumentAtRevision defines model for modelDocumentAtRevision.
type ModelDocumentAtRevision struct {
	Document      *map[string]interface{} `json:"document,omitempty"`
	Metadata      *ModelDocumentMetadata  `json:"metadata,omitempty"`
	Revision      *string                 `json:"revision,omitempty"`
	TransactionId *string                 `json:"transactionId,omitempty"`
}

// ModelDocumentMetadata defines model for modelDocumentMetadata.
type ModelDocumentMetadata struct {
	Deleted *bool `json:"deleted,omitempty"`
}

// ModelField defines model for modelField.
type ModelField struct {
	Name *string         `json:"name,omitempty"`
	Type *ModelFieldType `json:"type,omitempty"`
}

// ModelFieldComparison defines model for modelFieldComparison.
type ModelFieldComparison struct {
	Field    *string                  `json:"field,omitempty"`
	Operator *ModelComparisonOperator `json:"operator,omitempty"`
	Value    interface{}  `json:"value,omitempty"`
}

// ModelFieldType defines model for modelFieldType.
type ModelFieldType string

// ModelGetCollectionResponse defines model for modelGetCollectionResponse.
type ModelGetCollectionResponse struct {
	Collection *ModelCollection `json:"collection,omitempty"`
}

// ModelGetCollectionsResponse defines model for modelGetCollectionsResponse.
type ModelGetCollectionsResponse struct {
	Collections *[]ModelCollection `json:"collections,omitempty"`
}

// ModelIndex defines model for modelIndex.
type ModelIndex struct {
	Fields   *[]string `json:"fields,omitempty"`
	IsUnique *bool     `json:"isUnique,omitempty"`
}

// ModelInsertDocumentsRequest defines model for modelInsertDocumentsRequest.
type ModelInsertDocumentsRequest struct {
	Collection *string                   `json:"collection,omitempty"`
	Documents  *[]map[string]interface{} `json:"documents,omitempty"`
}

// ModelInsertDocumentsResponse defines model for modelInsertDocumentsResponse.
type ModelInsertDocumentsResponse struct {
	DocumentIds   *[]string `json:"documentIds,omitempty"`
	TransactionId *string   `json:"transactionId,omitempty"`
}

// ModelKeepAliveRequest defines model for modelKeepAliveRequest.
type ModelKeepAliveRequest = map[string]interface{}

// ModelKeepAliveResponse defines model for modelKeepAliveResponse.
type ModelKeepAliveResponse = map[string]interface{}

// ModelOrderByClause defines model for modelOrderByClause.
type ModelOrderByClause struct {
	Desc  *bool   `json:"desc,omitempty"`
	Field *string `json:"field,omitempty"`
}

// ModelProofDocumentRequest defines model for modelProofDocumentRequest.
type ModelProofDocumentRequest struct {
	Collection              *string `json:"collection,omitempty"`
	DocumentId              *string `json:"documentId,omitempty"`
	ProofSinceTransactionId *string `json:"proofSinceTransactionId,omitempty"`
	TransactionId           *string `json:"transactionId,omitempty"`
}

// ModelProofDocumentResponse defines model for modelProofDocumentResponse.
type ModelProofDocumentResponse struct {
	CollectionId    *int64                `json:"collectionId,omitempty"`
	Database        *string               `json:"database,omitempty"`
	EncodedDocument *[]byte               `json:"encodedDocument,omitempty"`
	IdFieldName     *string               `json:"idFieldName,omitempty"`
	VerifiableTx    *SchemaVerifiableTxV2 `json:"verifiableTx,omitempty"`
}

// ModelQuery defines model for modelQuery.
type ModelQuery struct {
	Collection  *string                 `json:"collection,omitempty"`
	Expressions *[]ModelQueryExpression `json:"expressions,omitempty"`
	OrderBy     *[]ModelOrderByClause   `json:"orderBy,omitempty"`
}

// ModelQueryExpression defines model for modelQueryExpression.
type ModelQueryExpression struct {
	FieldComparisons *[]ModelFieldComparison `json:"fieldComparisons,omitempty"`
}

// ModelReplaceDocumentRequest defines model for modelReplaceDocumentRequest.
type ModelReplaceDocumentRequest struct {
	Document *map[string]interface{} `json:"document,omitempty"`
	Query    *ModelQuery             `json:"query,omitempty"`
}

// ModelReplaceDocumentResponse defines model for modelReplaceDocumentResponse.
type ModelReplaceDocumentResponse struct {
	DocumentId    *string `json:"documentId,omitempty"`
	Revision      *string `json:"revision,omitempty"`
	TransactionId *string `json:"transactionId,omitempty"`
}

// ModelSearchDocumentsRequest defines model for modelSearchDocumentsRequest.
type ModelSearchDocumentsRequest struct {
	Page     *int64      `json:"page,omitempty"`
	PageSize *int64      `json:"pageSize,omitempty"`
	Query    *ModelQuery `json:"query,omitempty"`
	SearchId *string     `json:"searchId,omitempty"`
}

// ModelSearchDocumentsResponse defines model for modelSearchDocumentsResponse.
type ModelSearchDocumentsResponse struct {
	Revisions *[]ModelDocumentAtRevision `json:"revisions,omitempty"`
	SearchId  *string                    `json:"searchId,omitempty"`
}

// ModelUpdateCollectionRequest defines model for modelUpdateCollectionRequest.
type ModelUpdateCollectionRequest struct {
	IdFieldName *string `json:"idFieldName,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ModelUpdateCollectionResponse defines model for modelUpdateCollectionResponse.
type ModelUpdateCollectionResponse = map[string]interface{}

// ProtobufAny `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//	Foo foo = ...;
//	Any any;
//	any.PackFrom(foo);
//	...
//	if (any.UnpackTo(&foo)) {
//	  ...
//	}
//
// Example 2: Pack and unpack a message in Java.
//
//	Foo foo = ...;
//	Any any = Any.pack(foo);
//	...
//	if (any.is(Foo.class)) {
//	  foo = any.unpack(Foo.class);
//	}
//
// Example 3: Pack and unpack a message in Python.
//
//	foo = Foo(...)
//	any = Any()
//	any.Pack(foo)
//	...
//	if any.Is(Foo.DESCRIPTOR):
//	  any.Unpack(foo)
//	  ...
//
// Example 4: Pack and unpack a message in Go
//
//	foo := &pb.Foo{...}
//	any, err := anypb.New(foo)
//	if err != nil {
//	  ...
//	}
//	...
//	foo := &pb.Foo{}
//	if err := any.UnmarshalTo(foo); err != nil {
//	  ...
//	}
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
// # JSON
//
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//	package google.profile;
//	message Person {
//	  string first_name = 1;
//	  string last_name = 2;
//	}
//
//	{
//	  "@type": "type.googleapis.com/google.profile.Person",
//	  "firstName": <string>,
//	  "lastName": <string>
//	}
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//	{
//	  "@type": "type.googleapis.com/google.protobuf.Duration",
//	  "value": "1.212s"
//	}
type ProtobufAny struct {
	// TypeUrl A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeUrl *string `json:"type_url,omitempty"`

	// Value Must be a valid serialized protocol buffer of the above specified type.
	Value *[]byte `json:"value,omitempty"`
}

// RuntimeError defines model for runtimeError.
type RuntimeError struct {
	Code    *int32         `json:"code,omitempty"`
	Details *[]ProtobufAny `json:"details,omitempty"`
	Error   *string        `json:"error,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// SchemaDualProofV2 defines model for schemaDualProofV2.
type SchemaDualProofV2 struct {
	ConsistencyProof *[][]byte       `json:"consistencyProof,omitempty"`
	InclusionProof   *[][]byte       `json:"inclusionProof,omitempty"`
	SourceTxHeader   *SchemaTxHeader `json:"sourceTxHeader,omitempty"`
	TargetTxHeader   *SchemaTxHeader `json:"targetTxHeader,omitempty"`
}

// SchemaEntry defines model for schemaEntry.
type SchemaEntry struct {
	Expired      *bool             `json:"expired,omitempty"`
	Key          *[]byte           `json:"key,omitempty"`
	Metadata     *SchemaKVMetadata `json:"metadata,omitempty"`
	ReferencedBy *SchemaReference  `json:"referencedBy,omitempty"`
	Revision     *string           `json:"revision,omitempty"`
	Tx           *string           `json:"tx,omitempty"`
	Value        *[]byte           `json:"value,omitempty"`
}

// SchemaExpiration defines model for schemaExpiration.
type SchemaExpiration struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// SchemaKVMetadata defines model for schemaKVMetadata.
type SchemaKVMetadata struct {
	Deleted      *bool             `json:"deleted,omitempty"`
	Expiration   *SchemaExpiration `json:"expiration,omitempty"`
	NonIndexable *bool             `json:"nonIndexable,omitempty"`
}

// SchemaReference defines model for schemaReference.
type SchemaReference struct {
	AtTx     *string           `json:"atTx,omitempty"`
	Key      *[]byte           `json:"key,omitempty"`
	Metadata *SchemaKVMetadata `json:"metadata,omitempty"`
	Revision *string           `json:"revision,omitempty"`
	Tx       *string           `json:"tx,omitempty"`
}

// SchemaSignature defines model for schemaSignature.
type SchemaSignature struct {
	PublicKey *[]byte `json:"publicKey,omitempty"`
	Signature *[]byte `json:"signature,omitempty"`
}

// SchemaTx defines model for schemaTx.
type SchemaTx struct {
	Entries   *[]SchemaTxEntry `json:"entries,omitempty"`
	Header    *SchemaTxHeader  `json:"header,omitempty"`
	KvEntries *[]SchemaEntry   `json:"kvEntries,omitempty"`
	ZEntries  *[]SchemaZEntry  `json:"zEntries,omitempty"`
}

// SchemaTxEntry defines model for schemaTxEntry.
type SchemaTxEntry struct {
	HValue   *[]byte           `json:"hValue,omitempty"`
	Key      *[]byte           `json:"key,omitempty"`
	Metadata *SchemaKVMetadata `json:"metadata,omitempty"`
	VLen     *int32            `json:"vLen,omitempty"`

	// Value value, must be ignored when len(value) == 0 and vLen > 0.
	// Otherwise sha256(value) must be equal to hValue.
	Value *[]byte `json:"value,omitempty"`
}

// SchemaTxHeader defines model for schemaTxHeader.
type SchemaTxHeader struct {
	BlRoot   *[]byte           `json:"blRoot,omitempty"`
	BlTxId   *string           `json:"blTxId,omitempty"`
	EH       *[]byte           `json:"eH,omitempty"`
	Id       *string           `json:"id,omitempty"`
	Metadata *SchemaTxMetadata `json:"metadata,omitempty"`
	Nentries *int32            `json:"nentries,omitempty"`
	PrevAlh  *[]byte           `json:"prevAlh,omitempty"`
	Ts       *string           `json:"ts,omitempty"`
	Version  *int32            `json:"version,omitempty"`
}

// SchemaTxMetadata defines model for schemaTxMetadata.
type SchemaTxMetadata struct {
	TruncatedTxID *string `json:"truncatedTxID,omitempty"`
}

// SchemaVerifiableTxV2 defines model for schemaVerifiableTxV2.
type SchemaVerifiableTxV2 struct {
	DualProof *SchemaDualProofV2 `json:"dualProof,omitempty"`
	Signature *SchemaSignature   `json:"signature,omitempty"`
	Tx        *SchemaTx          `json:"tx,omitempty"`
}

// SchemaZEntry defines model for schemaZEntry.
type SchemaZEntry struct {
	AtTx  *string      `json:"atTx,omitempty"`
	Entry *SchemaEntry `json:"entry,omitempty"`
	Key   *[]byte      `json:"key,omitempty"`
	Score *float64     `json:"score,omitempty"`
	Set   *[]byte      `json:"set,omitempty"`
}

// CloseSessionJSONRequestBody defines body for CloseSession for application/json ContentType.
type CloseSessionJSONRequestBody = ModelCloseSessionRequest

// KeepAliveJSONRequestBody defines body for KeepAlive for application/json ContentType.
type KeepAliveJSONRequestBody = ModelKeepAliveRequest

// OpenSessionJSONRequestBody defines body for OpenSession for application/json ContentType.
type OpenSessionJSONRequestBody = ImmudbmodelOpenSessionRequest

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody = ModelCreateCollectionRequest

// UpdateCollectionJSONRequestBody defines body for UpdateCollection for application/json ContentType.
type UpdateCollectionJSONRequestBody = ModelUpdateCollectionRequest

// InsertDocumentsJSONRequestBody defines body for InsertDocuments for application/json ContentType.
type InsertDocumentsJSONRequestBody = ModelInsertDocumentsRequest

// AuditDocumentJSONRequestBody defines body for AuditDocument for application/json ContentType.
type AuditDocumentJSONRequestBody = ModelAuditDocumentRequest

// DeleteDocumentsJSONRequestBody defines body for DeleteDocuments for application/json ContentType.
type DeleteDocumentsJSONRequestBody = ModelDeleteDocumentsRequest

// ProofDocumentJSONRequestBody defines body for ProofDocument for application/json ContentType.
type ProofDocumentJSONRequestBody = ModelProofDocumentRequest

// ReplaceDocumentJSONRequestBody defines body for ReplaceDocument for application/json ContentType.
type ReplaceDocumentJSONRequestBody = ModelReplaceDocumentRequest

// SearchDocumentsJSONRequestBody defines body for SearchDocuments for application/json ContentType.
type SearchDocumentsJSONRequestBody = ModelSearchDocumentsRequest

// CreateIndexJSONRequestBody defines body for CreateIndex for application/json ContentType.
type CreateIndexJSONRequestBody = ModelCreateIndexRequest

// DeleteIndexJSONRequestBody defines body for DeleteIndex for application/json ContentType.
type DeleteIndexJSONRequestBody = ModelDeleteIndexRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CloseSession request with any body
	CloseSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloseSession(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeepAlive request with any body
	KeepAliveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KeepAlive(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenSession request with any body
	OpenSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OpenSession(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollections request
	GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCollection request with any body
	CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCollection(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCollection request with any body
	UpdateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCollection(ctx context.Context, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCollection request
	DeleteCollection(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollection request
	GetCollection(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsertDocuments request with any body
	InsertDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsertDocuments(ctx context.Context, body InsertDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuditDocument request with any body
	AuditDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuditDocument(ctx context.Context, body AuditDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDocuments request with any body
	DeleteDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDocuments(ctx context.Context, body DeleteDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProofDocument request with any body
	ProofDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProofDocument(ctx context.Context, body ProofDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceDocument request with any body
	ReplaceDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceDocument(ctx context.Context, body ReplaceDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchDocuments request with any body
	SearchDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchDocuments(ctx context.Context, body SearchDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndex request with any body
	CreateIndexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndex(ctx context.Context, body CreateIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndex request with any body
	DeleteIndexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIndex(ctx context.Context, body DeleteIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CloseSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseSession(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeepAliveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeepAliveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeepAlive(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeepAliveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenSession(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCollectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCollection(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCollectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCollectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCollection(ctx context.Context, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCollectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCollection(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCollectionRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollection(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertDocumentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsertDocuments(ctx context.Context, body InsertDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsertDocumentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuditDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuditDocumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuditDocument(ctx context.Context, body AuditDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuditDocumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDocumentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDocuments(ctx context.Context, body DeleteDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDocumentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProofDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProofDocumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProofDocument(ctx context.Context, body ProofDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProofDocumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDocumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceDocument(ctx context.Context, body ReplaceDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceDocumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDocumentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDocuments(ctx context.Context, body SearchDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDocumentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndexRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndex(ctx context.Context, body CreateIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndexRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndexRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndex(ctx context.Context, body DeleteIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndexRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCloseSessionRequest calls the generic CloseSession builder with application/json body
func NewCloseSessionRequest(server string, body CloseSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloseSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCloseSessionRequestWithBody generates requests for CloseSession with any type of body
func NewCloseSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization/session/close")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKeepAliveRequest calls the generic KeepAlive builder with application/json body
func NewKeepAliveRequest(server string, body KeepAliveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKeepAliveRequestWithBody(server, "application/json", bodyReader)
}

// NewKeepAliveRequestWithBody generates requests for KeepAlive with any type of body
func NewKeepAliveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization/session/keepalive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOpenSessionRequest calls the generic OpenSession builder with application/json body
func NewOpenSessionRequest(server string, body OpenSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOpenSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewOpenSessionRequestWithBody generates requests for OpenSession with any type of body
func NewOpenSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization/session/open")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionsRequest generates requests for GetCollections
func NewGetCollectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCollectionRequest calls the generic CreateCollection builder with application/json body
func NewCreateCollectionRequest(server string, body CreateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCollectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCollectionRequestWithBody generates requests for CreateCollection with any type of body
func NewCreateCollectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCollectionRequest calls the generic UpdateCollection builder with application/json body
func NewUpdateCollectionRequest(server string, body UpdateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCollectionRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCollectionRequestWithBody generates requests for UpdateCollection with any type of body
func NewUpdateCollectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCollectionRequest generates requests for DeleteCollection
func NewDeleteCollectionRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionRequest generates requests for GetCollection
func NewGetCollectionRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsertDocumentsRequest calls the generic InsertDocuments builder with application/json body
func NewInsertDocumentsRequest(server string, body InsertDocumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsertDocumentsRequestWithBody(server, "application/json", bodyReader)
}

// NewInsertDocumentsRequestWithBody generates requests for InsertDocuments with any type of body
func NewInsertDocumentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuditDocumentRequest calls the generic AuditDocument builder with application/json body
func NewAuditDocumentRequest(server string, body AuditDocumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuditDocumentRequestWithBody(server, "application/json", bodyReader)
}

// NewAuditDocumentRequestWithBody generates requests for AuditDocument with any type of body
func NewAuditDocumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDocumentsRequest calls the generic DeleteDocuments builder with application/json body
func NewDeleteDocumentsRequest(server string, body DeleteDocumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDocumentsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteDocumentsRequestWithBody generates requests for DeleteDocuments with any type of body
func NewDeleteDocumentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProofDocumentRequest calls the generic ProofDocument builder with application/json body
func NewProofDocumentRequest(server string, body ProofDocumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProofDocumentRequestWithBody(server, "application/json", bodyReader)
}

// NewProofDocumentRequestWithBody generates requests for ProofDocument with any type of body
func NewProofDocumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/proof")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceDocumentRequest calls the generic ReplaceDocument builder with application/json body
func NewReplaceDocumentRequest(server string, body ReplaceDocumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceDocumentRequestWithBody(server, "application/json", bodyReader)
}

// NewReplaceDocumentRequestWithBody generates requests for ReplaceDocument with any type of body
func NewReplaceDocumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/replace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchDocumentsRequest calls the generic SearchDocuments builder with application/json body
func NewSearchDocumentsRequest(server string, body SearchDocumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchDocumentsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchDocumentsRequestWithBody generates requests for SearchDocuments with any type of body
func NewSearchDocumentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIndexRequest calls the generic CreateIndex builder with application/json body
func NewCreateIndexRequest(server string, body CreateIndexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndexRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndexRequestWithBody generates requests for CreateIndex with any type of body
func NewCreateIndexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndexRequest calls the generic DeleteIndex builder with application/json body
func NewDeleteIndexRequest(server string, body DeleteIndexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIndexRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteIndexRequestWithBody generates requests for DeleteIndex with any type of body
func NewDeleteIndexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CloseSession request with any body
	CloseSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error)

	CloseSessionWithResponse(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error)

	// KeepAlive request with any body
	KeepAliveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error)

	KeepAliveWithResponse(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error)

	// OpenSession request with any body
	OpenSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error)

	OpenSessionWithResponse(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error)

	// GetCollections request
	GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error)

	// CreateCollection request with any body
	CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error)

	CreateCollectionWithResponse(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error)

	// UpdateCollection request with any body
	UpdateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error)

	UpdateCollectionWithResponse(ctx context.Context, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error)

	// DeleteCollection request
	DeleteCollectionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCollectionResponse, error)

	// GetCollection request
	GetCollectionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error)

	// InsertDocuments request with any body
	InsertDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertDocumentsResponse, error)

	InsertDocumentsWithResponse(ctx context.Context, body InsertDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertDocumentsResponse, error)

	// AuditDocument request with any body
	AuditDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuditDocumentResponse, error)

	AuditDocumentWithResponse(ctx context.Context, body AuditDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*AuditDocumentResponse, error)

	// DeleteDocuments request with any body
	DeleteDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDocumentsResponse, error)

	DeleteDocumentsWithResponse(ctx context.Context, body DeleteDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDocumentsResponse, error)

	// ProofDocument request with any body
	ProofDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProofDocumentResponse, error)

	ProofDocumentWithResponse(ctx context.Context, body ProofDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*ProofDocumentResponse, error)

	// ReplaceDocument request with any body
	ReplaceDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDocumentResponse, error)

	ReplaceDocumentWithResponse(ctx context.Context, body ReplaceDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDocumentResponse, error)

	// SearchDocuments request with any body
	SearchDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDocumentsResponse, error)

	SearchDocumentsWithResponse(ctx context.Context, body SearchDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDocumentsResponse, error)

	// CreateIndex request with any body
	CreateIndexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndexResponse, error)

	CreateIndexWithResponse(ctx context.Context, body CreateIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndexResponse, error)

	// DeleteIndex request with any body
	DeleteIndexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIndexResponse, error)

	DeleteIndexWithResponse(ctx context.Context, body DeleteIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIndexResponse, error)
}

type CloseSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCloseSessionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CloseSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeepAliveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelKeepAliveResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r KeepAliveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeepAliveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImmudbmodelOpenSessionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r OpenSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelGetCollectionsResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r GetCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCreateCollectionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CreateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelUpdateCollectionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r UpdateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeleteCollectionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DeleteCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelGetCollectionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r GetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsertDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelInsertDocumentsResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r InsertDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsertDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuditDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelAuditDocumentResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r AuditDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuditDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeleteDocumentsResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DeleteDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProofDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelProofDocumentResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r ProofDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProofDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelReplaceDocumentResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r ReplaceDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSearchDocumentsResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r SearchDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCreateIndexResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CreateIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeleteIndexResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DeleteIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CloseSessionWithBodyWithResponse request with arbitrary body returning *CloseSessionResponse
func (c *ClientWithResponses) CloseSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error) {
	rsp, err := c.CloseSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseSessionResponse(rsp)
}

func (c *ClientWithResponses) CloseSessionWithResponse(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error) {
	rsp, err := c.CloseSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseSessionResponse(rsp)
}

// KeepAliveWithBodyWithResponse request with arbitrary body returning *KeepAliveResponse
func (c *ClientWithResponses) KeepAliveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error) {
	rsp, err := c.KeepAliveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeepAliveResponse(rsp)
}

func (c *ClientWithResponses) KeepAliveWithResponse(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error) {
	rsp, err := c.KeepAlive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeepAliveResponse(rsp)
}

// OpenSessionWithBodyWithResponse request with arbitrary body returning *OpenSessionResponse
func (c *ClientWithResponses) OpenSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error) {
	rsp, err := c.OpenSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenSessionResponse(rsp)
}

func (c *ClientWithResponses) OpenSessionWithResponse(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error) {
	rsp, err := c.OpenSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenSessionResponse(rsp)
}

// GetCollectionsWithResponse request returning *GetCollectionsResponse
func (c *ClientWithResponses) GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error) {
	rsp, err := c.GetCollections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsResponse(rsp)
}

// CreateCollectionWithBodyWithResponse request with arbitrary body returning *CreateCollectionResponse
func (c *ClientWithResponses) CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error) {
	rsp, err := c.CreateCollectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCollectionResponse(rsp)
}

func (c *ClientWithResponses) CreateCollectionWithResponse(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error) {
	rsp, err := c.CreateCollection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCollectionResponse(rsp)
}

// UpdateCollectionWithBodyWithResponse request with arbitrary body returning *UpdateCollectionResponse
func (c *ClientWithResponses) UpdateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error) {
	rsp, err := c.UpdateCollectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCollectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateCollectionWithResponse(ctx context.Context, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error) {
	rsp, err := c.UpdateCollection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCollectionResponse(rsp)
}

// DeleteCollectionWithResponse request returning *DeleteCollectionResponse
func (c *ClientWithResponses) DeleteCollectionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCollectionResponse, error) {
	rsp, err := c.DeleteCollection(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCollectionResponse(rsp)
}

// GetCollectionWithResponse request returning *GetCollectionResponse
func (c *ClientWithResponses) GetCollectionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error) {
	rsp, err := c.GetCollection(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionResponse(rsp)
}

// InsertDocumentsWithBodyWithResponse request with arbitrary body returning *InsertDocumentsResponse
func (c *ClientWithResponses) InsertDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InsertDocumentsResponse, error) {
	rsp, err := c.InsertDocumentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertDocumentsResponse(rsp)
}

func (c *ClientWithResponses) InsertDocumentsWithResponse(ctx context.Context, body InsertDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*InsertDocumentsResponse, error) {
	rsp, err := c.InsertDocuments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsertDocumentsResponse(rsp)
}

// AuditDocumentWithBodyWithResponse request with arbitrary body returning *AuditDocumentResponse
func (c *ClientWithResponses) AuditDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuditDocumentResponse, error) {
	rsp, err := c.AuditDocumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuditDocumentResponse(rsp)
}

func (c *ClientWithResponses) AuditDocumentWithResponse(ctx context.Context, body AuditDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*AuditDocumentResponse, error) {
	rsp, err := c.AuditDocument(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuditDocumentResponse(rsp)
}

// DeleteDocumentsWithBodyWithResponse request with arbitrary body returning *DeleteDocumentsResponse
func (c *ClientWithResponses) DeleteDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDocumentsResponse, error) {
	rsp, err := c.DeleteDocumentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDocumentsResponse(rsp)
}

func (c *ClientWithResponses) DeleteDocumentsWithResponse(ctx context.Context, body DeleteDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDocumentsResponse, error) {
	rsp, err := c.DeleteDocuments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDocumentsResponse(rsp)
}

// ProofDocumentWithBodyWithResponse request with arbitrary body returning *ProofDocumentResponse
func (c *ClientWithResponses) ProofDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProofDocumentResponse, error) {
	rsp, err := c.ProofDocumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProofDocumentResponse(rsp)
}

func (c *ClientWithResponses) ProofDocumentWithResponse(ctx context.Context, body ProofDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*ProofDocumentResponse, error) {
	rsp, err := c.ProofDocument(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProofDocumentResponse(rsp)
}

// ReplaceDocumentWithBodyWithResponse request with arbitrary body returning *ReplaceDocumentResponse
func (c *ClientWithResponses) ReplaceDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceDocumentResponse, error) {
	rsp, err := c.ReplaceDocumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDocumentResponse(rsp)
}

func (c *ClientWithResponses) ReplaceDocumentWithResponse(ctx context.Context, body ReplaceDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceDocumentResponse, error) {
	rsp, err := c.ReplaceDocument(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceDocumentResponse(rsp)
}

// SearchDocumentsWithBodyWithResponse request with arbitrary body returning *SearchDocumentsResponse
func (c *ClientWithResponses) SearchDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDocumentsResponse, error) {
	rsp, err := c.SearchDocumentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDocumentsResponse(rsp)
}

func (c *ClientWithResponses) SearchDocumentsWithResponse(ctx context.Context, body SearchDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDocumentsResponse, error) {
	rsp, err := c.SearchDocuments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDocumentsResponse(rsp)
}

// CreateIndexWithBodyWithResponse request with arbitrary body returning *CreateIndexResponse
func (c *ClientWithResponses) CreateIndexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndexResponse, error) {
	rsp, err := c.CreateIndexWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndexResponse(rsp)
}

func (c *ClientWithResponses) CreateIndexWithResponse(ctx context.Context, body CreateIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndexResponse, error) {
	rsp, err := c.CreateIndex(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndexResponse(rsp)
}

// DeleteIndexWithBodyWithResponse request with arbitrary body returning *DeleteIndexResponse
func (c *ClientWithResponses) DeleteIndexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIndexResponse, error) {
	rsp, err := c.DeleteIndexWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndexResponse(rsp)
}

func (c *ClientWithResponses) DeleteIndexWithResponse(ctx context.Context, body DeleteIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIndexResponse, error) {
	rsp, err := c.DeleteIndex(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndexResponse(rsp)
}

// ParseCloseSessionResponse parses an HTTP response from a CloseSessionWithResponse call
func ParseCloseSessionResponse(rsp *http.Response) (*CloseSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCloseSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseKeepAliveResponse parses an HTTP response from a KeepAliveWithResponse call
func ParseKeepAliveResponse(rsp *http.Response) (*KeepAliveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeepAliveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelKeepAliveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOpenSessionResponse parses an HTTP response from a OpenSessionWithResponse call
func ParseOpenSessionResponse(rsp *http.Response) (*OpenSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImmudbmodelOpenSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCollectionsResponse parses an HTTP response from a GetCollectionsWithResponse call
func ParseGetCollectionsResponse(rsp *http.Response) (*GetCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelGetCollectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCollectionResponse parses an HTTP response from a CreateCollectionWithResponse call
func ParseCreateCollectionResponse(rsp *http.Response) (*CreateCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCreateCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateCollectionResponse parses an HTTP response from a UpdateCollectionWithResponse call
func ParseUpdateCollectionResponse(rsp *http.Response) (*UpdateCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelUpdateCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCollectionResponse parses an HTTP response from a DeleteCollectionWithResponse call
func ParseDeleteCollectionResponse(rsp *http.Response) (*DeleteCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeleteCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCollectionResponse parses an HTTP response from a GetCollectionWithResponse call
func ParseGetCollectionResponse(rsp *http.Response) (*GetCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelGetCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInsertDocumentsResponse parses an HTTP response from a InsertDocumentsWithResponse call
func ParseInsertDocumentsResponse(rsp *http.Response) (*InsertDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsertDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelInsertDocumentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuditDocumentResponse parses an HTTP response from a AuditDocumentWithResponse call
func ParseAuditDocumentResponse(rsp *http.Response) (*AuditDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuditDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelAuditDocumentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDocumentsResponse parses an HTTP response from a DeleteDocumentsWithResponse call
func ParseDeleteDocumentsResponse(rsp *http.Response) (*DeleteDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeleteDocumentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseProofDocumentResponse parses an HTTP response from a ProofDocumentWithResponse call
func ParseProofDocumentResponse(rsp *http.Response) (*ProofDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProofDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelProofDocumentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceDocumentResponse parses an HTTP response from a ReplaceDocumentWithResponse call
func ParseReplaceDocumentResponse(rsp *http.Response) (*ReplaceDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelReplaceDocumentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchDocumentsResponse parses an HTTP response from a SearchDocumentsWithResponse call
func ParseSearchDocumentsResponse(rsp *http.Response) (*SearchDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSearchDocumentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndexResponse parses an HTTP response from a CreateIndexWithResponse call
func ParseCreateIndexResponse(rsp *http.Response) (*CreateIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCreateIndexResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndexResponse parses an HTTP response from a DeleteIndexWithResponse call
func ParseDeleteIndexResponse(rsp *http.Response) (*DeleteIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeleteIndexResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
