/*
Copyright 2023 Codenotary Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package immudb.documentschema;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "schema.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "github.com/codenotary/immudb/pkg/api/documentschema";
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  base_path: "/api/v2",
  info: {
    title: "immudb REST API v2";
    description: "Objects storage API"
  };
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "grpc-metadata-sessionid"
        description: "Session token: <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

message DocumentInsertRequest {
  string collection = 1;
  google.protobuf.Struct document = 2;
}

message DocumentInsertResponse {
  schema.VerifiableTx proof = 1;
  string documentId = 2;
}

message DocumentUpdateRequest {
  string collection = 1;
  string documentId = 2;
  google.protobuf.Struct document = 3;
}

message DocumentUpdateResponse {
  schema.VerifiableTx proof = 1;
  uint64 revision = 2;
}


enum QueryOperator {
  EQ = 0;
  GT = 1;
  GTE = 2;
  LT = 3;
  LTE = 4;
  LIKE = 5;
}

message IndexValue {
  oneof kind {
    google.protobuf.NullValue null_value = 1;
    double number_value = 2;
    string string_value = 3;
    bool bool_value = 4;
  }
}

message DocumentQuery {
  string field = 1;
  QueryOperator operator = 2;
  google.protobuf.Value value = 3;
}


message DocumentSearchRequest {
  string collection = 1;
  repeated DocumentQuery query = 2;
  uint32 page = 3;
  uint32 perPage = 4;
}

message DocumentSearchResponse {
  repeated google.protobuf.Struct results = 1;
  uint32 page = 2;
  uint32 perPage = 3;
  uint32 entriesLeft = 4;
}


message DocumentProofRequest {
  string collection = 1;
  string documentId = 2;
  int64 atRevision = 3;
}


message DocumentProofResponse {
  schema.VerifiableTx proof = 1;
}


message DocumentAuditRequest {
  string collection = 1;
  string documentId = 2;
  uint32 page = 3;
  uint32 perPage = 4;
}


message DocumentAuditResponse {
  repeated DocumentAudit results = 1;
  uint32 page = 2;
  uint32 perPage = 3;
  uint32 entriesLeft = 4;
}

message DocumentAudit {
  google.protobuf.Struct value = 1;
  uint64 transactionID = 2;
}


message IndexOption {
  IndexType type = 1;
  bool isUnique = 2;
}

enum IndexType {
  DOUBLE = 0;
  INTEGER = 1;
  STRING = 2;
}

message CollectionCreateRequest {
  string name = 1;
  map<string, IndexOption>  indexKeys = 2;
}

message CollectionCreateResponse {
  CollectionInformation collection = 1;
}

message CollectionInformation {
  string name = 1;
  map<string, IndexOption>  indexKeys = 2;
}

message CollectionGetResponse {
  CollectionInformation collection = 1;
}

message CollectionGetRequest {
  string name = 1;
}

message CollectionListRequest {
}

message CollectionListResponse {
  repeated CollectionInformation collections = 1;
}

message CollectionDeleteRequest {
  string name = 1;
}

message CollectionDeleteResponse {
}

message Proof {
  string name = 1;
}


service DocumentService {
  rpc DocumentInsert(DocumentInsertRequest) returns (DocumentInsertResponse) {
    option (google.api.http) = {
      put: "/documents/insert"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  } 

  rpc DocumentUpdate(DocumentUpdateRequest) returns (DocumentUpdateResponse) {
    option (google.api.http) = {
      post: "/documents/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: ["documents"];
    };
  } 
 
  rpc DocumentSearch(DocumentSearchRequest) returns (DocumentSearchResponse) {
    option (google.api.http) = {
      post: "/documents/search"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "documents";
    };
  } 

 
  rpc DocumentAudit(DocumentAuditRequest) returns (DocumentAuditResponse) {
    option (google.api.http) = {
      post: "/documents/audit"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: ["documents", "audit"];
    };
  } 
 
  rpc DocumentProof(DocumentProofRequest) returns (DocumentProofResponse) {
    option (google.api.http) = {
      post: "/documents/proof"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: ["documents", "audit"];
    };
  } 

  rpc CollectionCreate(CollectionCreateRequest) returns (CollectionCreateResponse) {
    option (google.api.http) = {
      put: "/collections/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }

  rpc CollectionGet(CollectionGetRequest) returns (CollectionGetResponse) {
    option (google.api.http) = {
      get: "/collections/get"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }

  
  rpc CollectionList(CollectionListRequest) returns (CollectionListResponse) {
    option (google.api.http) = {
      post: "/collections/list"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }
  rpc CollectionDelete(CollectionDeleteRequest) returns (CollectionDeleteResponse) {
    option (google.api.http) = {
      delete: "/collections/delete"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "collections";
    };
  }
}