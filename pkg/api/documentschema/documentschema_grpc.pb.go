// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package documentschema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentServiceClient interface {
	DocumentInsert(ctx context.Context, in *DocumentInsertRequest, opts ...grpc.CallOption) (*DocumentInsertResponse, error)
	DocumentUpdate(ctx context.Context, in *DocumentUpdateRequest, opts ...grpc.CallOption) (*DocumentUpdateResponse, error)
	DocumentSearch(ctx context.Context, in *DocumentSearchRequest, opts ...grpc.CallOption) (*DocumentSearchResponse, error)
	DocumentAudit(ctx context.Context, in *DocumentAuditRequest, opts ...grpc.CallOption) (*DocumentAuditResponse, error)
	DocumentProof(ctx context.Context, in *DocumentProofRequest, opts ...grpc.CallOption) (*DocumentProofResponse, error)
	CollectionCreate(ctx context.Context, in *CollectionCreateRequest, opts ...grpc.CallOption) (*CollectionCreateResponse, error)
	CollectionGet(ctx context.Context, in *CollectionGetRequest, opts ...grpc.CallOption) (*CollectionGetResponse, error)
	CollectionList(ctx context.Context, in *CollectionListRequest, opts ...grpc.CallOption) (*CollectionListResponse, error)
	CollectionDelete(ctx context.Context, in *CollectionDeleteRequest, opts ...grpc.CallOption) (*CollectionDeleteResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) DocumentInsert(ctx context.Context, in *DocumentInsertRequest, opts ...grpc.CallOption) (*DocumentInsertResponse, error) {
	out := new(DocumentInsertResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/DocumentInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DocumentUpdate(ctx context.Context, in *DocumentUpdateRequest, opts ...grpc.CallOption) (*DocumentUpdateResponse, error) {
	out := new(DocumentUpdateResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/DocumentUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DocumentSearch(ctx context.Context, in *DocumentSearchRequest, opts ...grpc.CallOption) (*DocumentSearchResponse, error) {
	out := new(DocumentSearchResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/DocumentSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DocumentAudit(ctx context.Context, in *DocumentAuditRequest, opts ...grpc.CallOption) (*DocumentAuditResponse, error) {
	out := new(DocumentAuditResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/DocumentAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DocumentProof(ctx context.Context, in *DocumentProofRequest, opts ...grpc.CallOption) (*DocumentProofResponse, error) {
	out := new(DocumentProofResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/DocumentProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) CollectionCreate(ctx context.Context, in *CollectionCreateRequest, opts ...grpc.CallOption) (*CollectionCreateResponse, error) {
	out := new(CollectionCreateResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/CollectionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) CollectionGet(ctx context.Context, in *CollectionGetRequest, opts ...grpc.CallOption) (*CollectionGetResponse, error) {
	out := new(CollectionGetResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/CollectionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) CollectionList(ctx context.Context, in *CollectionListRequest, opts ...grpc.CallOption) (*CollectionListResponse, error) {
	out := new(CollectionListResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/CollectionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) CollectionDelete(ctx context.Context, in *CollectionDeleteRequest, opts ...grpc.CallOption) (*CollectionDeleteResponse, error) {
	out := new(CollectionDeleteResponse)
	err := c.cc.Invoke(ctx, "/immudb.documentschema.DocumentService/CollectionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations should embed UnimplementedDocumentServiceServer
// for forward compatibility
type DocumentServiceServer interface {
	DocumentInsert(context.Context, *DocumentInsertRequest) (*DocumentInsertResponse, error)
	DocumentUpdate(context.Context, *DocumentUpdateRequest) (*DocumentUpdateResponse, error)
	DocumentSearch(context.Context, *DocumentSearchRequest) (*DocumentSearchResponse, error)
	DocumentAudit(context.Context, *DocumentAuditRequest) (*DocumentAuditResponse, error)
	DocumentProof(context.Context, *DocumentProofRequest) (*DocumentProofResponse, error)
	CollectionCreate(context.Context, *CollectionCreateRequest) (*CollectionCreateResponse, error)
	CollectionGet(context.Context, *CollectionGetRequest) (*CollectionGetResponse, error)
	CollectionList(context.Context, *CollectionListRequest) (*CollectionListResponse, error)
	CollectionDelete(context.Context, *CollectionDeleteRequest) (*CollectionDeleteResponse, error)
}

// UnimplementedDocumentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (UnimplementedDocumentServiceServer) DocumentInsert(context.Context, *DocumentInsertRequest) (*DocumentInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentInsert not implemented")
}
func (UnimplementedDocumentServiceServer) DocumentUpdate(context.Context, *DocumentUpdateRequest) (*DocumentUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentUpdate not implemented")
}
func (UnimplementedDocumentServiceServer) DocumentSearch(context.Context, *DocumentSearchRequest) (*DocumentSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentSearch not implemented")
}
func (UnimplementedDocumentServiceServer) DocumentAudit(context.Context, *DocumentAuditRequest) (*DocumentAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentAudit not implemented")
}
func (UnimplementedDocumentServiceServer) DocumentProof(context.Context, *DocumentProofRequest) (*DocumentProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentProof not implemented")
}
func (UnimplementedDocumentServiceServer) CollectionCreate(context.Context, *CollectionCreateRequest) (*CollectionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionCreate not implemented")
}
func (UnimplementedDocumentServiceServer) CollectionGet(context.Context, *CollectionGetRequest) (*CollectionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionGet not implemented")
}
func (UnimplementedDocumentServiceServer) CollectionList(context.Context, *CollectionListRequest) (*CollectionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionList not implemented")
}
func (UnimplementedDocumentServiceServer) CollectionDelete(context.Context, *CollectionDeleteRequest) (*CollectionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionDelete not implemented")
}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_DocumentInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DocumentInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/DocumentInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DocumentInsert(ctx, req.(*DocumentInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DocumentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DocumentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/DocumentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DocumentUpdate(ctx, req.(*DocumentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DocumentSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DocumentSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/DocumentSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DocumentSearch(ctx, req.(*DocumentSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DocumentAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DocumentAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/DocumentAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DocumentAudit(ctx, req.(*DocumentAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DocumentProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DocumentProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/DocumentProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DocumentProof(ctx, req.(*DocumentProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_CollectionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CollectionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/CollectionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CollectionCreate(ctx, req.(*CollectionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_CollectionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CollectionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/CollectionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CollectionGet(ctx, req.(*CollectionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_CollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/CollectionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CollectionList(ctx, req.(*CollectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_CollectionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CollectionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.documentschema.DocumentService/CollectionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CollectionDelete(ctx, req.(*CollectionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "immudb.documentschema.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DocumentInsert",
			Handler:    _DocumentService_DocumentInsert_Handler,
		},
		{
			MethodName: "DocumentUpdate",
			Handler:    _DocumentService_DocumentUpdate_Handler,
		},
		{
			MethodName: "DocumentSearch",
			Handler:    _DocumentService_DocumentSearch_Handler,
		},
		{
			MethodName: "DocumentAudit",
			Handler:    _DocumentService_DocumentAudit_Handler,
		},
		{
			MethodName: "DocumentProof",
			Handler:    _DocumentService_DocumentProof_Handler,
		},
		{
			MethodName: "CollectionCreate",
			Handler:    _DocumentService_CollectionCreate_Handler,
		},
		{
			MethodName: "CollectionGet",
			Handler:    _DocumentService_CollectionGet_Handler,
		},
		{
			MethodName: "CollectionList",
			Handler:    _DocumentService_CollectionList_Handler,
		},
		{
			MethodName: "CollectionDelete",
			Handler:    _DocumentService_CollectionDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documentschema.proto",
}
