/*
Copyright 2019-2020 vChain, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "pb/pb.proto";

package immudb.schema;

option go_package = "github.com/codenotary/immudb/pkg/api/schema";

message Key {
	bytes key = 1;
}

message LoginRequest {
	bytes user = 1;
	bytes password = 2;
}
message LoginResponse {
	bytes token = 1;
}

message KeyValue {
	bytes key = 1;
	bytes value = 2;
}

message Index {
	uint64 index = 1;
}

message Item {
	bytes key = 1;
	bytes value = 2;
	uint64 index = 3;
}

message KVList {
	repeated KeyValue KVs = 1;
}

message KeyList {
	repeated Key keys = 1;
}

message ItemList {
	repeated Item items = 1;
}

message Root {
	uint64 index = 1;
	bytes root = 2;
}

message ScanOptions {
	bytes prefix = 1;
	bytes offset = 2;
	uint64 limit = 3;
	bool reverse = 4;
	bool deep    = 5;
}

message KeyPrefix {
	bytes prefix = 1;
}

message ItemsCount {
	uint64 count = 1;
}

message InclusionProof {
	uint64 at = 1;
	uint64 index = 2;
	bytes root = 3;
	bytes leaf = 4;
	repeated bytes path = 5;
}

message ConsistencyProof {
	uint64 first = 1;
	uint64 second = 2;
	bytes firstRoot = 3;
	bytes secondRoot = 4;
	repeated bytes path = 5;
}

message Proof {
	bytes leaf = 1;
	uint64 index = 2;
	bytes root = 3;
	uint64 at = 4;
	repeated bytes inclusionPath = 5;
	repeated bytes consistencyPath = 6;
}

message SafeItem {
	Item item = 1;
	Proof proof = 2;
}

message SafeSetOptions {
	KeyValue kv = 1;
	Index rootIndex = 2;
}

message SafeGetOptions {
	Key key = 1;
	Index rootIndex = 2;
}

message SafeReferenceOptions {
	ReferenceOptions ro = 1;
	Index rootIndex = 2;
}

message HealthResponse {
	bool status = 1;
}

message ReferenceOptions {
	Key reference = 1;
	Key key = 2;
}

/*
Why use double as score type?
Because it is not purely about the storage size, but also use cases.
64-bit floating point double gives a lot of flexibility and dynamic range, at the expense of having only 53-bits of integer.
*/
message ZAddOptions {
	bytes set = 1;
	double score = 2;
	bytes key = 3;
}

message ZScanOptions {
	bytes set = 1;
	bytes offset = 2;
	uint64 limit = 3;
	bool reverse = 4;
}

message SafeZAddOptions {
	ZAddOptions zopts = 1;
	Index rootIndex = 2;
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	security_definitions: {
		security: {
			key: "bearer"
			value: {
				type: TYPE_API_KEY
				in: IN_HEADER
				name: "Authorization"
				description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
		}
	}
	security: {
		security_requirement: {
			key: "bearer"
		}
	}
};

service ImmuService {
	rpc Login (LoginRequest) returns (LoginResponse){
		option (google.api.http) = {
              post: "/v1/immurestproxy/login"
              body: "*"
					};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
							security: { } // no security
					};
	};
	rpc Set (KeyValue) returns (Index){
		option (google.api.http) = {
              post: "/v1/immurestproxy/item"
              body: "*"
          };
	};
	rpc SafeSet(SafeSetOptions) returns (Proof){
		option (google.api.http) = {
              post: "/v1/immurestproxy/item/safe"
              body: "*"
          };
	}
	rpc Get (Key) returns (Item){
		option (google.api.http) = {
            get: "/v1/immurestproxy/item/{key}"
        };
	};
	rpc SafeGet(SafeGetOptions) returns (SafeItem){
		option (google.api.http) = {
            post: "/v1/immurestproxy/item/safe/get"
            body: "*"
        };
	};
	rpc SetBatch (KVList) returns (Index){
		option (google.api.http) = {
            post: "/v1/immurestproxy/batch/set"
            body: "*"
        };
	};
	rpc GetBatch (KeyList) returns (ItemList){
		option (google.api.http) = {
            post: "/v1/immurestproxy/batch/get"
            body: "*"
        };
	};
	rpc Scan(ScanOptions) returns (ItemList){
		option (google.api.http) = {
            post: "/v1/immurestproxy/item/scan"
            body: "*"
        };
	};
	rpc Count(KeyPrefix) returns (ItemsCount){
		option (google.api.http) = {
            get: "/v1/immurestproxy/item/count/{prefix}"
        };
	};

	rpc CurrentRoot(google.protobuf.Empty) returns (Root) {
		option (google.api.http) = {
            get: "/v1/immurestproxy/root"
				};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
						security: { } // no security
				};
	};

	rpc Inclusion(Index) returns (InclusionProof){
		option (google.api.http) = {
            get: "/v1/immurestproxy/inclusionproof/{index}"
        };
	};
	rpc Consistency(Index) returns (ConsistencyProof){
		option (google.api.http) = {
            get: "/v1/immurestproxy/consistencyproof/{index}"
        };
	};
	rpc ByIndex(Index) returns (Item){
		option (google.api.http) = {
            get: "/v1/immurestproxy/item/index/{index}"
        };
	};
	rpc History(Key) returns (ItemList){
		option (google.api.http) = {
            get: "/v1/immurestproxy/history/{key}"
        };
	};
	rpc Health (google.protobuf.Empty) returns (HealthResponse){
		option (google.api.http) = {
            get: "/v1/immurestproxy/healthresponse"
				};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
						security: { } // no security
				};
	};
	rpc Reference (ReferenceOptions) returns (Index){
		option (google.api.http) = {
            post: "/v1/immurestproxy/reference"
            body: "*"
        };
	};
	rpc SafeReference (SafeReferenceOptions) returns (Proof){
		option (google.api.http) = {
            post: "/v1/immurestproxy/safe/reference"
            body: "*"
        };
	};
	rpc ZAdd (ZAddOptions) returns (Index){
		option (google.api.http) = {
            post: "/v1/immurestproxy/zadd"
            body: "*"
        };
	};
	rpc ZScan (ZScanOptions) returns (ItemList){
		option (google.api.http) = {
            post: "/v1/immurestproxy/zscan"
            body: "*"
        };
	};
	rpc SafeZAdd (SafeZAddOptions) returns (Proof){
		option (google.api.http) = {
            post: "/v1/immurestproxy/safe/zadd"
            body: "*"
        };
	};
	rpc Backup(google.protobuf.Empty) returns (stream pb.KVList) {
		option (google.api.http) = {
            post: "/v1/immurestproxy/backup"
            body: "*"
        };
	}
	rpc Restore(stream pb.KVList) returns (ItemsCount) {
		option (google.api.http) = {
            post: "/v1/immurestproxy/restore"
            body: "*"
        };
	}

}
