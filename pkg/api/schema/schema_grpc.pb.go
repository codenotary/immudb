// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImmuServiceClient is the client API for ImmuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImmuServiceClient interface {
	ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserList, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangePermission(ctx context.Context, in *ChangePermissionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetActiveUser(ctx context.Context, in *SetActiveUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Deprecated: Do not use.
	UpdateAuthConfig(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	// Deprecated: Do not use.
	UpdateMTLSConfig(ctx context.Context, in *MTLSConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionResponse, error)
	CloseSession(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	KeepAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	NewTx(ctx context.Context, in *NewTxRequest, opts ...grpc.CallOption) (*NewTxResponse, error)
	Commit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CommittedSQLTx, error)
	Rollback(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	TxSQLExec(ctx context.Context, in *SQLExecRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	TxSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResult, error)
	// Deprecated: Do not use.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Deprecated: Do not use.
	Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*TxHeader, error)
	VerifiableSet(ctx context.Context, in *VerifiableSetRequest, opts ...grpc.CallOption) (*VerifiableTx, error)
	Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Entry, error)
	VerifiableGet(ctx context.Context, in *VerifiableGetRequest, opts ...grpc.CallOption) (*VerifiableEntry, error)
	Delete(ctx context.Context, in *DeleteKeysRequest, opts ...grpc.CallOption) (*TxHeader, error)
	GetAll(ctx context.Context, in *KeyListRequest, opts ...grpc.CallOption) (*Entries, error)
	ExecAll(ctx context.Context, in *ExecAllRequest, opts ...grpc.CallOption) (*TxHeader, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*Entries, error)
	// NOT YET SUPPORTED
	Count(ctx context.Context, in *KeyPrefix, opts ...grpc.CallOption) (*EntryCount, error)
	// NOT YET SUPPORTED
	CountAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EntryCount, error)
	TxById(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Tx, error)
	VerifiableTxById(ctx context.Context, in *VerifiableTxRequest, opts ...grpc.CallOption) (*VerifiableTx, error)
	TxScan(ctx context.Context, in *TxScanRequest, opts ...grpc.CallOption) (*TxList, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*Entries, error)
	// ServerInfo returns information about the server instance.
	// ServerInfoRequest is defined for future extensions.
	ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
	// DEPRECATED: Use ServerInfo
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	DatabaseHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseHealthResponse, error)
	CurrentState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImmutableState, error)
	SetReference(ctx context.Context, in *ReferenceRequest, opts ...grpc.CallOption) (*TxHeader, error)
	VerifiableSetReference(ctx context.Context, in *VerifiableReferenceRequest, opts ...grpc.CallOption) (*VerifiableTx, error)
	ZAdd(ctx context.Context, in *ZAddRequest, opts ...grpc.CallOption) (*TxHeader, error)
	VerifiableZAdd(ctx context.Context, in *VerifiableZAddRequest, opts ...grpc.CallOption) (*VerifiableTx, error)
	ZScan(ctx context.Context, in *ZScanRequest, opts ...grpc.CallOption) (*ZEntries, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use CreateDatabaseV2
	CreateDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*empty.Empty, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use CreateDatabaseV2
	CreateDatabaseWith(ctx context.Context, in *DatabaseSettings, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateDatabaseV2(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error)
	LoadDatabase(ctx context.Context, in *LoadDatabaseRequest, opts ...grpc.CallOption) (*LoadDatabaseResponse, error)
	UnloadDatabase(ctx context.Context, in *UnloadDatabaseRequest, opts ...grpc.CallOption) (*UnloadDatabaseResponse, error)
	DeleteDatabase(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*DeleteDatabaseResponse, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use DatabaseListV2
	DatabaseList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseListResponse, error)
	DatabaseListV2(ctx context.Context, in *DatabaseListRequestV2, opts ...grpc.CallOption) (*DatabaseListResponseV2, error)
	UseDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*UseDatabaseReply, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use UpdateDatabaseV2
	UpdateDatabase(ctx context.Context, in *DatabaseSettings, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateDatabaseV2(ctx context.Context, in *UpdateDatabaseRequest, opts ...grpc.CallOption) (*UpdateDatabaseResponse, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use GetDatabaseSettingsV2
	GetDatabaseSettings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseSettings, error)
	GetDatabaseSettingsV2(ctx context.Context, in *DatabaseSettingsRequest, opts ...grpc.CallOption) (*DatabaseSettingsResponse, error)
	FlushIndex(ctx context.Context, in *FlushIndexRequest, opts ...grpc.CallOption) (*FlushIndexResponse, error)
	CompactIndex(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Streams
	StreamGet(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (ImmuService_StreamGetClient, error)
	StreamSet(ctx context.Context, opts ...grpc.CallOption) (ImmuService_StreamSetClient, error)
	StreamVerifiableGet(ctx context.Context, in *VerifiableGetRequest, opts ...grpc.CallOption) (ImmuService_StreamVerifiableGetClient, error)
	StreamVerifiableSet(ctx context.Context, opts ...grpc.CallOption) (ImmuService_StreamVerifiableSetClient, error)
	StreamScan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (ImmuService_StreamScanClient, error)
	StreamZScan(ctx context.Context, in *ZScanRequest, opts ...grpc.CallOption) (ImmuService_StreamZScanClient, error)
	StreamHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (ImmuService_StreamHistoryClient, error)
	StreamExecAll(ctx context.Context, opts ...grpc.CallOption) (ImmuService_StreamExecAllClient, error)
	// Replication
	ExportTx(ctx context.Context, in *ExportTxRequest, opts ...grpc.CallOption) (ImmuService_ExportTxClient, error)
	ReplicateTx(ctx context.Context, opts ...grpc.CallOption) (ImmuService_ReplicateTxClient, error)
	SQLExec(ctx context.Context, in *SQLExecRequest, opts ...grpc.CallOption) (*SQLExecResult, error)
	SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResult, error)
	ListTables(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SQLQueryResult, error)
	DescribeTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*SQLQueryResult, error)
	VerifiableSQLGet(ctx context.Context, in *VerifiableSQLGetRequest, opts ...grpc.CallOption) (*VerifiableSQLEntry, error)
}

type immuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImmuServiceClient(cc grpc.ClientConnInterface) ImmuServiceClient {
	return &immuServiceClient{cc}
}

func (c *immuServiceClient) ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ChangePermission(ctx context.Context, in *ChangePermissionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ChangePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SetActiveUser(ctx context.Context, in *SetActiveUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SetActiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) UpdateAuthConfig(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UpdateAuthConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) UpdateMTLSConfig(ctx context.Context, in *MTLSConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UpdateMTLSConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionResponse, error) {
	out := new(OpenSessionResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/OpenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CloseSession(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) KeepAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) NewTx(ctx context.Context, in *NewTxRequest, opts ...grpc.CallOption) (*NewTxResponse, error) {
	out := new(NewTxResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/NewTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Commit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CommittedSQLTx, error) {
	out := new(CommittedSQLTx)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Rollback(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) TxSQLExec(ctx context.Context, in *SQLExecRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/TxSQLExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) TxSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResult, error) {
	out := new(SQLQueryResult)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/TxSQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*TxHeader, error) {
	out := new(TxHeader)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) VerifiableSet(ctx context.Context, in *VerifiableSetRequest, opts ...grpc.CallOption) (*VerifiableTx, error) {
	out := new(VerifiableTx)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/VerifiableSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) VerifiableGet(ctx context.Context, in *VerifiableGetRequest, opts ...grpc.CallOption) (*VerifiableEntry, error) {
	out := new(VerifiableEntry)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/VerifiableGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Delete(ctx context.Context, in *DeleteKeysRequest, opts ...grpc.CallOption) (*TxHeader, error) {
	out := new(TxHeader)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) GetAll(ctx context.Context, in *KeyListRequest, opts ...grpc.CallOption) (*Entries, error) {
	out := new(Entries)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ExecAll(ctx context.Context, in *ExecAllRequest, opts ...grpc.CallOption) (*TxHeader, error) {
	out := new(TxHeader)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ExecAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*Entries, error) {
	out := new(Entries)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Count(ctx context.Context, in *KeyPrefix, opts ...grpc.CallOption) (*EntryCount, error) {
	out := new(EntryCount)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CountAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EntryCount, error) {
	out := new(EntryCount)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) TxById(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/TxById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) VerifiableTxById(ctx context.Context, in *VerifiableTxRequest, opts ...grpc.CallOption) (*VerifiableTx, error) {
	out := new(VerifiableTx)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/VerifiableTxById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) TxScan(ctx context.Context, in *TxScanRequest, opts ...grpc.CallOption) (*TxList, error) {
	out := new(TxList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/TxScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*Entries, error) {
	out := new(Entries)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	out := new(ServerInfoResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) DatabaseHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseHealthResponse, error) {
	out := new(DatabaseHealthResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/DatabaseHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CurrentState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImmutableState, error) {
	out := new(ImmutableState)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CurrentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SetReference(ctx context.Context, in *ReferenceRequest, opts ...grpc.CallOption) (*TxHeader, error) {
	out := new(TxHeader)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SetReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) VerifiableSetReference(ctx context.Context, in *VerifiableReferenceRequest, opts ...grpc.CallOption) (*VerifiableTx, error) {
	out := new(VerifiableTx)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/VerifiableSetReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ZAdd(ctx context.Context, in *ZAddRequest, opts ...grpc.CallOption) (*TxHeader, error) {
	out := new(TxHeader)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) VerifiableZAdd(ctx context.Context, in *VerifiableZAddRequest, opts ...grpc.CallOption) (*VerifiableTx, error) {
	out := new(VerifiableTx)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/VerifiableZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ZScan(ctx context.Context, in *ZScanRequest, opts ...grpc.CallOption) (*ZEntries, error) {
	out := new(ZEntries)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ZScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) CreateDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) CreateDatabaseWith(ctx context.Context, in *DatabaseSettings, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CreateDatabaseWith", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CreateDatabaseV2(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error) {
	out := new(CreateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CreateDatabaseV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) LoadDatabase(ctx context.Context, in *LoadDatabaseRequest, opts ...grpc.CallOption) (*LoadDatabaseResponse, error) {
	out := new(LoadDatabaseResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/LoadDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) UnloadDatabase(ctx context.Context, in *UnloadDatabaseRequest, opts ...grpc.CallOption) (*UnloadDatabaseResponse, error) {
	out := new(UnloadDatabaseResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UnloadDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) DeleteDatabase(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*DeleteDatabaseResponse, error) {
	out := new(DeleteDatabaseResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/DeleteDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) DatabaseList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseListResponse, error) {
	out := new(DatabaseListResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/DatabaseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) DatabaseListV2(ctx context.Context, in *DatabaseListRequestV2, opts ...grpc.CallOption) (*DatabaseListResponseV2, error) {
	out := new(DatabaseListResponseV2)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/DatabaseListV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) UseDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*UseDatabaseReply, error) {
	out := new(UseDatabaseReply)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UseDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) UpdateDatabase(ctx context.Context, in *DatabaseSettings, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UpdateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) UpdateDatabaseV2(ctx context.Context, in *UpdateDatabaseRequest, opts ...grpc.CallOption) (*UpdateDatabaseResponse, error) {
	out := new(UpdateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UpdateDatabaseV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *immuServiceClient) GetDatabaseSettings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseSettings, error) {
	out := new(DatabaseSettings)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetDatabaseSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) GetDatabaseSettingsV2(ctx context.Context, in *DatabaseSettingsRequest, opts ...grpc.CallOption) (*DatabaseSettingsResponse, error) {
	out := new(DatabaseSettingsResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetDatabaseSettingsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) FlushIndex(ctx context.Context, in *FlushIndexRequest, opts ...grpc.CallOption) (*FlushIndexResponse, error) {
	out := new(FlushIndexResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/FlushIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CompactIndex(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CompactIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) StreamGet(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (ImmuService_StreamGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[0], "/immudb.schema.ImmuService/streamGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_StreamGetClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type immuServiceStreamGetClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamGetClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) StreamSet(ctx context.Context, opts ...grpc.CallOption) (ImmuService_StreamSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[1], "/immudb.schema.ImmuService/streamSet", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamSetClient{stream}
	return x, nil
}

type ImmuService_StreamSetClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*TxHeader, error)
	grpc.ClientStream
}

type immuServiceStreamSetClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamSetClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *immuServiceStreamSetClient) CloseAndRecv() (*TxHeader, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TxHeader)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) StreamVerifiableGet(ctx context.Context, in *VerifiableGetRequest, opts ...grpc.CallOption) (ImmuService_StreamVerifiableGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[2], "/immudb.schema.ImmuService/streamVerifiableGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamVerifiableGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_StreamVerifiableGetClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type immuServiceStreamVerifiableGetClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamVerifiableGetClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) StreamVerifiableSet(ctx context.Context, opts ...grpc.CallOption) (ImmuService_StreamVerifiableSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[3], "/immudb.schema.ImmuService/streamVerifiableSet", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamVerifiableSetClient{stream}
	return x, nil
}

type ImmuService_StreamVerifiableSetClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*VerifiableTx, error)
	grpc.ClientStream
}

type immuServiceStreamVerifiableSetClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamVerifiableSetClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *immuServiceStreamVerifiableSetClient) CloseAndRecv() (*VerifiableTx, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VerifiableTx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) StreamScan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (ImmuService_StreamScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[4], "/immudb.schema.ImmuService/streamScan", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_StreamScanClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type immuServiceStreamScanClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamScanClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) StreamZScan(ctx context.Context, in *ZScanRequest, opts ...grpc.CallOption) (ImmuService_StreamZScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[5], "/immudb.schema.ImmuService/streamZScan", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamZScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_StreamZScanClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type immuServiceStreamZScanClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamZScanClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) StreamHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (ImmuService_StreamHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[6], "/immudb.schema.ImmuService/streamHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_StreamHistoryClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type immuServiceStreamHistoryClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamHistoryClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) StreamExecAll(ctx context.Context, opts ...grpc.CallOption) (ImmuService_StreamExecAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[7], "/immudb.schema.ImmuService/streamExecAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceStreamExecAllClient{stream}
	return x, nil
}

type ImmuService_StreamExecAllClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*TxHeader, error)
	grpc.ClientStream
}

type immuServiceStreamExecAllClient struct {
	grpc.ClientStream
}

func (x *immuServiceStreamExecAllClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *immuServiceStreamExecAllClient) CloseAndRecv() (*TxHeader, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TxHeader)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) ExportTx(ctx context.Context, in *ExportTxRequest, opts ...grpc.CallOption) (ImmuService_ExportTxClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[8], "/immudb.schema.ImmuService/exportTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceExportTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_ExportTxClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type immuServiceExportTxClient struct {
	grpc.ClientStream
}

func (x *immuServiceExportTxClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) ReplicateTx(ctx context.Context, opts ...grpc.CallOption) (ImmuService_ReplicateTxClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImmuService_ServiceDesc.Streams[9], "/immudb.schema.ImmuService/replicateTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceReplicateTxClient{stream}
	return x, nil
}

type ImmuService_ReplicateTxClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*TxHeader, error)
	grpc.ClientStream
}

type immuServiceReplicateTxClient struct {
	grpc.ClientStream
}

func (x *immuServiceReplicateTxClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *immuServiceReplicateTxClient) CloseAndRecv() (*TxHeader, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TxHeader)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) SQLExec(ctx context.Context, in *SQLExecRequest, opts ...grpc.CallOption) (*SQLExecResult, error) {
	out := new(SQLExecResult)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SQLExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResult, error) {
	out := new(SQLQueryResult)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ListTables(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SQLQueryResult, error) {
	out := new(SQLQueryResult)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) DescribeTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*SQLQueryResult, error) {
	out := new(SQLQueryResult)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/DescribeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) VerifiableSQLGet(ctx context.Context, in *VerifiableSQLGetRequest, opts ...grpc.CallOption) (*VerifiableSQLEntry, error) {
	out := new(VerifiableSQLEntry)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/VerifiableSQLGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImmuServiceServer is the server API for ImmuService service.
// All implementations should embed UnimplementedImmuServiceServer
// for forward compatibility
type ImmuServiceServer interface {
	ListUsers(context.Context, *empty.Empty) (*UserList, error)
	CreateUser(context.Context, *CreateUserRequest) (*empty.Empty, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error)
	ChangePermission(context.Context, *ChangePermissionRequest) (*empty.Empty, error)
	SetActiveUser(context.Context, *SetActiveUserRequest) (*empty.Empty, error)
	// Deprecated: Do not use.
	UpdateAuthConfig(context.Context, *AuthConfig) (*empty.Empty, error)
	// Deprecated: Do not use.
	UpdateMTLSConfig(context.Context, *MTLSConfig) (*empty.Empty, error)
	OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionResponse, error)
	CloseSession(context.Context, *empty.Empty) (*empty.Empty, error)
	KeepAlive(context.Context, *empty.Empty) (*empty.Empty, error)
	NewTx(context.Context, *NewTxRequest) (*NewTxResponse, error)
	Commit(context.Context, *empty.Empty) (*CommittedSQLTx, error)
	Rollback(context.Context, *empty.Empty) (*empty.Empty, error)
	TxSQLExec(context.Context, *SQLExecRequest) (*empty.Empty, error)
	TxSQLQuery(context.Context, *SQLQueryRequest) (*SQLQueryResult, error)
	// Deprecated: Do not use.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Deprecated: Do not use.
	Logout(context.Context, *empty.Empty) (*empty.Empty, error)
	Set(context.Context, *SetRequest) (*TxHeader, error)
	VerifiableSet(context.Context, *VerifiableSetRequest) (*VerifiableTx, error)
	Get(context.Context, *KeyRequest) (*Entry, error)
	VerifiableGet(context.Context, *VerifiableGetRequest) (*VerifiableEntry, error)
	Delete(context.Context, *DeleteKeysRequest) (*TxHeader, error)
	GetAll(context.Context, *KeyListRequest) (*Entries, error)
	ExecAll(context.Context, *ExecAllRequest) (*TxHeader, error)
	Scan(context.Context, *ScanRequest) (*Entries, error)
	// NOT YET SUPPORTED
	Count(context.Context, *KeyPrefix) (*EntryCount, error)
	// NOT YET SUPPORTED
	CountAll(context.Context, *empty.Empty) (*EntryCount, error)
	TxById(context.Context, *TxRequest) (*Tx, error)
	VerifiableTxById(context.Context, *VerifiableTxRequest) (*VerifiableTx, error)
	TxScan(context.Context, *TxScanRequest) (*TxList, error)
	History(context.Context, *HistoryRequest) (*Entries, error)
	// ServerInfo returns information about the server instance.
	// ServerInfoRequest is defined for future extensions.
	ServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
	// DEPRECATED: Use ServerInfo
	Health(context.Context, *empty.Empty) (*HealthResponse, error)
	DatabaseHealth(context.Context, *empty.Empty) (*DatabaseHealthResponse, error)
	CurrentState(context.Context, *empty.Empty) (*ImmutableState, error)
	SetReference(context.Context, *ReferenceRequest) (*TxHeader, error)
	VerifiableSetReference(context.Context, *VerifiableReferenceRequest) (*VerifiableTx, error)
	ZAdd(context.Context, *ZAddRequest) (*TxHeader, error)
	VerifiableZAdd(context.Context, *VerifiableZAddRequest) (*VerifiableTx, error)
	ZScan(context.Context, *ZScanRequest) (*ZEntries, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use CreateDatabaseV2
	CreateDatabase(context.Context, *Database) (*empty.Empty, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use CreateDatabaseV2
	CreateDatabaseWith(context.Context, *DatabaseSettings) (*empty.Empty, error)
	CreateDatabaseV2(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error)
	LoadDatabase(context.Context, *LoadDatabaseRequest) (*LoadDatabaseResponse, error)
	UnloadDatabase(context.Context, *UnloadDatabaseRequest) (*UnloadDatabaseResponse, error)
	DeleteDatabase(context.Context, *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use DatabaseListV2
	DatabaseList(context.Context, *empty.Empty) (*DatabaseListResponse, error)
	DatabaseListV2(context.Context, *DatabaseListRequestV2) (*DatabaseListResponseV2, error)
	UseDatabase(context.Context, *Database) (*UseDatabaseReply, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use UpdateDatabaseV2
	UpdateDatabase(context.Context, *DatabaseSettings) (*empty.Empty, error)
	UpdateDatabaseV2(context.Context, *UpdateDatabaseRequest) (*UpdateDatabaseResponse, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use GetDatabaseSettingsV2
	GetDatabaseSettings(context.Context, *empty.Empty) (*DatabaseSettings, error)
	GetDatabaseSettingsV2(context.Context, *DatabaseSettingsRequest) (*DatabaseSettingsResponse, error)
	FlushIndex(context.Context, *FlushIndexRequest) (*FlushIndexResponse, error)
	CompactIndex(context.Context, *empty.Empty) (*empty.Empty, error)
	// Streams
	StreamGet(*KeyRequest, ImmuService_StreamGetServer) error
	StreamSet(ImmuService_StreamSetServer) error
	StreamVerifiableGet(*VerifiableGetRequest, ImmuService_StreamVerifiableGetServer) error
	StreamVerifiableSet(ImmuService_StreamVerifiableSetServer) error
	StreamScan(*ScanRequest, ImmuService_StreamScanServer) error
	StreamZScan(*ZScanRequest, ImmuService_StreamZScanServer) error
	StreamHistory(*HistoryRequest, ImmuService_StreamHistoryServer) error
	StreamExecAll(ImmuService_StreamExecAllServer) error
	// Replication
	ExportTx(*ExportTxRequest, ImmuService_ExportTxServer) error
	ReplicateTx(ImmuService_ReplicateTxServer) error
	SQLExec(context.Context, *SQLExecRequest) (*SQLExecResult, error)
	SQLQuery(context.Context, *SQLQueryRequest) (*SQLQueryResult, error)
	ListTables(context.Context, *empty.Empty) (*SQLQueryResult, error)
	DescribeTable(context.Context, *Table) (*SQLQueryResult, error)
	VerifiableSQLGet(context.Context, *VerifiableSQLGetRequest) (*VerifiableSQLEntry, error)
}

// UnimplementedImmuServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImmuServiceServer struct {
}

func (UnimplementedImmuServiceServer) ListUsers(context.Context, *empty.Empty) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedImmuServiceServer) CreateUser(context.Context, *CreateUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedImmuServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedImmuServiceServer) ChangePermission(context.Context, *ChangePermissionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePermission not implemented")
}
func (UnimplementedImmuServiceServer) SetActiveUser(context.Context, *SetActiveUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveUser not implemented")
}
func (UnimplementedImmuServiceServer) UpdateAuthConfig(context.Context, *AuthConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthConfig not implemented")
}
func (UnimplementedImmuServiceServer) UpdateMTLSConfig(context.Context, *MTLSConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMTLSConfig not implemented")
}
func (UnimplementedImmuServiceServer) OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSession not implemented")
}
func (UnimplementedImmuServiceServer) CloseSession(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedImmuServiceServer) KeepAlive(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedImmuServiceServer) NewTx(context.Context, *NewTxRequest) (*NewTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTx not implemented")
}
func (UnimplementedImmuServiceServer) Commit(context.Context, *empty.Empty) (*CommittedSQLTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedImmuServiceServer) Rollback(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedImmuServiceServer) TxSQLExec(context.Context, *SQLExecRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxSQLExec not implemented")
}
func (UnimplementedImmuServiceServer) TxSQLQuery(context.Context, *SQLQueryRequest) (*SQLQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxSQLQuery not implemented")
}
func (UnimplementedImmuServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedImmuServiceServer) Logout(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedImmuServiceServer) Set(context.Context, *SetRequest) (*TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedImmuServiceServer) VerifiableSet(context.Context, *VerifiableSetRequest) (*VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableSet not implemented")
}
func (UnimplementedImmuServiceServer) Get(context.Context, *KeyRequest) (*Entry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedImmuServiceServer) VerifiableGet(context.Context, *VerifiableGetRequest) (*VerifiableEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableGet not implemented")
}
func (UnimplementedImmuServiceServer) Delete(context.Context, *DeleteKeysRequest) (*TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedImmuServiceServer) GetAll(context.Context, *KeyListRequest) (*Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedImmuServiceServer) ExecAll(context.Context, *ExecAllRequest) (*TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecAll not implemented")
}
func (UnimplementedImmuServiceServer) Scan(context.Context, *ScanRequest) (*Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedImmuServiceServer) Count(context.Context, *KeyPrefix) (*EntryCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedImmuServiceServer) CountAll(context.Context, *empty.Empty) (*EntryCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAll not implemented")
}
func (UnimplementedImmuServiceServer) TxById(context.Context, *TxRequest) (*Tx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxById not implemented")
}
func (UnimplementedImmuServiceServer) VerifiableTxById(context.Context, *VerifiableTxRequest) (*VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableTxById not implemented")
}
func (UnimplementedImmuServiceServer) TxScan(context.Context, *TxScanRequest) (*TxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxScan not implemented")
}
func (UnimplementedImmuServiceServer) History(context.Context, *HistoryRequest) (*Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedImmuServiceServer) ServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerInfo not implemented")
}
func (UnimplementedImmuServiceServer) Health(context.Context, *empty.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedImmuServiceServer) DatabaseHealth(context.Context, *empty.Empty) (*DatabaseHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseHealth not implemented")
}
func (UnimplementedImmuServiceServer) CurrentState(context.Context, *empty.Empty) (*ImmutableState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentState not implemented")
}
func (UnimplementedImmuServiceServer) SetReference(context.Context, *ReferenceRequest) (*TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReference not implemented")
}
func (UnimplementedImmuServiceServer) VerifiableSetReference(context.Context, *VerifiableReferenceRequest) (*VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableSetReference not implemented")
}
func (UnimplementedImmuServiceServer) ZAdd(context.Context, *ZAddRequest) (*TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (UnimplementedImmuServiceServer) VerifiableZAdd(context.Context, *VerifiableZAddRequest) (*VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableZAdd not implemented")
}
func (UnimplementedImmuServiceServer) ZScan(context.Context, *ZScanRequest) (*ZEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScan not implemented")
}
func (UnimplementedImmuServiceServer) CreateDatabase(context.Context, *Database) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedImmuServiceServer) CreateDatabaseWith(context.Context, *DatabaseSettings) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabaseWith not implemented")
}
func (UnimplementedImmuServiceServer) CreateDatabaseV2(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabaseV2 not implemented")
}
func (UnimplementedImmuServiceServer) LoadDatabase(context.Context, *LoadDatabaseRequest) (*LoadDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadDatabase not implemented")
}
func (UnimplementedImmuServiceServer) UnloadDatabase(context.Context, *UnloadDatabaseRequest) (*UnloadDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadDatabase not implemented")
}
func (UnimplementedImmuServiceServer) DeleteDatabase(context.Context, *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabase not implemented")
}
func (UnimplementedImmuServiceServer) DatabaseList(context.Context, *empty.Empty) (*DatabaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseList not implemented")
}
func (UnimplementedImmuServiceServer) DatabaseListV2(context.Context, *DatabaseListRequestV2) (*DatabaseListResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseListV2 not implemented")
}
func (UnimplementedImmuServiceServer) UseDatabase(context.Context, *Database) (*UseDatabaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseDatabase not implemented")
}
func (UnimplementedImmuServiceServer) UpdateDatabase(context.Context, *DatabaseSettings) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabase not implemented")
}
func (UnimplementedImmuServiceServer) UpdateDatabaseV2(context.Context, *UpdateDatabaseRequest) (*UpdateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabaseV2 not implemented")
}
func (UnimplementedImmuServiceServer) GetDatabaseSettings(context.Context, *empty.Empty) (*DatabaseSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseSettings not implemented")
}
func (UnimplementedImmuServiceServer) GetDatabaseSettingsV2(context.Context, *DatabaseSettingsRequest) (*DatabaseSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseSettingsV2 not implemented")
}
func (UnimplementedImmuServiceServer) FlushIndex(context.Context, *FlushIndexRequest) (*FlushIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushIndex not implemented")
}
func (UnimplementedImmuServiceServer) CompactIndex(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompactIndex not implemented")
}
func (UnimplementedImmuServiceServer) StreamGet(*KeyRequest, ImmuService_StreamGetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGet not implemented")
}
func (UnimplementedImmuServiceServer) StreamSet(ImmuService_StreamSetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSet not implemented")
}
func (UnimplementedImmuServiceServer) StreamVerifiableGet(*VerifiableGetRequest, ImmuService_StreamVerifiableGetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVerifiableGet not implemented")
}
func (UnimplementedImmuServiceServer) StreamVerifiableSet(ImmuService_StreamVerifiableSetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVerifiableSet not implemented")
}
func (UnimplementedImmuServiceServer) StreamScan(*ScanRequest, ImmuService_StreamScanServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamScan not implemented")
}
func (UnimplementedImmuServiceServer) StreamZScan(*ZScanRequest, ImmuService_StreamZScanServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamZScan not implemented")
}
func (UnimplementedImmuServiceServer) StreamHistory(*HistoryRequest, ImmuService_StreamHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHistory not implemented")
}
func (UnimplementedImmuServiceServer) StreamExecAll(ImmuService_StreamExecAllServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExecAll not implemented")
}
func (UnimplementedImmuServiceServer) ExportTx(*ExportTxRequest, ImmuService_ExportTxServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportTx not implemented")
}
func (UnimplementedImmuServiceServer) ReplicateTx(ImmuService_ReplicateTxServer) error {
	return status.Errorf(codes.Unimplemented, "method ReplicateTx not implemented")
}
func (UnimplementedImmuServiceServer) SQLExec(context.Context, *SQLExecRequest) (*SQLExecResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLExec not implemented")
}
func (UnimplementedImmuServiceServer) SQLQuery(context.Context, *SQLQueryRequest) (*SQLQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLQuery not implemented")
}
func (UnimplementedImmuServiceServer) ListTables(context.Context, *empty.Empty) (*SQLQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedImmuServiceServer) DescribeTable(context.Context, *Table) (*SQLQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (UnimplementedImmuServiceServer) VerifiableSQLGet(context.Context, *VerifiableSQLGetRequest) (*VerifiableSQLEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableSQLGet not implemented")
}

// UnsafeImmuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImmuServiceServer will
// result in compilation errors.
type UnsafeImmuServiceServer interface {
	mustEmbedUnimplementedImmuServiceServer()
}

func RegisterImmuServiceServer(s grpc.ServiceRegistrar, srv ImmuServiceServer) {
	s.RegisterService(&ImmuService_ServiceDesc, srv)
}

func _ImmuService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ListUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ChangePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ChangePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ChangePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ChangePermission(ctx, req.(*ChangePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SetActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SetActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SetActiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SetActiveUser(ctx, req.(*SetActiveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UpdateAuthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UpdateAuthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UpdateAuthConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UpdateAuthConfig(ctx, req.(*AuthConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UpdateMTLSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTLSConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UpdateMTLSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UpdateMTLSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UpdateMTLSConfig(ctx, req.(*MTLSConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).OpenSession(ctx, req.(*OpenSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CloseSession(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).KeepAlive(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_NewTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).NewTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/NewTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).NewTx(ctx, req.(*NewTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Commit(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Rollback(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_TxSQLExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).TxSQLExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/TxSQLExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).TxSQLExec(ctx, req.(*SQLExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_TxSQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).TxSQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/TxSQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).TxSQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Logout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_VerifiableSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiableSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).VerifiableSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/VerifiableSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).VerifiableSet(ctx, req.(*VerifiableSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Get(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_VerifiableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiableGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).VerifiableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/VerifiableGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).VerifiableGet(ctx, req.(*VerifiableGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Delete(ctx, req.(*DeleteKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetAll(ctx, req.(*KeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ExecAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ExecAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ExecAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ExecAll(ctx, req.(*ExecAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Count(ctx, req.(*KeyPrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CountAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_TxById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).TxById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/TxById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).TxById(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_VerifiableTxById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiableTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).VerifiableTxById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/VerifiableTxById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).VerifiableTxById(ctx, req.(*VerifiableTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_TxScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).TxScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/TxScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).TxScan(ctx, req.(*TxScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_DatabaseHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).DatabaseHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/DatabaseHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).DatabaseHealth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CurrentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CurrentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CurrentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CurrentState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SetReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SetReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SetReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SetReference(ctx, req.(*ReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_VerifiableSetReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiableReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).VerifiableSetReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/VerifiableSetReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).VerifiableSetReference(ctx, req.(*VerifiableReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ZAdd(ctx, req.(*ZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_VerifiableZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiableZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).VerifiableZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/VerifiableZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).VerifiableZAdd(ctx, req.(*VerifiableZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ZScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ZScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ZScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ZScan(ctx, req.(*ZScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CreateDatabase(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CreateDatabaseWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CreateDatabaseWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CreateDatabaseWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CreateDatabaseWith(ctx, req.(*DatabaseSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CreateDatabaseV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CreateDatabaseV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CreateDatabaseV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CreateDatabaseV2(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_LoadDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).LoadDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/LoadDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).LoadDatabase(ctx, req.(*LoadDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UnloadDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UnloadDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UnloadDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UnloadDatabase(ctx, req.(*UnloadDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_DeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).DeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/DeleteDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).DeleteDatabase(ctx, req.(*DeleteDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_DatabaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).DatabaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/DatabaseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).DatabaseList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_DatabaseListV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseListRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).DatabaseListV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/DatabaseListV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).DatabaseListV2(ctx, req.(*DatabaseListRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UseDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UseDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UseDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UseDatabase(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UpdateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UpdateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UpdateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UpdateDatabase(ctx, req.(*DatabaseSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UpdateDatabaseV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UpdateDatabaseV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UpdateDatabaseV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UpdateDatabaseV2(ctx, req.(*UpdateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetDatabaseSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetDatabaseSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetDatabaseSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetDatabaseSettings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetDatabaseSettingsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetDatabaseSettingsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetDatabaseSettingsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetDatabaseSettingsV2(ctx, req.(*DatabaseSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_FlushIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).FlushIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/FlushIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).FlushIndex(ctx, req.(*FlushIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CompactIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CompactIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CompactIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CompactIndex(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_StreamGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).StreamGet(m, &immuServiceStreamGetServer{stream})
}

type ImmuService_StreamGetServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type immuServiceStreamGetServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamGetServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmuService_StreamSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImmuServiceServer).StreamSet(&immuServiceStreamSetServer{stream})
}

type ImmuService_StreamSetServer interface {
	SendAndClose(*TxHeader) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type immuServiceStreamSetServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamSetServer) SendAndClose(m *TxHeader) error {
	return x.ServerStream.SendMsg(m)
}

func (x *immuServiceStreamSetServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImmuService_StreamVerifiableGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VerifiableGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).StreamVerifiableGet(m, &immuServiceStreamVerifiableGetServer{stream})
}

type ImmuService_StreamVerifiableGetServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type immuServiceStreamVerifiableGetServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamVerifiableGetServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmuService_StreamVerifiableSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImmuServiceServer).StreamVerifiableSet(&immuServiceStreamVerifiableSetServer{stream})
}

type ImmuService_StreamVerifiableSetServer interface {
	SendAndClose(*VerifiableTx) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type immuServiceStreamVerifiableSetServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamVerifiableSetServer) SendAndClose(m *VerifiableTx) error {
	return x.ServerStream.SendMsg(m)
}

func (x *immuServiceStreamVerifiableSetServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImmuService_StreamScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).StreamScan(m, &immuServiceStreamScanServer{stream})
}

type ImmuService_StreamScanServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type immuServiceStreamScanServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamScanServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmuService_StreamZScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ZScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).StreamZScan(m, &immuServiceStreamZScanServer{stream})
}

type ImmuService_StreamZScanServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type immuServiceStreamZScanServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamZScanServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmuService_StreamHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).StreamHistory(m, &immuServiceStreamHistoryServer{stream})
}

type ImmuService_StreamHistoryServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type immuServiceStreamHistoryServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamHistoryServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmuService_StreamExecAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImmuServiceServer).StreamExecAll(&immuServiceStreamExecAllServer{stream})
}

type ImmuService_StreamExecAllServer interface {
	SendAndClose(*TxHeader) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type immuServiceStreamExecAllServer struct {
	grpc.ServerStream
}

func (x *immuServiceStreamExecAllServer) SendAndClose(m *TxHeader) error {
	return x.ServerStream.SendMsg(m)
}

func (x *immuServiceStreamExecAllServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImmuService_ExportTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportTxRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).ExportTx(m, &immuServiceExportTxServer{stream})
}

type ImmuService_ExportTxServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type immuServiceExportTxServer struct {
	grpc.ServerStream
}

func (x *immuServiceExportTxServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmuService_ReplicateTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImmuServiceServer).ReplicateTx(&immuServiceReplicateTxServer{stream})
}

type ImmuService_ReplicateTxServer interface {
	SendAndClose(*TxHeader) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type immuServiceReplicateTxServer struct {
	grpc.ServerStream
}

func (x *immuServiceReplicateTxServer) SendAndClose(m *TxHeader) error {
	return x.ServerStream.SendMsg(m)
}

func (x *immuServiceReplicateTxServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImmuService_SQLExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SQLExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SQLExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SQLExec(ctx, req.(*SQLExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ListTables(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Table)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/DescribeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).DescribeTable(ctx, req.(*Table))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_VerifiableSQLGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiableSQLGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).VerifiableSQLGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/VerifiableSQLGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).VerifiableSQLGet(ctx, req.(*VerifiableSQLGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImmuService_ServiceDesc is the grpc.ServiceDesc for ImmuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImmuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "immudb.schema.ImmuService",
	HandlerType: (*ImmuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _ImmuService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ImmuService_CreateUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _ImmuService_ChangePassword_Handler,
		},
		{
			MethodName: "ChangePermission",
			Handler:    _ImmuService_ChangePermission_Handler,
		},
		{
			MethodName: "SetActiveUser",
			Handler:    _ImmuService_SetActiveUser_Handler,
		},
		{
			MethodName: "UpdateAuthConfig",
			Handler:    _ImmuService_UpdateAuthConfig_Handler,
		},
		{
			MethodName: "UpdateMTLSConfig",
			Handler:    _ImmuService_UpdateMTLSConfig_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _ImmuService_OpenSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _ImmuService_CloseSession_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _ImmuService_KeepAlive_Handler,
		},
		{
			MethodName: "NewTx",
			Handler:    _ImmuService_NewTx_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _ImmuService_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _ImmuService_Rollback_Handler,
		},
		{
			MethodName: "TxSQLExec",
			Handler:    _ImmuService_TxSQLExec_Handler,
		},
		{
			MethodName: "TxSQLQuery",
			Handler:    _ImmuService_TxSQLQuery_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ImmuService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ImmuService_Logout_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ImmuService_Set_Handler,
		},
		{
			MethodName: "VerifiableSet",
			Handler:    _ImmuService_VerifiableSet_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ImmuService_Get_Handler,
		},
		{
			MethodName: "VerifiableGet",
			Handler:    _ImmuService_VerifiableGet_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ImmuService_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ImmuService_GetAll_Handler,
		},
		{
			MethodName: "ExecAll",
			Handler:    _ImmuService_ExecAll_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _ImmuService_Scan_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _ImmuService_Count_Handler,
		},
		{
			MethodName: "CountAll",
			Handler:    _ImmuService_CountAll_Handler,
		},
		{
			MethodName: "TxById",
			Handler:    _ImmuService_TxById_Handler,
		},
		{
			MethodName: "VerifiableTxById",
			Handler:    _ImmuService_VerifiableTxById_Handler,
		},
		{
			MethodName: "TxScan",
			Handler:    _ImmuService_TxScan_Handler,
		},
		{
			MethodName: "History",
			Handler:    _ImmuService_History_Handler,
		},
		{
			MethodName: "ServerInfo",
			Handler:    _ImmuService_ServerInfo_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ImmuService_Health_Handler,
		},
		{
			MethodName: "DatabaseHealth",
			Handler:    _ImmuService_DatabaseHealth_Handler,
		},
		{
			MethodName: "CurrentState",
			Handler:    _ImmuService_CurrentState_Handler,
		},
		{
			MethodName: "SetReference",
			Handler:    _ImmuService_SetReference_Handler,
		},
		{
			MethodName: "VerifiableSetReference",
			Handler:    _ImmuService_VerifiableSetReference_Handler,
		},
		{
			MethodName: "ZAdd",
			Handler:    _ImmuService_ZAdd_Handler,
		},
		{
			MethodName: "VerifiableZAdd",
			Handler:    _ImmuService_VerifiableZAdd_Handler,
		},
		{
			MethodName: "ZScan",
			Handler:    _ImmuService_ZScan_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _ImmuService_CreateDatabase_Handler,
		},
		{
			MethodName: "CreateDatabaseWith",
			Handler:    _ImmuService_CreateDatabaseWith_Handler,
		},
		{
			MethodName: "CreateDatabaseV2",
			Handler:    _ImmuService_CreateDatabaseV2_Handler,
		},
		{
			MethodName: "LoadDatabase",
			Handler:    _ImmuService_LoadDatabase_Handler,
		},
		{
			MethodName: "UnloadDatabase",
			Handler:    _ImmuService_UnloadDatabase_Handler,
		},
		{
			MethodName: "DeleteDatabase",
			Handler:    _ImmuService_DeleteDatabase_Handler,
		},
		{
			MethodName: "DatabaseList",
			Handler:    _ImmuService_DatabaseList_Handler,
		},
		{
			MethodName: "DatabaseListV2",
			Handler:    _ImmuService_DatabaseListV2_Handler,
		},
		{
			MethodName: "UseDatabase",
			Handler:    _ImmuService_UseDatabase_Handler,
		},
		{
			MethodName: "UpdateDatabase",
			Handler:    _ImmuService_UpdateDatabase_Handler,
		},
		{
			MethodName: "UpdateDatabaseV2",
			Handler:    _ImmuService_UpdateDatabaseV2_Handler,
		},
		{
			MethodName: "GetDatabaseSettings",
			Handler:    _ImmuService_GetDatabaseSettings_Handler,
		},
		{
			MethodName: "GetDatabaseSettingsV2",
			Handler:    _ImmuService_GetDatabaseSettingsV2_Handler,
		},
		{
			MethodName: "FlushIndex",
			Handler:    _ImmuService_FlushIndex_Handler,
		},
		{
			MethodName: "CompactIndex",
			Handler:    _ImmuService_CompactIndex_Handler,
		},
		{
			MethodName: "SQLExec",
			Handler:    _ImmuService_SQLExec_Handler,
		},
		{
			MethodName: "SQLQuery",
			Handler:    _ImmuService_SQLQuery_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _ImmuService_ListTables_Handler,
		},
		{
			MethodName: "DescribeTable",
			Handler:    _ImmuService_DescribeTable_Handler,
		},
		{
			MethodName: "VerifiableSQLGet",
			Handler:    _ImmuService_VerifiableSQLGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamGet",
			Handler:       _ImmuService_StreamGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamSet",
			Handler:       _ImmuService_StreamSet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "streamVerifiableGet",
			Handler:       _ImmuService_StreamVerifiableGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamVerifiableSet",
			Handler:       _ImmuService_StreamVerifiableSet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "streamScan",
			Handler:       _ImmuService_StreamScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamZScan",
			Handler:       _ImmuService_StreamZScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamHistory",
			Handler:       _ImmuService_StreamHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamExecAll",
			Handler:       _ImmuService_StreamExecAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "exportTx",
			Handler:       _ImmuService_ExportTx_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "replicateTx",
			Handler:       _ImmuService_ReplicateTx_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "schema.proto",
}
