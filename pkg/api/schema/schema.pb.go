//
//Copyright 2022 Codenotary Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: schema.proto

package schema

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntryTypeAction int32

const (
	// Exclude entries from the result
	EntryTypeAction_EXCLUDE EntryTypeAction = 0
	// Provide keys in raw (unparsed) form and only the digest of the value
	EntryTypeAction_ONLY_DIGEST EntryTypeAction = 1
	// Provide keys and values in raw form
	EntryTypeAction_RAW_VALUE EntryTypeAction = 2
	// Provide parsed keys and values and resolve values if needed
	EntryTypeAction_RESOLVE EntryTypeAction = 3
)

// Enum value maps for EntryTypeAction.
var (
	EntryTypeAction_name = map[int32]string{
		0: "EXCLUDE",
		1: "ONLY_DIGEST",
		2: "RAW_VALUE",
		3: "RESOLVE",
	}
	EntryTypeAction_value = map[string]int32{
		"EXCLUDE":     0,
		"ONLY_DIGEST": 1,
		"RAW_VALUE":   2,
		"RESOLVE":     3,
	}
)

func (x EntryTypeAction) Enum() *EntryTypeAction {
	p := new(EntryTypeAction)
	*p = x
	return p
}

func (x EntryTypeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntryTypeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[0].Descriptor()
}

func (EntryTypeAction) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[0]
}

func (x EntryTypeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntryTypeAction.Descriptor instead.
func (EntryTypeAction) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

type PermissionAction int32

const (
	// Grant permission
	PermissionAction_GRANT PermissionAction = 0
	// Revoke permission
	PermissionAction_REVOKE PermissionAction = 1
)

// Enum value maps for PermissionAction.
var (
	PermissionAction_name = map[int32]string{
		0: "GRANT",
		1: "REVOKE",
	}
	PermissionAction_value = map[string]int32{
		"GRANT":  0,
		"REVOKE": 1,
	}
)

func (x PermissionAction) Enum() *PermissionAction {
	p := new(PermissionAction)
	*p = x
	return p
}

func (x PermissionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[1].Descriptor()
}

func (PermissionAction) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[1]
}

func (x PermissionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionAction.Descriptor instead.
func (PermissionAction) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{1}
}

type TxMode int32

const (
	// Read-only transaction
	TxMode_ReadOnly TxMode = 0
	// Write-only transaction
	TxMode_WriteOnly TxMode = 1
	// Read-write transaction
	TxMode_ReadWrite TxMode = 2
)

// Enum value maps for TxMode.
var (
	TxMode_name = map[int32]string{
		0: "ReadOnly",
		1: "WriteOnly",
		2: "ReadWrite",
	}
	TxMode_value = map[string]int32{
		"ReadOnly":  0,
		"WriteOnly": 1,
		"ReadWrite": 2,
	}
)

func (x TxMode) Enum() *TxMode {
	p := new(TxMode)
	*p = x
	return p
}

func (x TxMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxMode) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[2].Descriptor()
}

func (TxMode) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[2]
}

func (x TxMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxMode.Descriptor instead.
func (TxMode) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{2}
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Key) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Permission, 1 - read permission, 2 - read+write permission, 254 - admin, 255 - sysadmin
	Permission uint32 `protobuf:"varint,2,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Permission) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Permission) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username
	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// List of permissions for the user
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Name of the creator user
	Createdby string `protobuf:"bytes,4,opt,name=createdby,proto3" json:"createdby,omitempty"`
	// Time when the user was created
	Createdat string `protobuf:"bytes,5,opt,name=createdat,proto3" json:"createdat,omitempty"`
	// Flag indicating whether the user is active or not
	Active bool `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *User) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *User) GetCreatedby() string {
	if x != nil {
		return x.Createdby
	}
	return ""
}

func (x *User) GetCreatedat() string {
	if x != nil {
		return x.Createdat
	}
	return ""
}

func (x *User) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type UserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of users
	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserList) Reset() {
	*x = UserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserList) ProtoMessage() {}

func (x *UserList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserList.ProtoReflect.Descriptor instead.
func (*UserList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{3}
}

func (x *UserList) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username
	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Login password
	Password []byte `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Permission, 1 - read permission, 2 - read+write permission, 254 - admin
	Permission uint32 `protobuf:"varint,3,opt,name=permission,proto3" json:"permission,omitempty"`
	// Database name
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{4}
}

func (x *CreateUserRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateUserRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *CreateUserRequest) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *CreateUserRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username
	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{5}
}

func (x *UserRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username
	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Old password
	OldPassword []byte `protobuf:"bytes,2,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`
	// New password
	NewPassword []byte `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{6}
}

func (x *ChangePasswordRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChangePasswordRequest) GetOldPassword() []byte {
	if x != nil {
		return x.OldPassword
	}
	return nil
}

func (x *ChangePasswordRequest) GetNewPassword() []byte {
	if x != nil {
		return x.NewPassword
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username
	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// User's password
	Password []byte `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{7}
}

func (x *LoginRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: use session-based authentication
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Optional: additional warning message sent to the user (e.g. request to change the password)
	Warning []byte `protobuf:"bytes,2,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{8}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResponse) GetWarning() []byte {
	if x != nil {
		return x.Warning
	}
	return nil
}

// DEPRECATED
type AuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind uint32 `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *AuthConfig) Reset() {
	*x = AuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthConfig) ProtoMessage() {}

func (x *AuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthConfig.ProtoReflect.Descriptor instead.
func (*AuthConfig) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{9}
}

func (x *AuthConfig) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

// DEPRECATED
type MTLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *MTLSConfig) Reset() {
	*x = MTLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSConfig) ProtoMessage() {}

func (x *MTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSConfig.ProtoReflect.Descriptor instead.
func (*MTLSConfig) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{10}
}

func (x *MTLSConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type OpenSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username
	Username []byte `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password
	Password []byte `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Database name
	DatabaseName string `protobuf:"bytes,3,opt,name=databaseName,proto3" json:"databaseName,omitempty"`
}

func (x *OpenSessionRequest) Reset() {
	*x = OpenSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSessionRequest) ProtoMessage() {}

func (x *OpenSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSessionRequest.ProtoReflect.Descriptor instead.
func (*OpenSessionRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{11}
}

func (x *OpenSessionRequest) GetUsername() []byte {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *OpenSessionRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *OpenSessionRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type OpenSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the new session
	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	// UUID of the server
	ServerUUID string `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *OpenSessionResponse) Reset() {
	*x = OpenSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSessionResponse) ProtoMessage() {}

func (x *OpenSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSessionResponse.ProtoReflect.Descriptor instead.
func (*OpenSessionResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{12}
}

func (x *OpenSessionResponse) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *OpenSessionResponse) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type Precondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Precondition:
	//
	//	*Precondition_KeyMustExist
	//	*Precondition_KeyMustNotExist
	//	*Precondition_KeyNotModifiedAfterTX
	Precondition isPrecondition_Precondition `protobuf_oneof:"precondition"`
}

func (x *Precondition) Reset() {
	*x = Precondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition) ProtoMessage() {}

func (x *Precondition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition.ProtoReflect.Descriptor instead.
func (*Precondition) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{13}
}

func (m *Precondition) GetPrecondition() isPrecondition_Precondition {
	if m != nil {
		return m.Precondition
	}
	return nil
}

func (x *Precondition) GetKeyMustExist() *Precondition_KeyMustExistPrecondition {
	if x, ok := x.GetPrecondition().(*Precondition_KeyMustExist); ok {
		return x.KeyMustExist
	}
	return nil
}

func (x *Precondition) GetKeyMustNotExist() *Precondition_KeyMustNotExistPrecondition {
	if x, ok := x.GetPrecondition().(*Precondition_KeyMustNotExist); ok {
		return x.KeyMustNotExist
	}
	return nil
}

func (x *Precondition) GetKeyNotModifiedAfterTX() *Precondition_KeyNotModifiedAfterTXPrecondition {
	if x, ok := x.GetPrecondition().(*Precondition_KeyNotModifiedAfterTX); ok {
		return x.KeyNotModifiedAfterTX
	}
	return nil
}

type isPrecondition_Precondition interface {
	isPrecondition_Precondition()
}

type Precondition_KeyMustExist struct {
	KeyMustExist *Precondition_KeyMustExistPrecondition `protobuf:"bytes,1,opt,name=keyMustExist,proto3,oneof"`
}

type Precondition_KeyMustNotExist struct {
	KeyMustNotExist *Precondition_KeyMustNotExistPrecondition `protobuf:"bytes,2,opt,name=keyMustNotExist,proto3,oneof"`
}

type Precondition_KeyNotModifiedAfterTX struct {
	KeyNotModifiedAfterTX *Precondition_KeyNotModifiedAfterTXPrecondition `protobuf:"bytes,3,opt,name=keyNotModifiedAfterTX,proto3,oneof"`
}

func (*Precondition_KeyMustExist) isPrecondition_Precondition() {}

func (*Precondition_KeyMustNotExist) isPrecondition_Precondition() {}

func (*Precondition_KeyNotModifiedAfterTX) isPrecondition_Precondition() {}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    []byte      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Metadata *KVMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{14}
}

func (x *KeyValue) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyValue) GetMetadata() *KVMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction id at which the target value was set (i.e. not the reference transaction id)
	Tx uint64 `protobuf:"varint,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Key of the target value (i.e. not the reference entry)
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Value
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// If the request was for a reference, this field will keep information about the reference entry
	ReferencedBy *Reference `protobuf:"bytes,4,opt,name=referencedBy,proto3" json:"referencedBy,omitempty"`
	// Metadata of the target entry (i.e. not the reference entry)
	Metadata *KVMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// If set to true, this entry has expired and the value is not retrieved
	Expired bool `protobuf:"varint,6,opt,name=expired,proto3" json:"expired,omitempty"`
	// Key's revision, in case of GetAt it will be 0
	Revision uint64 `protobuf:"varint,7,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{15}
}

func (x *Entry) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *Entry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Entry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Entry) GetReferencedBy() *Reference {
	if x != nil {
		return x.ReferencedBy
	}
	return nil
}

func (x *Entry) GetMetadata() *KVMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Entry) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *Entry) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction if when the reference key was set
	Tx uint64 `protobuf:"varint,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Reference key
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// At which transaction the key is bound, 0 if reference is not bound and should read the most recent reference
	AtTx uint64 `protobuf:"varint,3,opt,name=atTx,proto3" json:"atTx,omitempty"`
	// Metadata of the reference entry
	Metadata *KVMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Revision of the reference entry
	Revision uint64 `protobuf:"varint,5,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{16}
}

func (x *Reference) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *Reference) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Reference) GetAtTx() uint64 {
	if x != nil {
		return x.AtTx
	}
	return 0
}

func (x *Reference) GetMetadata() *KVMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Reference) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type Op struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//
	//	*Op_Kv
	//	*Op_ZAdd
	//	*Op_Ref
	Operation isOp_Operation `protobuf_oneof:"operation"`
}

func (x *Op) Reset() {
	*x = Op{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Op) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Op) ProtoMessage() {}

func (x *Op) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Op.ProtoReflect.Descriptor instead.
func (*Op) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{17}
}

func (m *Op) GetOperation() isOp_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *Op) GetKv() *KeyValue {
	if x, ok := x.GetOperation().(*Op_Kv); ok {
		return x.Kv
	}
	return nil
}

func (x *Op) GetZAdd() *ZAddRequest {
	if x, ok := x.GetOperation().(*Op_ZAdd); ok {
		return x.ZAdd
	}
	return nil
}

func (x *Op) GetRef() *ReferenceRequest {
	if x, ok := x.GetOperation().(*Op_Ref); ok {
		return x.Ref
	}
	return nil
}

type isOp_Operation interface {
	isOp_Operation()
}

type Op_Kv struct {
	// Modify / add simple KV value
	Kv *KeyValue `protobuf:"bytes,1,opt,name=kv,proto3,oneof"`
}

type Op_ZAdd struct {
	// Modify / add sorted set entry
	ZAdd *ZAddRequest `protobuf:"bytes,2,opt,name=zAdd,proto3,oneof"`
}

type Op_Ref struct {
	// Modify / add reference
	Ref *ReferenceRequest `protobuf:"bytes,3,opt,name=ref,proto3,oneof"`
}

func (*Op_Kv) isOp_Operation() {}

func (*Op_ZAdd) isOp_Operation() {}

func (*Op_Ref) isOp_Operation() {}

type ExecAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of operations to perform
	Operations []*Op `protobuf:"bytes,1,rep,name=Operations,proto3" json:"Operations,omitempty"`
	// If set to true, do not wait for indexing to process this transaction
	NoWait bool `protobuf:"varint,2,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// Preconditions to check
	Preconditions []*Precondition `protobuf:"bytes,3,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
}

func (x *ExecAllRequest) Reset() {
	*x = ExecAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecAllRequest) ProtoMessage() {}

func (x *ExecAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecAllRequest.ProtoReflect.Descriptor instead.
func (*ExecAllRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{18}
}

func (x *ExecAllRequest) GetOperations() []*Op {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ExecAllRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *ExecAllRequest) GetPreconditions() []*Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

type Entries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of entries
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Entries) Reset() {
	*x = Entries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entries) ProtoMessage() {}

func (x *Entries) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entries.ProtoReflect.Descriptor instead.
func (*Entries) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{19}
}

func (x *Entries) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ZEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the sorted set
	Set []byte `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	// Referenced key
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Referenced entry
	Entry *Entry `protobuf:"bytes,3,opt,name=entry,proto3" json:"entry,omitempty"`
	// Sorted set element's score
	Score float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
	// At which transaction the key is bound,
	// 0 if reference is not bound and should read the most recent reference
	AtTx uint64 `protobuf:"varint,5,opt,name=atTx,proto3" json:"atTx,omitempty"`
}

func (x *ZEntry) Reset() {
	*x = ZEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZEntry) ProtoMessage() {}

func (x *ZEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZEntry.ProtoReflect.Descriptor instead.
func (*ZEntry) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{20}
}

func (x *ZEntry) GetSet() []byte {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ZEntry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ZEntry) GetEntry() *Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *ZEntry) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ZEntry) GetAtTx() uint64 {
	if x != nil {
		return x.AtTx
	}
	return 0
}

type ZEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ZEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ZEntries) Reset() {
	*x = ZEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZEntries) ProtoMessage() {}

func (x *ZEntries) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZEntries.ProtoReflect.Descriptor instead.
func (*ZEntries) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{21}
}

func (x *ZEntries) GetEntries() []*ZEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If not empty, continue scan at (when inclusiveSeek == true)
	// or after (when inclusiveSeek == false) that key
	SeekKey []byte `protobuf:"bytes,1,opt,name=seekKey,proto3" json:"seekKey,omitempty"`
	// stop at (when inclusiveEnd == true)
	// or before (when inclusiveEnd == false) that key
	EndKey []byte `protobuf:"bytes,7,opt,name=endKey,proto3" json:"endKey,omitempty"`
	// search for entries with this prefix only
	Prefix []byte `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// If set to true, sort items in descending order
	Desc bool `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// maximum number of entries to get, if not specified, the default value is used
	Limit uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// If non-zero, only require transactions up to this transaction to be
	// indexed, newer transaction may still be pending
	SinceTx uint64 `protobuf:"varint,5,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	// Deprecated: If set to true, do not wait for indexing to be done before finishing this call
	NoWait bool `protobuf:"varint,6,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// If set to true, results will include seekKey
	InclusiveSeek bool `protobuf:"varint,8,opt,name=inclusiveSeek,proto3" json:"inclusiveSeek,omitempty"`
	// If set to true, results will include endKey if needed
	InclusiveEnd bool `protobuf:"varint,9,opt,name=inclusiveEnd,proto3" json:"inclusiveEnd,omitempty"`
	// Specify the initial entry to be returned by excluding the initial set of entries
	Offset uint64 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ScanRequest) Reset() {
	*x = ScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRequest) ProtoMessage() {}

func (x *ScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRequest.ProtoReflect.Descriptor instead.
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{22}
}

func (x *ScanRequest) GetSeekKey() []byte {
	if x != nil {
		return x.SeekKey
	}
	return nil
}

func (x *ScanRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *ScanRequest) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *ScanRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *ScanRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ScanRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *ScanRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *ScanRequest) GetInclusiveSeek() bool {
	if x != nil {
		return x.InclusiveSeek
	}
	return false
}

func (x *ScanRequest) GetInclusiveEnd() bool {
	if x != nil {
		return x.InclusiveEnd
	}
	return false
}

func (x *ScanRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type KeyPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *KeyPrefix) Reset() {
	*x = KeyPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPrefix) ProtoMessage() {}

func (x *KeyPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPrefix.ProtoReflect.Descriptor instead.
func (*KeyPrefix) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{23}
}

func (x *KeyPrefix) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type EntryCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EntryCount) Reset() {
	*x = EntryCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryCount) ProtoMessage() {}

func (x *EntryCount) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryCount.ProtoReflect.Descriptor instead.
func (*EntryCount) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{24}
}

func (x *EntryCount) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{25}
}

func (x *Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TxHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// State value (Accumulative Hash - Alh) of the previous transaction
	PrevAlh []byte `protobuf:"bytes,2,opt,name=prevAlh,proto3" json:"prevAlh,omitempty"`
	// Unix timestamp of the transaction (in seconds)
	Ts int64 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	// Number of entries in a transaction
	Nentries int32 `protobuf:"varint,4,opt,name=nentries,proto3" json:"nentries,omitempty"`
	// Entries Hash - cumulative hash of all entries in the transaction
	EH []byte `protobuf:"bytes,5,opt,name=eH,proto3" json:"eH,omitempty"`
	// Binary linking tree transaction ID
	// (ID of last transaction already in the main Merkle Tree)
	BlTxId uint64 `protobuf:"varint,6,opt,name=blTxId,proto3" json:"blTxId,omitempty"`
	// Binary linking tree root (Root hash of the Merkle Tree)
	BlRoot []byte `protobuf:"bytes,7,opt,name=blRoot,proto3" json:"blRoot,omitempty"`
	// Header version
	Version int32 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	// Transaction metadata
	Metadata *TxMetadata `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TxHeader) Reset() {
	*x = TxHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxHeader) ProtoMessage() {}

func (x *TxHeader) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxHeader.ProtoReflect.Descriptor instead.
func (*TxHeader) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{26}
}

func (x *TxHeader) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TxHeader) GetPrevAlh() []byte {
	if x != nil {
		return x.PrevAlh
	}
	return nil
}

func (x *TxHeader) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *TxHeader) GetNentries() int32 {
	if x != nil {
		return x.Nentries
	}
	return 0
}

func (x *TxHeader) GetEH() []byte {
	if x != nil {
		return x.EH
	}
	return nil
}

func (x *TxHeader) GetBlTxId() uint64 {
	if x != nil {
		return x.BlTxId
	}
	return 0
}

func (x *TxHeader) GetBlRoot() []byte {
	if x != nil {
		return x.BlRoot
	}
	return nil
}

func (x *TxHeader) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TxHeader) GetMetadata() *TxMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TxMetadata contains metadata set to whole transaction
type TxMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry expiration information
	TruncatedTxID uint64 `protobuf:"varint,1,opt,name=truncatedTxID,proto3" json:"truncatedTxID,omitempty"`
	// Extra data
	Extra []byte `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TxMetadata) Reset() {
	*x = TxMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxMetadata) ProtoMessage() {}

func (x *TxMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxMetadata.ProtoReflect.Descriptor instead.
func (*TxMetadata) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{27}
}

func (x *TxMetadata) GetTruncatedTxID() uint64 {
	if x != nil {
		return x.TruncatedTxID
	}
	return 0
}

func (x *TxMetadata) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// LinearProof contains the linear part of the proof (outside the main Merkle Tree)
type LinearProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Starting transaction of the proof
	SourceTxId uint64 `protobuf:"varint,1,opt,name=sourceTxId,proto3" json:"sourceTxId,omitempty"`
	// End transaction of the proof
	TargetTxId uint64 `protobuf:"varint,2,opt,name=TargetTxId,proto3" json:"TargetTxId,omitempty"`
	// List of terms (inner hashes of transaction entries)
	Terms [][]byte `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *LinearProof) Reset() {
	*x = LinearProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearProof) ProtoMessage() {}

func (x *LinearProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearProof.ProtoReflect.Descriptor instead.
func (*LinearProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{28}
}

func (x *LinearProof) GetSourceTxId() uint64 {
	if x != nil {
		return x.SourceTxId
	}
	return 0
}

func (x *LinearProof) GetTargetTxId() uint64 {
	if x != nil {
		return x.TargetTxId
	}
	return 0
}

func (x *LinearProof) GetTerms() [][]byte {
	if x != nil {
		return x.Terms
	}
	return nil
}

// LinearAdvanceProof contains the proof of consistency between the consumed part of the older linear chain
// and the new Merkle Tree
type LinearAdvanceProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// terms for the linear chain
	LinearProofTerms [][]byte `protobuf:"bytes,1,rep,name=linearProofTerms,proto3" json:"linearProofTerms,omitempty"`
	// inclusion proofs for steps on the linear chain
	InclusionProofs []*InclusionProof `protobuf:"bytes,2,rep,name=inclusionProofs,proto3" json:"inclusionProofs,omitempty"`
}

func (x *LinearAdvanceProof) Reset() {
	*x = LinearAdvanceProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearAdvanceProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearAdvanceProof) ProtoMessage() {}

func (x *LinearAdvanceProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearAdvanceProof.ProtoReflect.Descriptor instead.
func (*LinearAdvanceProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{29}
}

func (x *LinearAdvanceProof) GetLinearProofTerms() [][]byte {
	if x != nil {
		return x.LinearProofTerms
	}
	return nil
}

func (x *LinearAdvanceProof) GetInclusionProofs() []*InclusionProof {
	if x != nil {
		return x.InclusionProofs
	}
	return nil
}

// DualProof contains inclusion and consistency proofs for dual Merkle-Tree + Linear proofs
type DualProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header of the source (earlier) transaction
	SourceTxHeader *TxHeader `protobuf:"bytes,1,opt,name=sourceTxHeader,proto3" json:"sourceTxHeader,omitempty"`
	// Header of the target (latter) transaction
	TargetTxHeader *TxHeader `protobuf:"bytes,2,opt,name=targetTxHeader,proto3" json:"targetTxHeader,omitempty"`
	// Inclusion proof of the source transaction hash in the main Merkle Tree
	InclusionProof [][]byte `protobuf:"bytes,3,rep,name=inclusionProof,proto3" json:"inclusionProof,omitempty"`
	// Consistency proof between Merkle Trees in the source and target transactions
	ConsistencyProof [][]byte `protobuf:"bytes,4,rep,name=consistencyProof,proto3" json:"consistencyProof,omitempty"`
	// Accumulative hash (Alh) of the last transaction that's part of the target Merkle Tree
	TargetBlTxAlh []byte `protobuf:"bytes,5,opt,name=targetBlTxAlh,proto3" json:"targetBlTxAlh,omitempty"`
	// Inclusion proof of the targetBlTxAlh in the target Merkle Tree
	LastInclusionProof [][]byte `protobuf:"bytes,6,rep,name=lastInclusionProof,proto3" json:"lastInclusionProof,omitempty"`
	// Linear proof starting from targetBlTxAlh to the final state value
	LinearProof *LinearProof `protobuf:"bytes,7,opt,name=linearProof,proto3" json:"linearProof,omitempty"`
	// Proof of consistency between some part of older linear chain and newer Merkle Tree
	LinearAdvanceProof *LinearAdvanceProof `protobuf:"bytes,8,opt,name=LinearAdvanceProof,proto3" json:"LinearAdvanceProof,omitempty"`
}

func (x *DualProof) Reset() {
	*x = DualProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DualProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DualProof) ProtoMessage() {}

func (x *DualProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DualProof.ProtoReflect.Descriptor instead.
func (*DualProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{30}
}

func (x *DualProof) GetSourceTxHeader() *TxHeader {
	if x != nil {
		return x.SourceTxHeader
	}
	return nil
}

func (x *DualProof) GetTargetTxHeader() *TxHeader {
	if x != nil {
		return x.TargetTxHeader
	}
	return nil
}

func (x *DualProof) GetInclusionProof() [][]byte {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *DualProof) GetConsistencyProof() [][]byte {
	if x != nil {
		return x.ConsistencyProof
	}
	return nil
}

func (x *DualProof) GetTargetBlTxAlh() []byte {
	if x != nil {
		return x.TargetBlTxAlh
	}
	return nil
}

func (x *DualProof) GetLastInclusionProof() [][]byte {
	if x != nil {
		return x.LastInclusionProof
	}
	return nil
}

func (x *DualProof) GetLinearProof() *LinearProof {
	if x != nil {
		return x.LinearProof
	}
	return nil
}

func (x *DualProof) GetLinearAdvanceProof() *LinearAdvanceProof {
	if x != nil {
		return x.LinearAdvanceProof
	}
	return nil
}

// DualProofV2 contains inclusion and consistency proofs
type DualProofV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header of the source (earlier) transaction
	SourceTxHeader *TxHeader `protobuf:"bytes,1,opt,name=sourceTxHeader,proto3" json:"sourceTxHeader,omitempty"`
	// Header of the target (latter) transaction
	TargetTxHeader *TxHeader `protobuf:"bytes,2,opt,name=targetTxHeader,proto3" json:"targetTxHeader,omitempty"`
	// Inclusion proof of the source transaction hash in the main Merkle Tree
	InclusionProof [][]byte `protobuf:"bytes,3,rep,name=inclusionProof,proto3" json:"inclusionProof,omitempty"`
	// Consistency proof between Merkle Trees in the source and target transactions
	ConsistencyProof [][]byte `protobuf:"bytes,4,rep,name=consistencyProof,proto3" json:"consistencyProof,omitempty"`
}

func (x *DualProofV2) Reset() {
	*x = DualProofV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DualProofV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DualProofV2) ProtoMessage() {}

func (x *DualProofV2) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DualProofV2.ProtoReflect.Descriptor instead.
func (*DualProofV2) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{31}
}

func (x *DualProofV2) GetSourceTxHeader() *TxHeader {
	if x != nil {
		return x.SourceTxHeader
	}
	return nil
}

func (x *DualProofV2) GetTargetTxHeader() *TxHeader {
	if x != nil {
		return x.TargetTxHeader
	}
	return nil
}

func (x *DualProofV2) GetInclusionProof() [][]byte {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *DualProofV2) GetConsistencyProof() [][]byte {
	if x != nil {
		return x.ConsistencyProof
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction header
	Header *TxHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Raw entry values
	Entries []*TxEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	// KV entries in the transaction (parsed)
	KvEntries []*Entry `protobuf:"bytes,3,rep,name=kvEntries,proto3" json:"kvEntries,omitempty"`
	// Sorted Set entries in the transaction (parsed)
	ZEntries []*ZEntry `protobuf:"bytes,4,rep,name=zEntries,proto3" json:"zEntries,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{32}
}

func (x *Tx) GetHeader() *TxHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Tx) GetEntries() []*TxEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *Tx) GetKvEntries() []*Entry {
	if x != nil {
		return x.KvEntries
	}
	return nil
}

func (x *Tx) GetZEntries() []*ZEntry {
	if x != nil {
		return x.ZEntries
	}
	return nil
}

type TxEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw key value (contains 1-byte prefix for kind of the key)
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value hash
	HValue []byte `protobuf:"bytes,2,opt,name=hValue,proto3" json:"hValue,omitempty"`
	// Value length
	VLen int32 `protobuf:"varint,3,opt,name=vLen,proto3" json:"vLen,omitempty"`
	// Entry metadata
	Metadata *KVMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// value, must be ignored when len(value) == 0 and vLen > 0.
	// Otherwise sha256(value) must be equal to hValue.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TxEntry) Reset() {
	*x = TxEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxEntry) ProtoMessage() {}

func (x *TxEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxEntry.ProtoReflect.Descriptor instead.
func (*TxEntry) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{33}
}

func (x *TxEntry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TxEntry) GetHValue() []byte {
	if x != nil {
		return x.HValue
	}
	return nil
}

func (x *TxEntry) GetVLen() int32 {
	if x != nil {
		return x.VLen
	}
	return 0
}

func (x *TxEntry) GetMetadata() *KVMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TxEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KVMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this entry denotes a logical deletion
	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Entry expiration information
	Expiration *Expiration `protobuf:"bytes,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// If set to true, this entry will not be indexed and will only be accessed through GetAt calls
	NonIndexable bool `protobuf:"varint,3,opt,name=nonIndexable,proto3" json:"nonIndexable,omitempty"`
}

func (x *KVMetadata) Reset() {
	*x = KVMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVMetadata) ProtoMessage() {}

func (x *KVMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVMetadata.ProtoReflect.Descriptor instead.
func (*KVMetadata) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{34}
}

func (x *KVMetadata) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *KVMetadata) GetExpiration() *Expiration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *KVMetadata) GetNonIndexable() bool {
	if x != nil {
		return x.NonIndexable
	}
	return false
}

type Expiration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry expiration time (unix timestamp in seconds)
	ExpiresAt int64 `protobuf:"varint,1,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
}

func (x *Expiration) Reset() {
	*x = Expiration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expiration) ProtoMessage() {}

func (x *Expiration) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expiration.ProtoReflect.Descriptor instead.
func (*Expiration) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{35}
}

func (x *Expiration) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type VerifiableTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction to verify
	Tx *Tx `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Proof for the transaction
	DualProof *DualProof `protobuf:"bytes,2,opt,name=dualProof,proto3" json:"dualProof,omitempty"`
	// Signature for the new state value
	Signature *Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VerifiableTx) Reset() {
	*x = VerifiableTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableTx) ProtoMessage() {}

func (x *VerifiableTx) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableTx.ProtoReflect.Descriptor instead.
func (*VerifiableTx) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{36}
}

func (x *VerifiableTx) GetTx() *Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *VerifiableTx) GetDualProof() *DualProof {
	if x != nil {
		return x.DualProof
	}
	return nil
}

func (x *VerifiableTx) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VerifiableTxV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction to verify
	Tx *Tx `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Proof for the transaction
	DualProof *DualProofV2 `protobuf:"bytes,2,opt,name=dualProof,proto3" json:"dualProof,omitempty"`
	// Signature for the new state value
	Signature *Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VerifiableTxV2) Reset() {
	*x = VerifiableTxV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableTxV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableTxV2) ProtoMessage() {}

func (x *VerifiableTxV2) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableTxV2.ProtoReflect.Descriptor instead.
func (*VerifiableTxV2) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{37}
}

func (x *VerifiableTxV2) GetTx() *Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *VerifiableTxV2) GetDualProof() *DualProofV2 {
	if x != nil {
		return x.DualProof
	}
	return nil
}

func (x *VerifiableTxV2) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VerifiableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry to verify
	Entry *Entry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	// Transaction to verify
	VerifiableTx *VerifiableTx `protobuf:"bytes,2,opt,name=verifiableTx,proto3" json:"verifiableTx,omitempty"`
	// Proof for inclusion of the entry within the transaction
	InclusionProof *InclusionProof `protobuf:"bytes,3,opt,name=inclusionProof,proto3" json:"inclusionProof,omitempty"`
}

func (x *VerifiableEntry) Reset() {
	*x = VerifiableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableEntry) ProtoMessage() {}

func (x *VerifiableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableEntry.ProtoReflect.Descriptor instead.
func (*VerifiableEntry) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{38}
}

func (x *VerifiableEntry) GetEntry() *Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *VerifiableEntry) GetVerifiableTx() *VerifiableTx {
	if x != nil {
		return x.VerifiableTx
	}
	return nil
}

func (x *VerifiableEntry) GetInclusionProof() *InclusionProof {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

type InclusionProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the leaf for which the proof is generated
	Leaf int32 `protobuf:"varint,1,opt,name=leaf,proto3" json:"leaf,omitempty"`
	// Width of the tree at the leaf level
	Width int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	// Proof terms (selected hashes from the tree)
	Terms [][]byte `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *InclusionProof) Reset() {
	*x = InclusionProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InclusionProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InclusionProof) ProtoMessage() {}

func (x *InclusionProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InclusionProof.ProtoReflect.Descriptor instead.
func (*InclusionProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{39}
}

func (x *InclusionProof) GetLeaf() int32 {
	if x != nil {
		return x.Leaf
	}
	return 0
}

func (x *InclusionProof) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *InclusionProof) GetTerms() [][]byte {
	if x != nil {
		return x.Terms
	}
	return nil
}

type SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of KV entries to set
	KVs []*KeyValue `protobuf:"bytes,1,rep,name=KVs,proto3" json:"KVs,omitempty"`
	// If set to true, do not wait for indexer to index ne entries
	NoWait bool `protobuf:"varint,2,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// Preconditions to be met to perform the write
	Preconditions []*Precondition `protobuf:"bytes,3,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{40}
}

func (x *SetRequest) GetKVs() []*KeyValue {
	if x != nil {
		return x.KVs
	}
	return nil
}

func (x *SetRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *SetRequest) GetPreconditions() []*Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

type KeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key to query for
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// If > 0, query for the value exactly at given transaction
	AtTx uint64 `protobuf:"varint,2,opt,name=atTx,proto3" json:"atTx,omitempty"`
	// If 0 (and noWait=false), wait for the index to be up-to-date,
	// If > 0 (and noWait=false), wait for at lest the sinceTx transaction to be indexed
	SinceTx uint64 `protobuf:"varint,3,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	// If set to true - do not wait for any indexing update considering only the currently indexed state
	NoWait bool `protobuf:"varint,4,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// If > 0, get the nth version of the value, 1 being the first version, 2 being the second and so on
	// If < 0, get the historical nth value of the key, -1 being the previous version, -2 being the one before and so on
	AtRevision int64 `protobuf:"varint,5,opt,name=atRevision,proto3" json:"atRevision,omitempty"`
}

func (x *KeyRequest) Reset() {
	*x = KeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRequest) ProtoMessage() {}

func (x *KeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRequest.ProtoReflect.Descriptor instead.
func (*KeyRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{41}
}

func (x *KeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyRequest) GetAtTx() uint64 {
	if x != nil {
		return x.AtTx
	}
	return 0
}

func (x *KeyRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *KeyRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *KeyRequest) GetAtRevision() int64 {
	if x != nil {
		return x.AtRevision
	}
	return 0
}

type KeyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of keys to query for
	Keys [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// If 0, wait for index to be up-to-date,
	// If > 0, wait for at least sinceTx transaction to be indexed
	SinceTx uint64 `protobuf:"varint,2,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
}

func (x *KeyListRequest) Reset() {
	*x = KeyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyListRequest) ProtoMessage() {}

func (x *KeyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyListRequest.ProtoReflect.Descriptor instead.
func (*KeyListRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{42}
}

func (x *KeyListRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *KeyListRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

type DeleteKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of keys to delete logically
	Keys [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// If 0, wait for index to be up-to-date,
	// If > 0, wait for at least sinceTx transaction to be indexed
	SinceTx uint64 `protobuf:"varint,2,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	// If set to true, do not wait for the indexer to index this operation
	NoWait bool `protobuf:"varint,3,opt,name=noWait,proto3" json:"noWait,omitempty"`
}

func (x *DeleteKeysRequest) Reset() {
	*x = DeleteKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeysRequest) ProtoMessage() {}

func (x *DeleteKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeysRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeysRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteKeysRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeleteKeysRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *DeleteKeysRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

type VerifiableSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keys to set
	SetRequest *SetRequest `protobuf:"bytes,1,opt,name=setRequest,proto3" json:"setRequest,omitempty"`
	// When generating the proof, generate consistency proof with state from this transaction
	ProveSinceTx uint64 `protobuf:"varint,2,opt,name=proveSinceTx,proto3" json:"proveSinceTx,omitempty"`
}

func (x *VerifiableSetRequest) Reset() {
	*x = VerifiableSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableSetRequest) ProtoMessage() {}

func (x *VerifiableSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableSetRequest.ProtoReflect.Descriptor instead.
func (*VerifiableSetRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{44}
}

func (x *VerifiableSetRequest) GetSetRequest() *SetRequest {
	if x != nil {
		return x.SetRequest
	}
	return nil
}

func (x *VerifiableSetRequest) GetProveSinceTx() uint64 {
	if x != nil {
		return x.ProveSinceTx
	}
	return 0
}

type VerifiableGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key to read
	KeyRequest *KeyRequest `protobuf:"bytes,1,opt,name=keyRequest,proto3" json:"keyRequest,omitempty"`
	// When generating the proof, generate consistency proof with state from this transaction
	ProveSinceTx uint64 `protobuf:"varint,2,opt,name=proveSinceTx,proto3" json:"proveSinceTx,omitempty"`
}

func (x *VerifiableGetRequest) Reset() {
	*x = VerifiableGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableGetRequest) ProtoMessage() {}

func (x *VerifiableGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableGetRequest.ProtoReflect.Descriptor instead.
func (*VerifiableGetRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{45}
}

func (x *VerifiableGetRequest) GetKeyRequest() *KeyRequest {
	if x != nil {
		return x.KeyRequest
	}
	return nil
}

func (x *VerifiableGetRequest) GetProveSinceTx() uint64 {
	if x != nil {
		return x.ProveSinceTx
	}
	return 0
}

// ServerInfoRequest exists to provide extensibility for rpc ServerInfo.
type ServerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInfoRequest) Reset() {
	*x = ServerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoRequest) ProtoMessage() {}

func (x *ServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoRequest.ProtoReflect.Descriptor instead.
func (*ServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{46}
}

// ServerInfoResponse contains information about the server instance.
type ServerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the server instance.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServerInfoResponse) Reset() {
	*x = ServerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoResponse) ProtoMessage() {}

func (x *ServerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoResponse.ProtoReflect.Descriptor instead.
func (*ServerInfoResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{47}
}

func (x *ServerInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, server considers itself to be healthy
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The version of the server instance
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{48}
}

func (x *HealthResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *HealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DatabaseHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of requests currently being executed
	PendingRequests uint32 `protobuf:"varint,1,opt,name=pendingRequests,proto3" json:"pendingRequests,omitempty"`
	// Timestamp at which the last request was completed
	LastRequestCompletedAt int64 `protobuf:"varint,2,opt,name=lastRequestCompletedAt,proto3" json:"lastRequestCompletedAt,omitempty"`
}

func (x *DatabaseHealthResponse) Reset() {
	*x = DatabaseHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseHealthResponse) ProtoMessage() {}

func (x *DatabaseHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseHealthResponse.ProtoReflect.Descriptor instead.
func (*DatabaseHealthResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{49}
}

func (x *DatabaseHealthResponse) GetPendingRequests() uint32 {
	if x != nil {
		return x.PendingRequests
	}
	return 0
}

func (x *DatabaseHealthResponse) GetLastRequestCompletedAt() int64 {
	if x != nil {
		return x.LastRequestCompletedAt
	}
	return 0
}

type ImmutableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The db name
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Id of the most recent transaction
	TxId uint64 `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
	// State of the most recent transaction
	TxHash []byte `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	// Signature of the hash
	Signature *Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Id of the most recent precommitted transaction
	PrecommittedTxId uint64 `protobuf:"varint,5,opt,name=precommittedTxId,proto3" json:"precommittedTxId,omitempty"`
	// State of the most recent precommitted transaction
	PrecommittedTxHash []byte `protobuf:"bytes,6,opt,name=precommittedTxHash,proto3" json:"precommittedTxHash,omitempty"`
}

func (x *ImmutableState) Reset() {
	*x = ImmutableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmutableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmutableState) ProtoMessage() {}

func (x *ImmutableState) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmutableState.ProtoReflect.Descriptor instead.
func (*ImmutableState) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{50}
}

func (x *ImmutableState) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ImmutableState) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *ImmutableState) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *ImmutableState) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ImmutableState) GetPrecommittedTxId() uint64 {
	if x != nil {
		return x.PrecommittedTxId
	}
	return 0
}

func (x *ImmutableState) GetPrecommittedTxHash() []byte {
	if x != nil {
		return x.PrecommittedTxHash
	}
	return nil
}

type ReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key for the reference
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Key to be referenced
	ReferencedKey []byte `protobuf:"bytes,2,opt,name=referencedKey,proto3" json:"referencedKey,omitempty"`
	// If boundRef == true, id of transaction to bind with the reference
	AtTx uint64 `protobuf:"varint,3,opt,name=atTx,proto3" json:"atTx,omitempty"`
	// If true, bind the reference to particular transaction,
	// if false, use the most recent value of the key
	BoundRef bool `protobuf:"varint,4,opt,name=boundRef,proto3" json:"boundRef,omitempty"`
	// If true, do not wait for the indexer to index this write operation
	NoWait bool `protobuf:"varint,5,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// Preconditions to be met to perform the write
	Preconditions []*Precondition `protobuf:"bytes,6,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
}

func (x *ReferenceRequest) Reset() {
	*x = ReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceRequest) ProtoMessage() {}

func (x *ReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceRequest.ProtoReflect.Descriptor instead.
func (*ReferenceRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{51}
}

func (x *ReferenceRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReferenceRequest) GetReferencedKey() []byte {
	if x != nil {
		return x.ReferencedKey
	}
	return nil
}

func (x *ReferenceRequest) GetAtTx() uint64 {
	if x != nil {
		return x.AtTx
	}
	return 0
}

func (x *ReferenceRequest) GetBoundRef() bool {
	if x != nil {
		return x.BoundRef
	}
	return false
}

func (x *ReferenceRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *ReferenceRequest) GetPreconditions() []*Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

type VerifiableReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference data
	ReferenceRequest *ReferenceRequest `protobuf:"bytes,1,opt,name=referenceRequest,proto3" json:"referenceRequest,omitempty"`
	// When generating the proof, generate consistency proof with state from this
	// transaction
	ProveSinceTx uint64 `protobuf:"varint,2,opt,name=proveSinceTx,proto3" json:"proveSinceTx,omitempty"`
}

func (x *VerifiableReferenceRequest) Reset() {
	*x = VerifiableReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableReferenceRequest) ProtoMessage() {}

func (x *VerifiableReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableReferenceRequest.ProtoReflect.Descriptor instead.
func (*VerifiableReferenceRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{52}
}

func (x *VerifiableReferenceRequest) GetReferenceRequest() *ReferenceRequest {
	if x != nil {
		return x.ReferenceRequest
	}
	return nil
}

func (x *VerifiableReferenceRequest) GetProveSinceTx() uint64 {
	if x != nil {
		return x.ProveSinceTx
	}
	return 0
}

type ZAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the sorted set
	Set []byte `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	// Score of the new entry
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	// Referenced key
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// If boundRef == true, id of the transaction to bind with the reference
	AtTx uint64 `protobuf:"varint,4,opt,name=atTx,proto3" json:"atTx,omitempty"`
	// If true, bind the reference to particular transaction, if false, use the
	// most recent value of the key
	BoundRef bool `protobuf:"varint,5,opt,name=boundRef,proto3" json:"boundRef,omitempty"`
	// If true, do not wait for the indexer to index this write operation
	NoWait bool `protobuf:"varint,6,opt,name=noWait,proto3" json:"noWait,omitempty"`
}

func (x *ZAddRequest) Reset() {
	*x = ZAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZAddRequest) ProtoMessage() {}

func (x *ZAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZAddRequest.ProtoReflect.Descriptor instead.
func (*ZAddRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{53}
}

func (x *ZAddRequest) GetSet() []byte {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ZAddRequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ZAddRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ZAddRequest) GetAtTx() uint64 {
	if x != nil {
		return x.AtTx
	}
	return 0
}

func (x *ZAddRequest) GetBoundRef() bool {
	if x != nil {
		return x.BoundRef
	}
	return false
}

func (x *ZAddRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry's score value
	Score float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{54}
}

func (x *Score) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ZScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the sorted set
	Set []byte `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	// Key to continue the search at
	SeekKey []byte `protobuf:"bytes,2,opt,name=seekKey,proto3" json:"seekKey,omitempty"`
	// Score of the entry to continue the search at
	SeekScore float64 `protobuf:"fixed64,3,opt,name=seekScore,proto3" json:"seekScore,omitempty"`
	// AtTx of the entry to continue the search at
	SeekAtTx uint64 `protobuf:"varint,4,opt,name=seekAtTx,proto3" json:"seekAtTx,omitempty"`
	// If true, include the entry given with the `seekXXX` attributes, if false,
	// skip the entry and start after that one
	InclusiveSeek bool `protobuf:"varint,5,opt,name=inclusiveSeek,proto3" json:"inclusiveSeek,omitempty"`
	// Maximum number of entries to return, if 0, the default limit will be used
	Limit uint64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// If true, scan entries in descending order
	Desc bool `protobuf:"varint,7,opt,name=desc,proto3" json:"desc,omitempty"`
	// Minimum score of entries to scan
	MinScore *Score `protobuf:"bytes,8,opt,name=minScore,proto3" json:"minScore,omitempty"`
	// Maximum score of entries to scan
	MaxScore *Score `protobuf:"bytes,9,opt,name=maxScore,proto3" json:"maxScore,omitempty"`
	// If > 0, do not wait for the indexer to index all entries, only require
	// entries up to sinceTx to be indexed
	SinceTx uint64 `protobuf:"varint,10,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	// Deprecated: If set to true, do not wait for the indexer to be up to date
	NoWait bool `protobuf:"varint,11,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// Specify the index of initial entry to be returned by excluding the initial
	// set of entries (alternative to seekXXX attributes)
	Offset uint64 `protobuf:"varint,12,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ZScanRequest) Reset() {
	*x = ZScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZScanRequest) ProtoMessage() {}

func (x *ZScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZScanRequest.ProtoReflect.Descriptor instead.
func (*ZScanRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{55}
}

func (x *ZScanRequest) GetSet() []byte {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ZScanRequest) GetSeekKey() []byte {
	if x != nil {
		return x.SeekKey
	}
	return nil
}

func (x *ZScanRequest) GetSeekScore() float64 {
	if x != nil {
		return x.SeekScore
	}
	return 0
}

func (x *ZScanRequest) GetSeekAtTx() uint64 {
	if x != nil {
		return x.SeekAtTx
	}
	return 0
}

func (x *ZScanRequest) GetInclusiveSeek() bool {
	if x != nil {
		return x.InclusiveSeek
	}
	return false
}

func (x *ZScanRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ZScanRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *ZScanRequest) GetMinScore() *Score {
	if x != nil {
		return x.MinScore
	}
	return nil
}

func (x *ZScanRequest) GetMaxScore() *Score {
	if x != nil {
		return x.MaxScore
	}
	return nil
}

func (x *ZScanRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *ZScanRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *ZScanRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type HistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the key to query for the history
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Specify the initial entry to be returned by excluding the initial set of
	// entries
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Maximum number of entries to return
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// If true, search in descending order
	Desc bool `protobuf:"varint,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// If > 0, do not wait for the indexer to index all entries, only require
	// entries up to sinceTx to be indexed
	SinceTx uint64 `protobuf:"varint,5,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
}

func (x *HistoryRequest) Reset() {
	*x = HistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest) ProtoMessage() {}

func (x *HistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest.ProtoReflect.Descriptor instead.
func (*HistoryRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{56}
}

func (x *HistoryRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HistoryRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *HistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HistoryRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *HistoryRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

type VerifiableZAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data for new sorted set entry
	ZAddRequest *ZAddRequest `protobuf:"bytes,1,opt,name=zAddRequest,proto3" json:"zAddRequest,omitempty"`
	// When generating the proof, generate consistency proof with state from this transaction
	ProveSinceTx uint64 `protobuf:"varint,2,opt,name=proveSinceTx,proto3" json:"proveSinceTx,omitempty"`
}

func (x *VerifiableZAddRequest) Reset() {
	*x = VerifiableZAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableZAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableZAddRequest) ProtoMessage() {}

func (x *VerifiableZAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableZAddRequest.ProtoReflect.Descriptor instead.
func (*VerifiableZAddRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{57}
}

func (x *VerifiableZAddRequest) GetZAddRequest() *ZAddRequest {
	if x != nil {
		return x.ZAddRequest
	}
	return nil
}

func (x *VerifiableZAddRequest) GetProveSinceTx() uint64 {
	if x != nil {
		return x.ProveSinceTx
	}
	return 0
}

type TxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction id to query for
	Tx uint64 `protobuf:"varint,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Specification for parsing entries, if empty, entries are returned in raw form
	EntriesSpec *EntriesSpec `protobuf:"bytes,2,opt,name=entriesSpec,proto3" json:"entriesSpec,omitempty"`
	// If > 0, do not wait for the indexer to index all entries, only require
	// entries up to sinceTx to be indexed, will affect resolving references
	SinceTx uint64 `protobuf:"varint,3,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	// Deprecated: If set to true, do not wait for the indexer to be up to date
	NoWait bool `protobuf:"varint,4,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// If set to true, do not resolve references (avoid looking up final values if not needed)
	KeepReferencesUnresolved bool `protobuf:"varint,5,opt,name=keepReferencesUnresolved,proto3" json:"keepReferencesUnresolved,omitempty"`
}

func (x *TxRequest) Reset() {
	*x = TxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequest) ProtoMessage() {}

func (x *TxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequest.ProtoReflect.Descriptor instead.
func (*TxRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{58}
}

func (x *TxRequest) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *TxRequest) GetEntriesSpec() *EntriesSpec {
	if x != nil {
		return x.EntriesSpec
	}
	return nil
}

func (x *TxRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *TxRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *TxRequest) GetKeepReferencesUnresolved() bool {
	if x != nil {
		return x.KeepReferencesUnresolved
	}
	return false
}

type EntriesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specification for parsing KV entries
	KvEntriesSpec *EntryTypeSpec `protobuf:"bytes,1,opt,name=kvEntriesSpec,proto3" json:"kvEntriesSpec,omitempty"`
	// Specification for parsing sorted set entries
	ZEntriesSpec *EntryTypeSpec `protobuf:"bytes,2,opt,name=zEntriesSpec,proto3" json:"zEntriesSpec,omitempty"`
	// Specification for parsing SQL entries
	SqlEntriesSpec *EntryTypeSpec `protobuf:"bytes,3,opt,name=sqlEntriesSpec,proto3" json:"sqlEntriesSpec,omitempty"`
}

func (x *EntriesSpec) Reset() {
	*x = EntriesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntriesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntriesSpec) ProtoMessage() {}

func (x *EntriesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntriesSpec.ProtoReflect.Descriptor instead.
func (*EntriesSpec) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{59}
}

func (x *EntriesSpec) GetKvEntriesSpec() *EntryTypeSpec {
	if x != nil {
		return x.KvEntriesSpec
	}
	return nil
}

func (x *EntriesSpec) GetZEntriesSpec() *EntryTypeSpec {
	if x != nil {
		return x.ZEntriesSpec
	}
	return nil
}

func (x *EntriesSpec) GetSqlEntriesSpec() *EntryTypeSpec {
	if x != nil {
		return x.SqlEntriesSpec
	}
	return nil
}

type EntryTypeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action to perform on entries
	Action EntryTypeAction `protobuf:"varint,1,opt,name=action,proto3,enum=immudb.schema.EntryTypeAction" json:"action,omitempty"`
}

func (x *EntryTypeSpec) Reset() {
	*x = EntryTypeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryTypeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryTypeSpec) ProtoMessage() {}

func (x *EntryTypeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryTypeSpec.ProtoReflect.Descriptor instead.
func (*EntryTypeSpec) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{60}
}

func (x *EntryTypeSpec) GetAction() EntryTypeAction {
	if x != nil {
		return x.Action
	}
	return EntryTypeAction_EXCLUDE
}

type VerifiableTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID
	Tx uint64 `protobuf:"varint,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// When generating the proof, generate consistency proof with state from this
	// transaction
	ProveSinceTx uint64 `protobuf:"varint,2,opt,name=proveSinceTx,proto3" json:"proveSinceTx,omitempty"`
	// Specification of how to parse entries
	EntriesSpec *EntriesSpec `protobuf:"bytes,3,opt,name=entriesSpec,proto3" json:"entriesSpec,omitempty"`
	// If > 0, do not wait for the indexer to index all entries, only require
	// entries up to sinceTx to be indexed, will affect resolving references
	SinceTx uint64 `protobuf:"varint,4,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	// Deprecated: If set to true, do not wait for the indexer to be up to date
	NoWait bool `protobuf:"varint,5,opt,name=noWait,proto3" json:"noWait,omitempty"`
	// If set to true, do not resolve references (avoid looking up final values if not needed)
	KeepReferencesUnresolved bool `protobuf:"varint,6,opt,name=keepReferencesUnresolved,proto3" json:"keepReferencesUnresolved,omitempty"`
}

func (x *VerifiableTxRequest) Reset() {
	*x = VerifiableTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableTxRequest) ProtoMessage() {}

func (x *VerifiableTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableTxRequest.ProtoReflect.Descriptor instead.
func (*VerifiableTxRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{61}
}

func (x *VerifiableTxRequest) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *VerifiableTxRequest) GetProveSinceTx() uint64 {
	if x != nil {
		return x.ProveSinceTx
	}
	return 0
}

func (x *VerifiableTxRequest) GetEntriesSpec() *EntriesSpec {
	if x != nil {
		return x.EntriesSpec
	}
	return nil
}

func (x *VerifiableTxRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *VerifiableTxRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *VerifiableTxRequest) GetKeepReferencesUnresolved() bool {
	if x != nil {
		return x.KeepReferencesUnresolved
	}
	return false
}

type TxScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the transaction where scanning should start
	InitialTx uint64 `protobuf:"varint,1,opt,name=initialTx,proto3" json:"initialTx,omitempty"`
	// Maximum number of transactions to scan, when not specified the default limit is used
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// If set to true, scan transactions in descending order
	Desc bool `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Specification of how to parse entries
	EntriesSpec *EntriesSpec `protobuf:"bytes,4,opt,name=entriesSpec,proto3" json:"entriesSpec,omitempty"`
	// If > 0, do not wait for the indexer to index all entries, only require
	// entries up to sinceTx to be indexed, will affect resolving references
	SinceTx uint64 `protobuf:"varint,5,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	// Deprecated: If set to true, do not wait for the indexer to be up to date
	NoWait bool `protobuf:"varint,6,opt,name=noWait,proto3" json:"noWait,omitempty"`
}

func (x *TxScanRequest) Reset() {
	*x = TxScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxScanRequest) ProtoMessage() {}

func (x *TxScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxScanRequest.ProtoReflect.Descriptor instead.
func (*TxScanRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{62}
}

func (x *TxScanRequest) GetInitialTx() uint64 {
	if x != nil {
		return x.InitialTx
	}
	return 0
}

func (x *TxScanRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TxScanRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *TxScanRequest) GetEntriesSpec() *EntriesSpec {
	if x != nil {
		return x.EntriesSpec
	}
	return nil
}

func (x *TxScanRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *TxScanRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

type TxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of transactions
	Txs []*Tx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *TxList) Reset() {
	*x = TxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxList) ProtoMessage() {}

func (x *TxList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxList.ProtoReflect.Descriptor instead.
func (*TxList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{63}
}

func (x *TxList) GetTxs() []*Tx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type ExportTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of transaction to export
	Tx uint64 `protobuf:"varint,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// If set to true, non-committed transactions can be exported
	AllowPreCommitted bool `protobuf:"varint,2,opt,name=allowPreCommitted,proto3" json:"allowPreCommitted,omitempty"`
	// Used on synchronous replication to notify the primary about replica state
	ReplicaState *ReplicaState `protobuf:"bytes,3,opt,name=replicaState,proto3" json:"replicaState,omitempty"`
	// If set to true, integrity checks are skipped when reading data
	SkipIntegrityCheck bool `protobuf:"varint,4,opt,name=skipIntegrityCheck,proto3" json:"skipIntegrityCheck,omitempty"`
}

func (x *ExportTxRequest) Reset() {
	*x = ExportTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTxRequest) ProtoMessage() {}

func (x *ExportTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTxRequest.ProtoReflect.Descriptor instead.
func (*ExportTxRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{64}
}

func (x *ExportTxRequest) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *ExportTxRequest) GetAllowPreCommitted() bool {
	if x != nil {
		return x.AllowPreCommitted
	}
	return false
}

func (x *ExportTxRequest) GetReplicaState() *ReplicaState {
	if x != nil {
		return x.ReplicaState
	}
	return nil
}

func (x *ExportTxRequest) GetSkipIntegrityCheck() bool {
	if x != nil {
		return x.SkipIntegrityCheck
	}
	return false
}

type ReplicaState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID             string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	CommittedTxID    uint64 `protobuf:"varint,2,opt,name=committedTxID,proto3" json:"committedTxID,omitempty"`
	CommittedAlh     []byte `protobuf:"bytes,3,opt,name=committedAlh,proto3" json:"committedAlh,omitempty"`
	PrecommittedTxID uint64 `protobuf:"varint,4,opt,name=precommittedTxID,proto3" json:"precommittedTxID,omitempty"`
	PrecommittedAlh  []byte `protobuf:"bytes,5,opt,name=precommittedAlh,proto3" json:"precommittedAlh,omitempty"`
}

func (x *ReplicaState) Reset() {
	*x = ReplicaState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaState) ProtoMessage() {}

func (x *ReplicaState) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaState.ProtoReflect.Descriptor instead.
func (*ReplicaState) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{65}
}

func (x *ReplicaState) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ReplicaState) GetCommittedTxID() uint64 {
	if x != nil {
		return x.CommittedTxID
	}
	return 0
}

func (x *ReplicaState) GetCommittedAlh() []byte {
	if x != nil {
		return x.CommittedAlh
	}
	return nil
}

func (x *ReplicaState) GetPrecommittedTxID() uint64 {
	if x != nil {
		return x.PrecommittedTxID
	}
	return 0
}

func (x *ReplicaState) GetPrecommittedAlh() []byte {
	if x != nil {
		return x.PrecommittedAlh
	}
	return nil
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the database
	DatabaseName string `protobuf:"bytes,1,opt,name=databaseName,proto3" json:"databaseName,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{66}
}

func (x *Database) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type DatabaseSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the database
	DatabaseName string `protobuf:"bytes,1,opt,name=databaseName,proto3" json:"databaseName,omitempty"`
	// If set to true, this database is replicating another database
	Replica bool `protobuf:"varint,2,opt,name=replica,proto3" json:"replica,omitempty"`
	// Name of the database to replicate
	PrimaryDatabase string `protobuf:"bytes,3,opt,name=primaryDatabase,proto3" json:"primaryDatabase,omitempty"`
	// Hostname of the immudb instance with database to replicate
	PrimaryHost string `protobuf:"bytes,4,opt,name=primaryHost,proto3" json:"primaryHost,omitempty"`
	// Port of the immudb instance with database to replicate
	PrimaryPort uint32 `protobuf:"varint,5,opt,name=primaryPort,proto3" json:"primaryPort,omitempty"`
	// Username of the user with read access of the database to replicate
	PrimaryUsername string `protobuf:"bytes,6,opt,name=primaryUsername,proto3" json:"primaryUsername,omitempty"`
	// Password of the user with read access of the database to replicate
	PrimaryPassword string `protobuf:"bytes,7,opt,name=primaryPassword,proto3" json:"primaryPassword,omitempty"`
	// Size of files stored on disk
	FileSize uint32 `protobuf:"varint,8,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	// Maximum length of keys
	MaxKeyLen uint32 `protobuf:"varint,9,opt,name=maxKeyLen,proto3" json:"maxKeyLen,omitempty"`
	// Maximum length of values
	MaxValueLen uint32 `protobuf:"varint,10,opt,name=maxValueLen,proto3" json:"maxValueLen,omitempty"`
	// Maximum number of entries in a single transaction
	MaxTxEntries uint32 `protobuf:"varint,11,opt,name=maxTxEntries,proto3" json:"maxTxEntries,omitempty"`
	// If set to true, do not include commit timestamp in transaction headers
	ExcludeCommitTime bool `protobuf:"varint,12,opt,name=excludeCommitTime,proto3" json:"excludeCommitTime,omitempty"`
}

func (x *DatabaseSettings) Reset() {
	*x = DatabaseSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSettings) ProtoMessage() {}

func (x *DatabaseSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSettings.ProtoReflect.Descriptor instead.
func (*DatabaseSettings) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{67}
}

func (x *DatabaseSettings) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *DatabaseSettings) GetReplica() bool {
	if x != nil {
		return x.Replica
	}
	return false
}

func (x *DatabaseSettings) GetPrimaryDatabase() string {
	if x != nil {
		return x.PrimaryDatabase
	}
	return ""
}

func (x *DatabaseSettings) GetPrimaryHost() string {
	if x != nil {
		return x.PrimaryHost
	}
	return ""
}

func (x *DatabaseSettings) GetPrimaryPort() uint32 {
	if x != nil {
		return x.PrimaryPort
	}
	return 0
}

func (x *DatabaseSettings) GetPrimaryUsername() string {
	if x != nil {
		return x.PrimaryUsername
	}
	return ""
}

func (x *DatabaseSettings) GetPrimaryPassword() string {
	if x != nil {
		return x.PrimaryPassword
	}
	return ""
}

func (x *DatabaseSettings) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *DatabaseSettings) GetMaxKeyLen() uint32 {
	if x != nil {
		return x.MaxKeyLen
	}
	return 0
}

func (x *DatabaseSettings) GetMaxValueLen() uint32 {
	if x != nil {
		return x.MaxValueLen
	}
	return 0
}

func (x *DatabaseSettings) GetMaxTxEntries() uint32 {
	if x != nil {
		return x.MaxTxEntries
	}
	return 0
}

func (x *DatabaseSettings) GetExcludeCommitTime() bool {
	if x != nil {
		return x.ExcludeCommitTime
	}
	return false
}

type CreateDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Database settings
	Settings *DatabaseNullableSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	// If set to true, do not fail if the database already exists
	IfNotExists bool `protobuf:"varint,3,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
}

func (x *CreateDatabaseRequest) Reset() {
	*x = CreateDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatabaseRequest) ProtoMessage() {}

func (x *CreateDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatabaseRequest.ProtoReflect.Descriptor instead.
func (*CreateDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{68}
}

func (x *CreateDatabaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDatabaseRequest) GetSettings() *DatabaseNullableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateDatabaseRequest) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type CreateDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Current database settings
	Settings *DatabaseNullableSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	// Set to true if given database already existed
	AlreadyExisted bool `protobuf:"varint,3,opt,name=alreadyExisted,proto3" json:"alreadyExisted,omitempty"`
}

func (x *CreateDatabaseResponse) Reset() {
	*x = CreateDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatabaseResponse) ProtoMessage() {}

func (x *CreateDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatabaseResponse.ProtoReflect.Descriptor instead.
func (*CreateDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{69}
}

func (x *CreateDatabaseResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDatabaseResponse) GetSettings() *DatabaseNullableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateDatabaseResponse) GetAlreadyExisted() bool {
	if x != nil {
		return x.AlreadyExisted
	}
	return false
}

type UpdateDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Updated settings
	Settings *DatabaseNullableSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateDatabaseRequest) Reset() {
	*x = UpdateDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatabaseRequest) ProtoMessage() {}

func (x *UpdateDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateDatabaseRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *UpdateDatabaseRequest) GetSettings() *DatabaseNullableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Reserved to reply with more advanced response later
type UpdateDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Current database settings
	Settings *DatabaseNullableSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateDatabaseResponse) Reset() {
	*x = UpdateDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatabaseResponse) ProtoMessage() {}

func (x *UpdateDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatabaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateDatabaseResponse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *UpdateDatabaseResponse) GetSettings() *DatabaseNullableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type DatabaseSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DatabaseSettingsRequest) Reset() {
	*x = DatabaseSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSettingsRequest) ProtoMessage() {}

func (x *DatabaseSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSettingsRequest.ProtoReflect.Descriptor instead.
func (*DatabaseSettingsRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{72}
}

type DatabaseSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Database settings
	Settings *DatabaseNullableSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DatabaseSettingsResponse) Reset() {
	*x = DatabaseSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSettingsResponse) ProtoMessage() {}

func (x *DatabaseSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSettingsResponse.ProtoReflect.Descriptor instead.
func (*DatabaseSettingsResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{73}
}

func (x *DatabaseSettingsResponse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DatabaseSettingsResponse) GetSettings() *DatabaseNullableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type NullableUint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullableUint32) Reset() {
	*x = NullableUint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableUint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableUint32) ProtoMessage() {}

func (x *NullableUint32) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableUint32.ProtoReflect.Descriptor instead.
func (*NullableUint32) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{74}
}

func (x *NullableUint32) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NullableUint64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullableUint64) Reset() {
	*x = NullableUint64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableUint64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableUint64) ProtoMessage() {}

func (x *NullableUint64) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableUint64.ProtoReflect.Descriptor instead.
func (*NullableUint64) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{75}
}

func (x *NullableUint64) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NullableFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullableFloat) Reset() {
	*x = NullableFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableFloat) ProtoMessage() {}

func (x *NullableFloat) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableFloat.ProtoReflect.Descriptor instead.
func (*NullableFloat) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{76}
}

func (x *NullableFloat) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NullableBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullableBool) Reset() {
	*x = NullableBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableBool) ProtoMessage() {}

func (x *NullableBool) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableBool.ProtoReflect.Descriptor instead.
func (*NullableBool) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{77}
}

func (x *NullableBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type NullableString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullableString) Reset() {
	*x = NullableString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableString) ProtoMessage() {}

func (x *NullableString) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableString.ProtoReflect.Descriptor instead.
func (*NullableString) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{78}
}

func (x *NullableString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NullableMilliseconds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullableMilliseconds) Reset() {
	*x = NullableMilliseconds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullableMilliseconds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullableMilliseconds) ProtoMessage() {}

func (x *NullableMilliseconds) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullableMilliseconds.ProtoReflect.Descriptor instead.
func (*NullableMilliseconds) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{79}
}

func (x *NullableMilliseconds) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DatabaseNullableSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Replication settings
	ReplicationSettings *ReplicationNullableSettings `protobuf:"bytes,2,opt,name=replicationSettings,proto3" json:"replicationSettings,omitempty"`
	// Max filesize on disk
	FileSize *NullableUint32 `protobuf:"bytes,8,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	// Maximum length of keys
	MaxKeyLen *NullableUint32 `protobuf:"bytes,9,opt,name=maxKeyLen,proto3" json:"maxKeyLen,omitempty"`
	// Maximum length of values
	MaxValueLen *NullableUint32 `protobuf:"bytes,10,opt,name=maxValueLen,proto3" json:"maxValueLen,omitempty"`
	// Maximum number of entries in a single transaction
	MaxTxEntries *NullableUint32 `protobuf:"bytes,11,opt,name=maxTxEntries,proto3" json:"maxTxEntries,omitempty"`
	// If set to true, do not include commit timestamp in transaction headers
	ExcludeCommitTime *NullableBool `protobuf:"bytes,12,opt,name=excludeCommitTime,proto3" json:"excludeCommitTime,omitempty"`
	// Maximum number of simultaneous commits prepared for write
	MaxConcurrency *NullableUint32 `protobuf:"bytes,13,opt,name=maxConcurrency,proto3" json:"maxConcurrency,omitempty"`
	// Maximum number of simultaneous IO writes
	MaxIOConcurrency *NullableUint32 `protobuf:"bytes,14,opt,name=maxIOConcurrency,proto3" json:"maxIOConcurrency,omitempty"`
	// Size of the LRU cache for transaction logs
	TxLogCacheSize *NullableUint32 `protobuf:"bytes,15,opt,name=txLogCacheSize,proto3" json:"txLogCacheSize,omitempty"`
	// Maximum number of simultaneous value files opened
	VLogMaxOpenedFiles *NullableUint32 `protobuf:"bytes,16,opt,name=vLogMaxOpenedFiles,proto3" json:"vLogMaxOpenedFiles,omitempty"`
	// Maximum number of simultaneous transaction log files opened
	TxLogMaxOpenedFiles *NullableUint32 `protobuf:"bytes,17,opt,name=txLogMaxOpenedFiles,proto3" json:"txLogMaxOpenedFiles,omitempty"`
	// Maximum number of simultaneous commit log files opened
	CommitLogMaxOpenedFiles *NullableUint32 `protobuf:"bytes,18,opt,name=commitLogMaxOpenedFiles,proto3" json:"commitLogMaxOpenedFiles,omitempty"`
	// Index settings
	IndexSettings *IndexNullableSettings `protobuf:"bytes,19,opt,name=indexSettings,proto3" json:"indexSettings,omitempty"`
	// Version of transaction header to use (limits available features)
	WriteTxHeaderVersion *NullableUint32 `protobuf:"bytes,20,opt,name=writeTxHeaderVersion,proto3" json:"writeTxHeaderVersion,omitempty"`
	// If set to true, automatically load the database when starting immudb (true by default)
	Autoload *NullableBool `protobuf:"bytes,21,opt,name=autoload,proto3" json:"autoload,omitempty"`
	// Size of the pool of read buffers
	ReadTxPoolSize *NullableUint32 `protobuf:"bytes,22,opt,name=readTxPoolSize,proto3" json:"readTxPoolSize,omitempty"`
	// Fsync frequency during commit process
	SyncFrequency *NullableMilliseconds `protobuf:"bytes,23,opt,name=syncFrequency,proto3" json:"syncFrequency,omitempty"`
	// Size of the in-memory buffer for write operations
	WriteBufferSize *NullableUint32 `protobuf:"bytes,24,opt,name=writeBufferSize,proto3" json:"writeBufferSize,omitempty"`
	// Settings of Appendable Hash Tree
	AhtSettings *AHTNullableSettings `protobuf:"bytes,25,opt,name=ahtSettings,proto3" json:"ahtSettings,omitempty"`
	// Maximum number of pre-committed transactions
	MaxActiveTransactions *NullableUint32 `protobuf:"bytes,26,opt,name=maxActiveTransactions,proto3" json:"maxActiveTransactions,omitempty"`
	// Limit the number of read entries per transaction
	MvccReadSetLimit *NullableUint32 `protobuf:"bytes,27,opt,name=mvccReadSetLimit,proto3" json:"mvccReadSetLimit,omitempty"`
	// Size of the LRU cache for value logs
	VLogCacheSize *NullableUint32 `protobuf:"bytes,28,opt,name=vLogCacheSize,proto3" json:"vLogCacheSize,omitempty"`
	// Truncation settings
	TruncationSettings *TruncationNullableSettings `protobuf:"bytes,29,opt,name=truncationSettings,proto3" json:"truncationSettings,omitempty"`
	// If set to true, values are stored together with the transaction header (true by default)
	EmbeddedValues *NullableBool `protobuf:"bytes,30,opt,name=embeddedValues,proto3" json:"embeddedValues,omitempty"`
	// Enable file preallocation
	PreallocFiles *NullableBool `protobuf:"bytes,31,opt,name=preallocFiles,proto3" json:"preallocFiles,omitempty"`
}

func (x *DatabaseNullableSettings) Reset() {
	*x = DatabaseNullableSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseNullableSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseNullableSettings) ProtoMessage() {}

func (x *DatabaseNullableSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseNullableSettings.ProtoReflect.Descriptor instead.
func (*DatabaseNullableSettings) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{80}
}

func (x *DatabaseNullableSettings) GetReplicationSettings() *ReplicationNullableSettings {
	if x != nil {
		return x.ReplicationSettings
	}
	return nil
}

func (x *DatabaseNullableSettings) GetFileSize() *NullableUint32 {
	if x != nil {
		return x.FileSize
	}
	return nil
}

func (x *DatabaseNullableSettings) GetMaxKeyLen() *NullableUint32 {
	if x != nil {
		return x.MaxKeyLen
	}
	return nil
}

func (x *DatabaseNullableSettings) GetMaxValueLen() *NullableUint32 {
	if x != nil {
		return x.MaxValueLen
	}
	return nil
}

func (x *DatabaseNullableSettings) GetMaxTxEntries() *NullableUint32 {
	if x != nil {
		return x.MaxTxEntries
	}
	return nil
}

func (x *DatabaseNullableSettings) GetExcludeCommitTime() *NullableBool {
	if x != nil {
		return x.ExcludeCommitTime
	}
	return nil
}

func (x *DatabaseNullableSettings) GetMaxConcurrency() *NullableUint32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return nil
}

func (x *DatabaseNullableSettings) GetMaxIOConcurrency() *NullableUint32 {
	if x != nil {
		return x.MaxIOConcurrency
	}
	return nil
}

func (x *DatabaseNullableSettings) GetTxLogCacheSize() *NullableUint32 {
	if x != nil {
		return x.TxLogCacheSize
	}
	return nil
}

func (x *DatabaseNullableSettings) GetVLogMaxOpenedFiles() *NullableUint32 {
	if x != nil {
		return x.VLogMaxOpenedFiles
	}
	return nil
}

func (x *DatabaseNullableSettings) GetTxLogMaxOpenedFiles() *NullableUint32 {
	if x != nil {
		return x.TxLogMaxOpenedFiles
	}
	return nil
}

func (x *DatabaseNullableSettings) GetCommitLogMaxOpenedFiles() *NullableUint32 {
	if x != nil {
		return x.CommitLogMaxOpenedFiles
	}
	return nil
}

func (x *DatabaseNullableSettings) GetIndexSettings() *IndexNullableSettings {
	if x != nil {
		return x.IndexSettings
	}
	return nil
}

func (x *DatabaseNullableSettings) GetWriteTxHeaderVersion() *NullableUint32 {
	if x != nil {
		return x.WriteTxHeaderVersion
	}
	return nil
}

func (x *DatabaseNullableSettings) GetAutoload() *NullableBool {
	if x != nil {
		return x.Autoload
	}
	return nil
}

func (x *DatabaseNullableSettings) GetReadTxPoolSize() *NullableUint32 {
	if x != nil {
		return x.ReadTxPoolSize
	}
	return nil
}

func (x *DatabaseNullableSettings) GetSyncFrequency() *NullableMilliseconds {
	if x != nil {
		return x.SyncFrequency
	}
	return nil
}

func (x *DatabaseNullableSettings) GetWriteBufferSize() *NullableUint32 {
	if x != nil {
		return x.WriteBufferSize
	}
	return nil
}

func (x *DatabaseNullableSettings) GetAhtSettings() *AHTNullableSettings {
	if x != nil {
		return x.AhtSettings
	}
	return nil
}

func (x *DatabaseNullableSettings) GetMaxActiveTransactions() *NullableUint32 {
	if x != nil {
		return x.MaxActiveTransactions
	}
	return nil
}

func (x *DatabaseNullableSettings) GetMvccReadSetLimit() *NullableUint32 {
	if x != nil {
		return x.MvccReadSetLimit
	}
	return nil
}

func (x *DatabaseNullableSettings) GetVLogCacheSize() *NullableUint32 {
	if x != nil {
		return x.VLogCacheSize
	}
	return nil
}

func (x *DatabaseNullableSettings) GetTruncationSettings() *TruncationNullableSettings {
	if x != nil {
		return x.TruncationSettings
	}
	return nil
}

func (x *DatabaseNullableSettings) GetEmbeddedValues() *NullableBool {
	if x != nil {
		return x.EmbeddedValues
	}
	return nil
}

func (x *DatabaseNullableSettings) GetPreallocFiles() *NullableBool {
	if x != nil {
		return x.PreallocFiles
	}
	return nil
}

type ReplicationNullableSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true, this database is replicating another database
	Replica *NullableBool `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
	// Name of the database to replicate
	PrimaryDatabase *NullableString `protobuf:"bytes,2,opt,name=primaryDatabase,proto3" json:"primaryDatabase,omitempty"`
	// Hostname of the immudb instance with database to replicate
	PrimaryHost *NullableString `protobuf:"bytes,3,opt,name=primaryHost,proto3" json:"primaryHost,omitempty"`
	// Port of the immudb instance with database to replicate
	PrimaryPort *NullableUint32 `protobuf:"bytes,4,opt,name=primaryPort,proto3" json:"primaryPort,omitempty"`
	// Username of the user with read access of the database to replicate
	PrimaryUsername *NullableString `protobuf:"bytes,5,opt,name=primaryUsername,proto3" json:"primaryUsername,omitempty"`
	// Password of the user with read access of the database to replicate
	PrimaryPassword *NullableString `protobuf:"bytes,6,opt,name=primaryPassword,proto3" json:"primaryPassword,omitempty"`
	// Enable synchronous replication
	SyncReplication *NullableBool `protobuf:"bytes,7,opt,name=syncReplication,proto3" json:"syncReplication,omitempty"`
	// Number of confirmations from synchronous replicas required to commit a transaction
	SyncAcks *NullableUint32 `protobuf:"bytes,8,opt,name=syncAcks,proto3" json:"syncAcks,omitempty"`
	// Maximum number of prefetched transactions
	PrefetchTxBufferSize *NullableUint32 `protobuf:"bytes,9,opt,name=prefetchTxBufferSize,proto3" json:"prefetchTxBufferSize,omitempty"`
	// Number of concurrent replications
	ReplicationCommitConcurrency *NullableUint32 `protobuf:"bytes,10,opt,name=replicationCommitConcurrency,proto3" json:"replicationCommitConcurrency,omitempty"`
	// Allow precommitted transactions to be discarded if the replica diverges from the primary
	AllowTxDiscarding *NullableBool `protobuf:"bytes,11,opt,name=allowTxDiscarding,proto3" json:"allowTxDiscarding,omitempty"`
	// Disable integrity check when reading data during replication
	SkipIntegrityCheck *NullableBool `protobuf:"bytes,12,opt,name=skipIntegrityCheck,proto3" json:"skipIntegrityCheck,omitempty"`
	// Wait for indexing to be up to date during replication
	WaitForIndexing *NullableBool `protobuf:"bytes,13,opt,name=waitForIndexing,proto3" json:"waitForIndexing,omitempty"`
}

func (x *ReplicationNullableSettings) Reset() {
	*x = ReplicationNullableSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationNullableSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationNullableSettings) ProtoMessage() {}

func (x *ReplicationNullableSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationNullableSettings.ProtoReflect.Descriptor instead.
func (*ReplicationNullableSettings) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{81}
}

func (x *ReplicationNullableSettings) GetReplica() *NullableBool {
	if x != nil {
		return x.Replica
	}
	return nil
}

func (x *ReplicationNullableSettings) GetPrimaryDatabase() *NullableString {
	if x != nil {
		return x.PrimaryDatabase
	}
	return nil
}

func (x *ReplicationNullableSettings) GetPrimaryHost() *NullableString {
	if x != nil {
		return x.PrimaryHost
	}
	return nil
}

func (x *ReplicationNullableSettings) GetPrimaryPort() *NullableUint32 {
	if x != nil {
		return x.PrimaryPort
	}
	return nil
}

func (x *ReplicationNullableSettings) GetPrimaryUsername() *NullableString {
	if x != nil {
		return x.PrimaryUsername
	}
	return nil
}

func (x *ReplicationNullableSettings) GetPrimaryPassword() *NullableString {
	if x != nil {
		return x.PrimaryPassword
	}
	return nil
}

func (x *ReplicationNullableSettings) GetSyncReplication() *NullableBool {
	if x != nil {
		return x.SyncReplication
	}
	return nil
}

func (x *ReplicationNullableSettings) GetSyncAcks() *NullableUint32 {
	if x != nil {
		return x.SyncAcks
	}
	return nil
}

func (x *ReplicationNullableSettings) GetPrefetchTxBufferSize() *NullableUint32 {
	if x != nil {
		return x.PrefetchTxBufferSize
	}
	return nil
}

func (x *ReplicationNullableSettings) GetReplicationCommitConcurrency() *NullableUint32 {
	if x != nil {
		return x.ReplicationCommitConcurrency
	}
	return nil
}

func (x *ReplicationNullableSettings) GetAllowTxDiscarding() *NullableBool {
	if x != nil {
		return x.AllowTxDiscarding
	}
	return nil
}

func (x *ReplicationNullableSettings) GetSkipIntegrityCheck() *NullableBool {
	if x != nil {
		return x.SkipIntegrityCheck
	}
	return nil
}

func (x *ReplicationNullableSettings) GetWaitForIndexing() *NullableBool {
	if x != nil {
		return x.WaitForIndexing
	}
	return nil
}

type TruncationNullableSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retention Period for data in the database
	RetentionPeriod *NullableMilliseconds `protobuf:"bytes,1,opt,name=retentionPeriod,proto3" json:"retentionPeriod,omitempty"`
	// Truncation Frequency for the database
	TruncationFrequency *NullableMilliseconds `protobuf:"bytes,2,opt,name=truncationFrequency,proto3" json:"truncationFrequency,omitempty"`
}

func (x *TruncationNullableSettings) Reset() {
	*x = TruncationNullableSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncationNullableSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncationNullableSettings) ProtoMessage() {}

func (x *TruncationNullableSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncationNullableSettings.ProtoReflect.Descriptor instead.
func (*TruncationNullableSettings) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{82}
}

func (x *TruncationNullableSettings) GetRetentionPeriod() *NullableMilliseconds {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *TruncationNullableSettings) GetTruncationFrequency() *NullableMilliseconds {
	if x != nil {
		return x.TruncationFrequency
	}
	return nil
}

type IndexNullableSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of new index entries between disk flushes
	FlushThreshold *NullableUint32 `protobuf:"bytes,1,opt,name=flushThreshold,proto3" json:"flushThreshold,omitempty"`
	// Number of new index entries between disk flushes with file sync
	SyncThreshold *NullableUint32 `protobuf:"bytes,2,opt,name=syncThreshold,proto3" json:"syncThreshold,omitempty"`
	// Size of the Btree node LRU cache
	CacheSize *NullableUint32 `protobuf:"bytes,3,opt,name=cacheSize,proto3" json:"cacheSize,omitempty"`
	// Max size of a single Btree node in bytes
	MaxNodeSize *NullableUint32 `protobuf:"bytes,4,opt,name=maxNodeSize,proto3" json:"maxNodeSize,omitempty"`
	// Maximum number of active btree snapshots
	MaxActiveSnapshots *NullableUint32 `protobuf:"bytes,5,opt,name=maxActiveSnapshots,proto3" json:"maxActiveSnapshots,omitempty"`
	// Time in milliseconds between the most recent DB snapshot is automatically renewed
	RenewSnapRootAfter *NullableUint64 `protobuf:"bytes,6,opt,name=renewSnapRootAfter,proto3" json:"renewSnapRootAfter,omitempty"`
	// Minimum number of updates entries in the btree to allow for full compaction
	CompactionThld *NullableUint32 `protobuf:"bytes,7,opt,name=compactionThld,proto3" json:"compactionThld,omitempty"`
	// Additional delay added during indexing when full compaction is in progress
	DelayDuringCompaction *NullableUint32 `protobuf:"bytes,8,opt,name=delayDuringCompaction,proto3" json:"delayDuringCompaction,omitempty"`
	// Maximum number of simultaneously opened nodes files
	NodesLogMaxOpenedFiles *NullableUint32 `protobuf:"bytes,9,opt,name=nodesLogMaxOpenedFiles,proto3" json:"nodesLogMaxOpenedFiles,omitempty"`
	// Maximum number of simultaneously opened node history files
	HistoryLogMaxOpenedFiles *NullableUint32 `protobuf:"bytes,10,opt,name=historyLogMaxOpenedFiles,proto3" json:"historyLogMaxOpenedFiles,omitempty"`
	// Maximum number of simultaneously opened commit log files
	CommitLogMaxOpenedFiles *NullableUint32 `protobuf:"bytes,11,opt,name=commitLogMaxOpenedFiles,proto3" json:"commitLogMaxOpenedFiles,omitempty"`
	// Size of the in-memory flush buffer (in bytes)
	FlushBufferSize *NullableUint32 `protobuf:"bytes,12,opt,name=flushBufferSize,proto3" json:"flushBufferSize,omitempty"`
	// Percentage of node files cleaned up during each flush
	CleanupPercentage *NullableFloat `protobuf:"bytes,13,opt,name=cleanupPercentage,proto3" json:"cleanupPercentage,omitempty"`
	// Maximum number of transactions indexed together
	MaxBulkSize *NullableUint32 `protobuf:"bytes,14,opt,name=maxBulkSize,proto3" json:"maxBulkSize,omitempty"`
	// Maximum time waiting for more transactions to be committed and included into the same bulk
	BulkPreparationTimeout *NullableMilliseconds `protobuf:"bytes,15,opt,name=bulkPreparationTimeout,proto3" json:"bulkPreparationTimeout,omitempty"`
}

func (x *IndexNullableSettings) Reset() {
	*x = IndexNullableSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexNullableSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexNullableSettings) ProtoMessage() {}

func (x *IndexNullableSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexNullableSettings.ProtoReflect.Descriptor instead.
func (*IndexNullableSettings) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{83}
}

func (x *IndexNullableSettings) GetFlushThreshold() *NullableUint32 {
	if x != nil {
		return x.FlushThreshold
	}
	return nil
}

func (x *IndexNullableSettings) GetSyncThreshold() *NullableUint32 {
	if x != nil {
		return x.SyncThreshold
	}
	return nil
}

func (x *IndexNullableSettings) GetCacheSize() *NullableUint32 {
	if x != nil {
		return x.CacheSize
	}
	return nil
}

func (x *IndexNullableSettings) GetMaxNodeSize() *NullableUint32 {
	if x != nil {
		return x.MaxNodeSize
	}
	return nil
}

func (x *IndexNullableSettings) GetMaxActiveSnapshots() *NullableUint32 {
	if x != nil {
		return x.MaxActiveSnapshots
	}
	return nil
}

func (x *IndexNullableSettings) GetRenewSnapRootAfter() *NullableUint64 {
	if x != nil {
		return x.RenewSnapRootAfter
	}
	return nil
}

func (x *IndexNullableSettings) GetCompactionThld() *NullableUint32 {
	if x != nil {
		return x.CompactionThld
	}
	return nil
}

func (x *IndexNullableSettings) GetDelayDuringCompaction() *NullableUint32 {
	if x != nil {
		return x.DelayDuringCompaction
	}
	return nil
}

func (x *IndexNullableSettings) GetNodesLogMaxOpenedFiles() *NullableUint32 {
	if x != nil {
		return x.NodesLogMaxOpenedFiles
	}
	return nil
}

func (x *IndexNullableSettings) GetHistoryLogMaxOpenedFiles() *NullableUint32 {
	if x != nil {
		return x.HistoryLogMaxOpenedFiles
	}
	return nil
}

func (x *IndexNullableSettings) GetCommitLogMaxOpenedFiles() *NullableUint32 {
	if x != nil {
		return x.CommitLogMaxOpenedFiles
	}
	return nil
}

func (x *IndexNullableSettings) GetFlushBufferSize() *NullableUint32 {
	if x != nil {
		return x.FlushBufferSize
	}
	return nil
}

func (x *IndexNullableSettings) GetCleanupPercentage() *NullableFloat {
	if x != nil {
		return x.CleanupPercentage
	}
	return nil
}

func (x *IndexNullableSettings) GetMaxBulkSize() *NullableUint32 {
	if x != nil {
		return x.MaxBulkSize
	}
	return nil
}

func (x *IndexNullableSettings) GetBulkPreparationTimeout() *NullableMilliseconds {
	if x != nil {
		return x.BulkPreparationTimeout
	}
	return nil
}

type AHTNullableSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of new leaves in the tree between synchronous flush to disk
	SyncThreshold *NullableUint32 `protobuf:"bytes,1,opt,name=syncThreshold,proto3" json:"syncThreshold,omitempty"`
	// Size of the in-memory write buffer
	WriteBufferSize *NullableUint32 `protobuf:"bytes,2,opt,name=writeBufferSize,proto3" json:"writeBufferSize,omitempty"`
}

func (x *AHTNullableSettings) Reset() {
	*x = AHTNullableSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AHTNullableSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AHTNullableSettings) ProtoMessage() {}

func (x *AHTNullableSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AHTNullableSettings.ProtoReflect.Descriptor instead.
func (*AHTNullableSettings) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{84}
}

func (x *AHTNullableSettings) GetSyncThreshold() *NullableUint32 {
	if x != nil {
		return x.SyncThreshold
	}
	return nil
}

func (x *AHTNullableSettings) GetWriteBufferSize() *NullableUint32 {
	if x != nil {
		return x.WriteBufferSize
	}
	return nil
}

type LoadDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` //  may add createIfNotExist
}

func (x *LoadDatabaseRequest) Reset() {
	*x = LoadDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadDatabaseRequest) ProtoMessage() {}

func (x *LoadDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadDatabaseRequest.ProtoReflect.Descriptor instead.
func (*LoadDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{85}
}

func (x *LoadDatabaseRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type LoadDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"` // may add settings
}

func (x *LoadDatabaseResponse) Reset() {
	*x = LoadDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadDatabaseResponse) ProtoMessage() {}

func (x *LoadDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadDatabaseResponse.ProtoReflect.Descriptor instead.
func (*LoadDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{86}
}

func (x *LoadDatabaseResponse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type UnloadDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *UnloadDatabaseRequest) Reset() {
	*x = UnloadDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnloadDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnloadDatabaseRequest) ProtoMessage() {}

func (x *UnloadDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnloadDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UnloadDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{87}
}

func (x *UnloadDatabaseRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type UnloadDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *UnloadDatabaseResponse) Reset() {
	*x = UnloadDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnloadDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnloadDatabaseResponse) ProtoMessage() {}

func (x *UnloadDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnloadDatabaseResponse.ProtoReflect.Descriptor instead.
func (*UnloadDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{88}
}

func (x *UnloadDatabaseResponse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type DeleteDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *DeleteDatabaseRequest) Reset() {
	*x = DeleteDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseRequest) ProtoMessage() {}

func (x *DeleteDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{89}
}

func (x *DeleteDatabaseRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type DeleteDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *DeleteDatabaseResponse) Reset() {
	*x = DeleteDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseResponse) ProtoMessage() {}

func (x *DeleteDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteDatabaseResponse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type FlushIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage of nodes file to cleanup during flush
	CleanupPercentage float32 `protobuf:"fixed32,1,opt,name=cleanupPercentage,proto3" json:"cleanupPercentage,omitempty"`
	// If true, do a full disk sync after the flush
	Synced bool `protobuf:"varint,2,opt,name=synced,proto3" json:"synced,omitempty"`
}

func (x *FlushIndexRequest) Reset() {
	*x = FlushIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushIndexRequest) ProtoMessage() {}

func (x *FlushIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushIndexRequest.ProtoReflect.Descriptor instead.
func (*FlushIndexRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{91}
}

func (x *FlushIndexRequest) GetCleanupPercentage() float32 {
	if x != nil {
		return x.CleanupPercentage
	}
	return 0
}

func (x *FlushIndexRequest) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type FlushIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *FlushIndexResponse) Reset() {
	*x = FlushIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushIndexResponse) ProtoMessage() {}

func (x *FlushIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushIndexResponse.ProtoReflect.Descriptor instead.
func (*FlushIndexResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{92}
}

func (x *FlushIndexResponse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table name
	TableName string `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{93}
}

func (x *Table) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type SQLGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table name
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Values of the primary key
	PkValues []*SQLValue `protobuf:"bytes,2,rep,name=pkValues,proto3" json:"pkValues,omitempty"`
	// Id of the transaction at which the row was added / modified
	AtTx uint64 `protobuf:"varint,3,opt,name=atTx,proto3" json:"atTx,omitempty"`
	// If > 0, do not wait for the indexer to index all entries, only require entries up to sinceTx to be indexed
	SinceTx uint64 `protobuf:"varint,4,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
}

func (x *SQLGetRequest) Reset() {
	*x = SQLGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLGetRequest) ProtoMessage() {}

func (x *SQLGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLGetRequest.ProtoReflect.Descriptor instead.
func (*SQLGetRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{94}
}

func (x *SQLGetRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *SQLGetRequest) GetPkValues() []*SQLValue {
	if x != nil {
		return x.PkValues
	}
	return nil
}

func (x *SQLGetRequest) GetAtTx() uint64 {
	if x != nil {
		return x.AtTx
	}
	return 0
}

func (x *SQLGetRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

type VerifiableSQLGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data of row to query
	SqlGetRequest *SQLGetRequest `protobuf:"bytes,1,opt,name=sqlGetRequest,proto3" json:"sqlGetRequest,omitempty"`
	// When generating the proof, generate consistency proof with state from this transaction
	ProveSinceTx uint64 `protobuf:"varint,2,opt,name=proveSinceTx,proto3" json:"proveSinceTx,omitempty"`
}

func (x *VerifiableSQLGetRequest) Reset() {
	*x = VerifiableSQLGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableSQLGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableSQLGetRequest) ProtoMessage() {}

func (x *VerifiableSQLGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableSQLGetRequest.ProtoReflect.Descriptor instead.
func (*VerifiableSQLGetRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{95}
}

func (x *VerifiableSQLGetRequest) GetSqlGetRequest() *SQLGetRequest {
	if x != nil {
		return x.SqlGetRequest
	}
	return nil
}

func (x *VerifiableSQLGetRequest) GetProveSinceTx() uint64 {
	if x != nil {
		return x.ProveSinceTx
	}
	return 0
}

type SQLEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the transaction when the row was added / modified
	Tx uint64 `protobuf:"varint,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Raw key of the row
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Raw value of the row
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata of the raw value
	Metadata *KVMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SQLEntry) Reset() {
	*x = SQLEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLEntry) ProtoMessage() {}

func (x *SQLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLEntry.ProtoReflect.Descriptor instead.
func (*SQLEntry) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{96}
}

func (x *SQLEntry) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *SQLEntry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SQLEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SQLEntry) GetMetadata() *KVMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type VerifiableSQLEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw row entry data
	SqlEntry *SQLEntry `protobuf:"bytes,1,opt,name=sqlEntry,proto3" json:"sqlEntry,omitempty"`
	// Verifiable transaction of the row
	VerifiableTx *VerifiableTx `protobuf:"bytes,2,opt,name=verifiableTx,proto3" json:"verifiableTx,omitempty"`
	// Inclusion proof of the row in the transaction
	InclusionProof *InclusionProof `protobuf:"bytes,3,opt,name=inclusionProof,proto3" json:"inclusionProof,omitempty"`
	// Internal ID of the database (used to validate raw entry values)
	DatabaseId uint32 `protobuf:"varint,4,opt,name=DatabaseId,proto3" json:"DatabaseId,omitempty"`
	// Internal ID of the table (used to validate raw entry values)
	TableId uint32 `protobuf:"varint,5,opt,name=TableId,proto3" json:"TableId,omitempty"`
	// Internal IDs of columns for the primary key (used to validate raw entry values)
	PKIDs []uint32 `protobuf:"varint,16,rep,packed,name=PKIDs,proto3" json:"PKIDs,omitempty"`
	// Mapping of used column IDs to their names
	ColNamesById map[uint32]string `protobuf:"bytes,8,rep,name=ColNamesById,proto3" json:"ColNamesById,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Mapping of column names to their IDS
	ColIdsByName map[string]uint32 `protobuf:"bytes,9,rep,name=ColIdsByName,proto3" json:"ColIdsByName,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Mapping of column IDs to their types
	ColTypesById map[uint32]string `protobuf:"bytes,10,rep,name=ColTypesById,proto3" json:"ColTypesById,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Mapping of column IDs to their length constraints
	ColLenById map[uint32]int32 `protobuf:"bytes,11,rep,name=ColLenById,proto3" json:"ColLenById,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Variable is used to assign unique ids to new columns as they are created
	MaxColId uint32 `protobuf:"varint,12,opt,name=MaxColId,proto3" json:"MaxColId,omitempty"`
}

func (x *VerifiableSQLEntry) Reset() {
	*x = VerifiableSQLEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableSQLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableSQLEntry) ProtoMessage() {}

func (x *VerifiableSQLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableSQLEntry.ProtoReflect.Descriptor instead.
func (*VerifiableSQLEntry) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{97}
}

func (x *VerifiableSQLEntry) GetSqlEntry() *SQLEntry {
	if x != nil {
		return x.SqlEntry
	}
	return nil
}

func (x *VerifiableSQLEntry) GetVerifiableTx() *VerifiableTx {
	if x != nil {
		return x.VerifiableTx
	}
	return nil
}

func (x *VerifiableSQLEntry) GetInclusionProof() *InclusionProof {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *VerifiableSQLEntry) GetDatabaseId() uint32 {
	if x != nil {
		return x.DatabaseId
	}
	return 0
}

func (x *VerifiableSQLEntry) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *VerifiableSQLEntry) GetPKIDs() []uint32 {
	if x != nil {
		return x.PKIDs
	}
	return nil
}

func (x *VerifiableSQLEntry) GetColNamesById() map[uint32]string {
	if x != nil {
		return x.ColNamesById
	}
	return nil
}

func (x *VerifiableSQLEntry) GetColIdsByName() map[string]uint32 {
	if x != nil {
		return x.ColIdsByName
	}
	return nil
}

func (x *VerifiableSQLEntry) GetColTypesById() map[uint32]string {
	if x != nil {
		return x.ColTypesById
	}
	return nil
}

func (x *VerifiableSQLEntry) GetColLenById() map[uint32]int32 {
	if x != nil {
		return x.ColLenById
	}
	return nil
}

func (x *VerifiableSQLEntry) GetMaxColId() uint32 {
	if x != nil {
		return x.MaxColId
	}
	return 0
}

type UseDatabaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: database access token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UseDatabaseReply) Reset() {
	*x = UseDatabaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseDatabaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseDatabaseReply) ProtoMessage() {}

func (x *UseDatabaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseDatabaseReply.ProtoReflect.Descriptor instead.
func (*UseDatabaseReply) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{98}
}

func (x *UseDatabaseReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ChangePermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action to perform
	Action PermissionAction `protobuf:"varint,1,opt,name=action,proto3,enum=immudb.schema.PermissionAction" json:"action,omitempty"`
	// Name of the user to update
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Name of the database
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Permission to grant / revoke: 1 - read only, 2 - read/write, 254 - admin
	Permission uint32 `protobuf:"varint,4,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *ChangePermissionRequest) Reset() {
	*x = ChangePermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePermissionRequest) ProtoMessage() {}

func (x *ChangePermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePermissionRequest.ProtoReflect.Descriptor instead.
func (*ChangePermissionRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{99}
}

func (x *ChangePermissionRequest) GetAction() PermissionAction {
	if x != nil {
		return x.Action
	}
	return PermissionAction_GRANT
}

func (x *ChangePermissionRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChangePermissionRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ChangePermissionRequest) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

type SetActiveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, the user is active
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	// Name of the user to activate / deactivate
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SetActiveUserRequest) Reset() {
	*x = SetActiveUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveUserRequest) ProtoMessage() {}

func (x *SetActiveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveUserRequest.ProtoReflect.Descriptor instead.
func (*SetActiveUserRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{100}
}

func (x *SetActiveUserRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SetActiveUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DatabaseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database list
	Databases []*Database `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *DatabaseListResponse) Reset() {
	*x = DatabaseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseListResponse) ProtoMessage() {}

func (x *DatabaseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseListResponse.ProtoReflect.Descriptor instead.
func (*DatabaseListResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{101}
}

func (x *DatabaseListResponse) GetDatabases() []*Database {
	if x != nil {
		return x.Databases
	}
	return nil
}

type DatabaseListRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DatabaseListRequestV2) Reset() {
	*x = DatabaseListRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseListRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseListRequestV2) ProtoMessage() {}

func (x *DatabaseListRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseListRequestV2.ProtoReflect.Descriptor instead.
func (*DatabaseListRequestV2) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{102}
}

type DatabaseListResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database list with current database settings
	Databases []*DatabaseWithSettings `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *DatabaseListResponseV2) Reset() {
	*x = DatabaseListResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseListResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseListResponseV2) ProtoMessage() {}

func (x *DatabaseListResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseListResponseV2.ProtoReflect.Descriptor instead.
func (*DatabaseListResponseV2) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{103}
}

func (x *DatabaseListResponseV2) GetDatabases() []*DatabaseWithSettings {
	if x != nil {
		return x.Databases
	}
	return nil
}

type DatabaseWithSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Current database settings
	Settings *DatabaseNullableSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	// If true, this database is currently loaded into memory
	Loaded bool `protobuf:"varint,3,opt,name=loaded,proto3" json:"loaded,omitempty"`
}

func (x *DatabaseWithSettings) Reset() {
	*x = DatabaseWithSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseWithSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseWithSettings) ProtoMessage() {}

func (x *DatabaseWithSettings) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseWithSettings.ProtoReflect.Descriptor instead.
func (*DatabaseWithSettings) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{104}
}

func (x *DatabaseWithSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseWithSettings) GetSettings() *DatabaseNullableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *DatabaseWithSettings) GetLoaded() bool {
	if x != nil {
		return x.Loaded
	}
	return false
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  []byte            `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Metadata map[string][]byte `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{105}
}

func (x *Chunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Chunk) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UseSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinceTx    uint64 `protobuf:"varint,1,opt,name=sinceTx,proto3" json:"sinceTx,omitempty"`
	AsBeforeTx uint64 `protobuf:"varint,2,opt,name=asBeforeTx,proto3" json:"asBeforeTx,omitempty"`
}

func (x *UseSnapshotRequest) Reset() {
	*x = UseSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSnapshotRequest) ProtoMessage() {}

func (x *UseSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSnapshotRequest.ProtoReflect.Descriptor instead.
func (*UseSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{106}
}

func (x *UseSnapshotRequest) GetSinceTx() uint64 {
	if x != nil {
		return x.SinceTx
	}
	return 0
}

func (x *UseSnapshotRequest) GetAsBeforeTx() uint64 {
	if x != nil {
		return x.AsBeforeTx
	}
	return 0
}

type SQLExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SQL query
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// Named query parameters
	Params []*NamedParam `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	// If true, do not wait for the indexer to index written changes
	NoWait bool `protobuf:"varint,3,opt,name=noWait,proto3" json:"noWait,omitempty"`
}

func (x *SQLExecRequest) Reset() {
	*x = SQLExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLExecRequest) ProtoMessage() {}

func (x *SQLExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLExecRequest.ProtoReflect.Descriptor instead.
func (*SQLExecRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{107}
}

func (x *SQLExecRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SQLExecRequest) GetParams() []*NamedParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SQLExecRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

type SQLQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SQL query
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// Named query parameters
	Params []*NamedParam `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	// If true, reuse previously opened snapshot
	ReuseSnapshot bool `protobuf:"varint,3,opt,name=reuseSnapshot,proto3" json:"reuseSnapshot,omitempty"`
}

func (x *SQLQueryRequest) Reset() {
	*x = SQLQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLQueryRequest) ProtoMessage() {}

func (x *SQLQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLQueryRequest.ProtoReflect.Descriptor instead.
func (*SQLQueryRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{108}
}

func (x *SQLQueryRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SQLQueryRequest) GetParams() []*NamedParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SQLQueryRequest) GetReuseSnapshot() bool {
	if x != nil {
		return x.ReuseSnapshot
	}
	return false
}

type NamedParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Parameter value
	Value *SQLValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NamedParam) Reset() {
	*x = NamedParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedParam) ProtoMessage() {}

func (x *NamedParam) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedParam.ProtoReflect.Descriptor instead.
func (*NamedParam) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{109}
}

func (x *NamedParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedParam) GetValue() *SQLValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type SQLExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of committed transactions as a result of the exec operation
	Txs []*CommittedSQLTx `protobuf:"bytes,5,rep,name=txs,proto3" json:"txs,omitempty"`
	// If true, there's an ongoing transaction after exec completes
	OngoingTx bool `protobuf:"varint,6,opt,name=ongoingTx,proto3" json:"ongoingTx,omitempty"`
}

func (x *SQLExecResult) Reset() {
	*x = SQLExecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLExecResult) ProtoMessage() {}

func (x *SQLExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLExecResult.ProtoReflect.Descriptor instead.
func (*SQLExecResult) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{110}
}

func (x *SQLExecResult) GetTxs() []*CommittedSQLTx {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *SQLExecResult) GetOngoingTx() bool {
	if x != nil {
		return x.OngoingTx
	}
	return false
}

type CommittedSQLTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction header
	Header *TxHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Number of updated rows
	UpdatedRows uint32 `protobuf:"varint,2,opt,name=updatedRows,proto3" json:"updatedRows,omitempty"`
	// The value of last inserted auto_increment primary key (mapped by table name)
	LastInsertedPKs map[string]*SQLValue `protobuf:"bytes,3,rep,name=lastInsertedPKs,proto3" json:"lastInsertedPKs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The value of first inserted auto_increment primary key (mapped by table name)
	FirstInsertedPKs map[string]*SQLValue `protobuf:"bytes,4,rep,name=firstInsertedPKs,proto3" json:"firstInsertedPKs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CommittedSQLTx) Reset() {
	*x = CommittedSQLTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommittedSQLTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommittedSQLTx) ProtoMessage() {}

func (x *CommittedSQLTx) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommittedSQLTx.ProtoReflect.Descriptor instead.
func (*CommittedSQLTx) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{111}
}

func (x *CommittedSQLTx) GetHeader() *TxHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CommittedSQLTx) GetUpdatedRows() uint32 {
	if x != nil {
		return x.UpdatedRows
	}
	return 0
}

func (x *CommittedSQLTx) GetLastInsertedPKs() map[string]*SQLValue {
	if x != nil {
		return x.LastInsertedPKs
	}
	return nil
}

func (x *CommittedSQLTx) GetFirstInsertedPKs() map[string]*SQLValue {
	if x != nil {
		return x.FirstInsertedPKs
	}
	return nil
}

type SQLQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result columns description
	Columns []*Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// Result rows
	Rows []*Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *SQLQueryResult) Reset() {
	*x = SQLQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLQueryResult) ProtoMessage() {}

func (x *SQLQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLQueryResult.ProtoReflect.Descriptor instead.
func (*SQLQueryResult) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{112}
}

func (x *SQLQueryResult) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SQLQueryResult) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Column type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{113}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column names
	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	// Column values
	Values []*SQLValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{114}
}

func (x *Row) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Row) GetValues() []*SQLValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type SQLValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*SQLValue_Null
	//	*SQLValue_N
	//	*SQLValue_S
	//	*SQLValue_B
	//	*SQLValue_Bs
	//	*SQLValue_Ts
	//	*SQLValue_F
	Value isSQLValue_Value `protobuf_oneof:"value"`
}

func (x *SQLValue) Reset() {
	*x = SQLValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLValue) ProtoMessage() {}

func (x *SQLValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLValue.ProtoReflect.Descriptor instead.
func (*SQLValue) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{115}
}

func (m *SQLValue) GetValue() isSQLValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SQLValue) GetNull() structpb.NullValue {
	if x, ok := x.GetValue().(*SQLValue_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *SQLValue) GetN() int64 {
	if x, ok := x.GetValue().(*SQLValue_N); ok {
		return x.N
	}
	return 0
}

func (x *SQLValue) GetS() string {
	if x, ok := x.GetValue().(*SQLValue_S); ok {
		return x.S
	}
	return ""
}

func (x *SQLValue) GetB() bool {
	if x, ok := x.GetValue().(*SQLValue_B); ok {
		return x.B
	}
	return false
}

func (x *SQLValue) GetBs() []byte {
	if x, ok := x.GetValue().(*SQLValue_Bs); ok {
		return x.Bs
	}
	return nil
}

func (x *SQLValue) GetTs() int64 {
	if x, ok := x.GetValue().(*SQLValue_Ts); ok {
		return x.Ts
	}
	return 0
}

func (x *SQLValue) GetF() float64 {
	if x, ok := x.GetValue().(*SQLValue_F); ok {
		return x.F
	}
	return 0
}

type isSQLValue_Value interface {
	isSQLValue_Value()
}

type SQLValue_Null struct {
	Null structpb.NullValue `protobuf:"varint,1,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type SQLValue_N struct {
	N int64 `protobuf:"varint,2,opt,name=n,proto3,oneof"`
}

type SQLValue_S struct {
	S string `protobuf:"bytes,3,opt,name=s,proto3,oneof"`
}

type SQLValue_B struct {
	B bool `protobuf:"varint,4,opt,name=b,proto3,oneof"`
}

type SQLValue_Bs struct {
	Bs []byte `protobuf:"bytes,5,opt,name=bs,proto3,oneof"`
}

type SQLValue_Ts struct {
	Ts int64 `protobuf:"varint,6,opt,name=ts,proto3,oneof"`
}

type SQLValue_F struct {
	F float64 `protobuf:"fixed64,7,opt,name=f,proto3,oneof"`
}

func (*SQLValue_Null) isSQLValue_Value() {}

func (*SQLValue_N) isSQLValue_Value() {}

func (*SQLValue_S) isSQLValue_Value() {}

func (*SQLValue_B) isSQLValue_Value() {}

func (*SQLValue_Bs) isSQLValue_Value() {}

func (*SQLValue_Ts) isSQLValue_Value() {}

func (*SQLValue_F) isSQLValue_Value() {}

type NewTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction mode
	Mode TxMode `protobuf:"varint,1,opt,name=mode,proto3,enum=immudb.schema.TxMode" json:"mode,omitempty"`
	// An existing snapshot may be reused as long as it includes the specified transaction
	// If not specified it will include up to the latest precommitted transaction
	SnapshotMustIncludeTxID *NullableUint64 `protobuf:"bytes,2,opt,name=snapshotMustIncludeTxID,proto3" json:"snapshotMustIncludeTxID,omitempty"`
	// An existing snapshot may be reused as long as it is not older than the specified timeframe
	SnapshotRenewalPeriod *NullableMilliseconds `protobuf:"bytes,3,opt,name=snapshotRenewalPeriod,proto3" json:"snapshotRenewalPeriod,omitempty"`
	// Indexing may not be up to date when doing MVCC
	UnsafeMVCC bool `protobuf:"varint,4,opt,name=unsafeMVCC,proto3" json:"unsafeMVCC,omitempty"`
}

func (x *NewTxRequest) Reset() {
	*x = NewTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTxRequest) ProtoMessage() {}

func (x *NewTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTxRequest.ProtoReflect.Descriptor instead.
func (*NewTxRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{116}
}

func (x *NewTxRequest) GetMode() TxMode {
	if x != nil {
		return x.Mode
	}
	return TxMode_ReadOnly
}

func (x *NewTxRequest) GetSnapshotMustIncludeTxID() *NullableUint64 {
	if x != nil {
		return x.SnapshotMustIncludeTxID
	}
	return nil
}

func (x *NewTxRequest) GetSnapshotRenewalPeriod() *NullableMilliseconds {
	if x != nil {
		return x.SnapshotRenewalPeriod
	}
	return nil
}

func (x *NewTxRequest) GetUnsafeMVCC() bool {
	if x != nil {
		return x.UnsafeMVCC
	}
	return false
}

type NewTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal transaction ID
	TransactionID string `protobuf:"bytes,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
}

func (x *NewTxResponse) Reset() {
	*x = NewTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTxResponse) ProtoMessage() {}

func (x *NewTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTxResponse.ProtoReflect.Descriptor instead.
func (*NewTxResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{117}
}

func (x *NewTxResponse) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error Description
	Cause string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{118}
}

func (x *ErrorInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorInfo) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

type DebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stack trace when the error was noticed
	Stack string `protobuf:"bytes,1,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *DebugInfo) Reset() {
	*x = DebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo) ProtoMessage() {}

func (x *DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo.ProtoReflect.Descriptor instead.
func (*DebugInfo) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{119}
}

func (x *DebugInfo) GetStack() string {
	if x != nil {
		return x.Stack
	}
	return ""
}

type RetryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of milliseconds after which the request can be retried
	RetryDelay int32 `protobuf:"varint,1,opt,name=retry_delay,json=retryDelay,proto3" json:"retry_delay,omitempty"`
}

func (x *RetryInfo) Reset() {
	*x = RetryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryInfo) ProtoMessage() {}

func (x *RetryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryInfo.ProtoReflect.Descriptor instead.
func (*RetryInfo) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{120}
}

func (x *RetryInfo) GetRetryDelay() int32 {
	if x != nil {
		return x.RetryDelay
	}
	return 0
}

type TruncateDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Retention Period of data
	RetentionPeriod int64 `protobuf:"varint,2,opt,name=retentionPeriod,proto3" json:"retentionPeriod,omitempty"`
}

func (x *TruncateDatabaseRequest) Reset() {
	*x = TruncateDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateDatabaseRequest) ProtoMessage() {}

func (x *TruncateDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateDatabaseRequest.ProtoReflect.Descriptor instead.
func (*TruncateDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{121}
}

func (x *TruncateDatabaseRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *TruncateDatabaseRequest) GetRetentionPeriod() int64 {
	if x != nil {
		return x.RetentionPeriod
	}
	return 0
}

type TruncateDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database name
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *TruncateDatabaseResponse) Reset() {
	*x = TruncateDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateDatabaseResponse) ProtoMessage() {}

func (x *TruncateDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateDatabaseResponse.ProtoReflect.Descriptor instead.
func (*TruncateDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{122}
}

func (x *TruncateDatabaseResponse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// Only succeed if given key exists
type Precondition_KeyMustExistPrecondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key to check
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Precondition_KeyMustExistPrecondition) Reset() {
	*x = Precondition_KeyMustExistPrecondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition_KeyMustExistPrecondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition_KeyMustExistPrecondition) ProtoMessage() {}

func (x *Precondition_KeyMustExistPrecondition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition_KeyMustExistPrecondition.ProtoReflect.Descriptor instead.
func (*Precondition_KeyMustExistPrecondition) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Precondition_KeyMustExistPrecondition) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// Only succeed if given key does not exists
type Precondition_KeyMustNotExistPrecondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key to check
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Precondition_KeyMustNotExistPrecondition) Reset() {
	*x = Precondition_KeyMustNotExistPrecondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition_KeyMustNotExistPrecondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition_KeyMustNotExistPrecondition) ProtoMessage() {}

func (x *Precondition_KeyMustNotExistPrecondition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition_KeyMustNotExistPrecondition.ProtoReflect.Descriptor instead.
func (*Precondition_KeyMustNotExistPrecondition) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Precondition_KeyMustNotExistPrecondition) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// Only succeed if given key was not modified after given transaction
type Precondition_KeyNotModifiedAfterTXPrecondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key to check
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// transaction id to check against
	TxID uint64 `protobuf:"varint,2,opt,name=txID,proto3" json:"txID,omitempty"`
}

func (x *Precondition_KeyNotModifiedAfterTXPrecondition) Reset() {
	*x = Precondition_KeyNotModifiedAfterTXPrecondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precondition_KeyNotModifiedAfterTXPrecondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition_KeyNotModifiedAfterTXPrecondition) ProtoMessage() {}

func (x *Precondition_KeyNotModifiedAfterTXPrecondition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition_KeyNotModifiedAfterTXPrecondition.ProtoReflect.Descriptor instead.
func (*Precondition_KeyNotModifiedAfterTXPrecondition) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{13, 2}
}

func (x *Precondition_KeyNotModifiedAfterTXPrecondition) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Precondition_KeyNotModifiedAfterTXPrecondition) GetTxID() uint64 {
	if x != nil {
		return x.TxID
	}
	return 0
}

var File_schema_proto protoreflect.FileDescriptor

var file_schema_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x48, 0x0a,
	0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x35, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x21, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x6f, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x3e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0x20, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x26, 0x0a, 0x0a, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x12,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53,
	0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x80, 0x04, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x4d, 0x75, 0x73, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x75, 0x73, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x4d, 0x75, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x63, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x15, 0x6b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x58, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x58, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x6b, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x58, 0x1a, 0x2c, 0x0a, 0x18,
	0x4b, 0x65, 0x79, 0x4d, 0x75, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x2f, 0x0a, 0x1b, 0x4b, 0x65,
	0x79, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x49, 0x0a, 0x21, 0x4b,
	0x65, 0x79, 0x4e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x54, 0x58, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x56, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xea, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x56, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x94,
	0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x74, 0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x74,
	0x54, 0x78, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x56, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x29, 0x0a, 0x02,
	0x6b, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x02, 0x6b, 0x76, 0x12, 0x30, 0x0a, 0x04, 0x7a, 0x41, 0x64, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x7a, 0x41, 0x64, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x42, 0x0b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x0e,
	0x45, 0x78, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x07,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x5a, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x54, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x74, 0x54, 0x78, 0x22, 0x3b, 0x0a, 0x08,
	0x5a, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0b, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x65,
	0x6b, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65, 0x65, 0x6b,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x53, 0x65, 0x65, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x65, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x23, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x22, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x41, 0x6c, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x41, 0x6c, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x48, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x65, 0x48, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x54, 0x78, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x54, 0x78, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x62, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x0a, 0x54, 0x78, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x63, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a,
	0x10, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x09, 0x44, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x6c, 0x54, 0x78, 0x41, 0x6c, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x54, 0x78, 0x41, 0x6c, 0x68, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3c, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0b, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x51, 0x0a, 0x12, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x12, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xe3, 0x01,
	0x0a, 0x0b, 0x44, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x32, 0x12, 0x3f, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0xce, 0x01, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x09, 0x6b, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6b, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x7a, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x7a, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x4c,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x4c, 0x65, 0x6e, 0x12, 0x35,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4b, 0x56, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0a,
	0x4b, 0x56, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22,
	0xa1, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78,
	0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x78, 0x56, 0x32, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x32, 0x52, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0f,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x52, 0x0c,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x12, 0x45, 0x0a, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x50, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x4b, 0x56, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x4b, 0x56, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x74, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x74, 0x54, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57,
	0x61, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x3e, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54,
	0x78, 0x22, 0x59, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x22, 0x75, 0x0a, 0x14,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x54, 0x78, 0x22, 0x75, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2e, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x42, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xe0, 0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x64, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x78,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xd5, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x74, 0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61,
	0x74, 0x54, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x5a,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x54, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x61, 0x74, 0x54, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x22, 0x1d, 0x0a, 0x05,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x0c,
	0x5a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x65, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x65, 0x65, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x65,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x65, 0x6b, 0x41, 0x74,
	0x54, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x65, 0x6b, 0x41, 0x74,
	0x54, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x65, 0x65, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54,
	0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x7e, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78,
	0x22, 0x79, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x7a, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x7a, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x22, 0xc7, 0x01, 0x0a, 0x09,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x78, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6b, 0x65, 0x65,
	0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6b, 0x65, 0x65,
	0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x6b, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x6b, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x0c, 0x7a, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x7a,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x0e, 0x73,
	0x71, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x22, 0x47, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x74, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x54, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x3c, 0x0a, 0x0b,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x22, 0x2d, 0x0a, 0x06,
	0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0f,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x78, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xc2,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x54, 0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x78, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x68, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x78, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x78, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x41, 0x6c, 0x68, 0x22, 0x2e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x4c, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x4c,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x79, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x19, 0x0a, 0x17,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd2, 0x0e, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x54, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x49, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x49, 0x4f,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x74,
	0x78, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x0e, 0x74, 0x78, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x12, 0x76,
	0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x13, 0x74, 0x78, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x13, 0x74,
	0x78, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d,
	0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78,
	0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x6f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x78, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x79,
	0x6e, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x61, 0x68, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x41, 0x48, 0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x61, 0x68, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x6d, 0x76, 0x63,
	0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x10, 0x6d, 0x76, 0x63, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x76, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0d, 0x76, 0x4c, 0x6f, 0x67,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xc8, 0x07, 0x0a,
	0x1b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x47,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x45, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x63,
	0x6b, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x78,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x61, 0x0a, 0x1c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x1c, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x78, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x78, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x12, 0x73, 0x6b,
	0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x45, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x99, 0x09, 0x0a,
	0x15, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0e, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x43, 0x0a,
	0x0d, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12,
	0x4d, 0x0a, 0x12, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x16, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x59, 0x0a, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x4d,
	0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x4d, 0x61,
	0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x17, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0f, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4a,
	0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x62,
	0x75, 0x6c, 0x6b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x16, 0x62, 0x75, 0x6c, 0x6b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x41, 0x48, 0x54,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x31,
	0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x22, 0x32, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x15, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x16, 0x55, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x22, 0x33, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x12, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x70, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x74, 0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x74, 0x54, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51,
	0x4c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x71, 0x6c,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x22, 0x79,
	0x0a, 0x08, 0x53, 0x51, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x56, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x07, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x33, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x71, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x4b, 0x49, 0x44, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x4b, 0x49, 0x44, 0x73, 0x12, 0x57, 0x0a,
	0x0c, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x51,
	0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x49, 0x64, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6c, 0x49, 0x64, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x49, 0x64, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x51, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x4c,
	0x65, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6c, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x43, 0x6f, 0x6c, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x6c, 0x49, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x49,
	0x64, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x6f,
	0x6c, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22,
	0x28, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x22, 0x5b, 0x0a, 0x16, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x32, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x22, 0x9e, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x54, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x78, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x51, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x57,
	0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69,
	0x74, 0x22, 0x7c, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x75,
	0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x75, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22,
	0x4f, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x5e, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2f, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x51, 0x4c, 0x54, 0x78, 0x52, 0x03, 0x74,
	0x78, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x78,
	0x22, 0xdd, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x51,
	0x4c, 0x54, 0x78, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x50, 0x4b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x51, 0x4c, 0x54, 0x78, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x50, 0x4b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x50, 0x4b, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x50, 0x4b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x51, 0x4c, 0x54, 0x78, 0x2e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x50, 0x4b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x50, 0x4b, 0x73, 0x1a, 0x5b, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x50, 0x4b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x50, 0x4b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x69, 0x0a, 0x0e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a,
	0x03, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x08, 0x53, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x0e,
	0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01, 0x6e, 0x12, 0x0e,
	0x0a, 0x01, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x73, 0x12, 0x0e,
	0x0a, 0x01, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x01, 0x62, 0x12, 0x10,
	0x0a, 0x02, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x62, 0x73,
	0x12, 0x10, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x01, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x01, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0c,
	0x4e, 0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4d, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x78,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x17, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4d, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x78, 0x49, 0x44,
	0x12, 0x59, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x56, 0x43, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x56, 0x43, 0x43, 0x22, 0x35, 0x0a, 0x0d, 0x4e,
	0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x35, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x2c, 0x0a, 0x09,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x5f, 0x0a, 0x17, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x36, 0x0a, 0x18, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2a, 0x4b, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x44, 0x49, 0x47, 0x45,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x57, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x03,
	0x2a, 0x29, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x01, 0x2a, 0x34, 0x0a, 0x06, 0x54,
	0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10,
	0x02, 0x32, 0xb6, 0x34, 0x0a, 0x0b, 0x49, 0x6d, 0x6d, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x70, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x75, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22,
	0x13, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x74, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x03, 0x88, 0x02, 0x01,
	0x12, 0x4a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x56, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x05, 0x4e, 0x65, 0x77, 0x54, 0x78, 0x12, 0x1b,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x51, 0x4c, 0x54, 0x78, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09,
	0x54, 0x78, 0x53, 0x51, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x54, 0x78, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x92, 0x41, 0x02, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x3a, 0x01, 0x2a, 0x22, 0x06, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x88, 0x02, 0x01,
	0x12, 0x4f, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0c, 0x3a, 0x01, 0x2a, 0x22, 0x07, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x88, 0x02,
	0x01, 0x12, 0x4d, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x12, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01, 0x2a, 0x22, 0x07, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x65, 0x74,
	0x12, 0x70, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x78, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12,
	0x2f, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x73,
	0x65, 0x74, 0x12, 0x4d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x64, 0x62, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x7d, 0x12, 0x73, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x22, 0x12, 0x2f, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x20, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x15, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x64, 0x62, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a,
	0x2f, 0x64, 0x62, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x07, 0x45, 0x78,
	0x65, 0x63, 0x41, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x64, 0x62, 0x2f, 0x65, 0x78,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x64,
	0x62, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x58, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x64,
	0x62, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x7d,
	0x12, 0x53, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x64, 0x62, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x06, 0x54, 0x78, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x64, 0x62, 0x2f, 0x74, 0x78, 0x2f, 0x7b, 0x74, 0x78,
	0x7d, 0x12, 0x73, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x78, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x74,
	0x78, 0x2f, 0x7b, 0x74, 0x78, 0x7d, 0x12, 0x50, 0x0a, 0x06, 0x54, 0x78, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x1c, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01, 0x2a,
	0x22, 0x06, 0x2f, 0x64, 0x62, 0x2f, 0x74, 0x78, 0x12, 0x58, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x64, 0x62, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x6b, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x92, 0x41, 0x02, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x55, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x92, 0x41, 0x02, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x68, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x92, 0x41, 0x02, 0x62, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x64, 0x62, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x16, 0x92, 0x41, 0x02, 0x62, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x65, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x65, 0x74, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x29, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x04, 0x5a, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x64, 0x62, 0x2f, 0x7a,
	0x61, 0x64, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x5a, 0x41, 0x64, 0x64, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x2f, 0x7a, 0x61, 0x64, 0x64, 0x12, 0x53, 0x0a, 0x05, 0x5a, 0x53, 0x63, 0x61,
	0x6e, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a,
	0x01, 0x2a, 0x22, 0x09, 0x2f, 0x64, 0x62, 0x2f, 0x7a, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x5b, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x64, 0x62,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x88, 0x02, 0x01, 0x12, 0x6b, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x64, 0x62, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x77, 0x69, 0x74, 0x68, 0x88, 0x02, 0x01, 0x12, 0x79, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x32, 0x12, 0x24, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x64, 0x62, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x32, 0x12, 0x6c, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x64, 0x62, 0x2f, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x74, 0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x64, 0x62, 0x2f,
	0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x74, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a,
	0x22, 0x0a, 0x2f, 0x64, 0x62, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x0c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x64, 0x62, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x88, 0x02,
	0x01, 0x12, 0x75, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x32, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x64, 0x62,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x32, 0x12, 0x67, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x64, 0x62, 0x2f, 0x75,
	0x73, 0x65, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x63, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x64, 0x62, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x88, 0x02, 0x01, 0x12, 0x79, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x32, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a,
	0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x64, 0x62, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x32, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x64,
	0x62, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x02, 0x01, 0x12, 0x84, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x76, 0x32, 0x12, 0x69, 0x0a, 0x0a, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x64, 0x62, 0x2f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x58, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x64, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x17,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54,
	0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x4c, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1b,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x42, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5a, 0x53, 0x63,
	0x61, 0x6e, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x65,
	0x63, 0x41, 0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x78, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x78, 0x12, 0x14, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x4c, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x78, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x5e, 0x0a,
	0x07, 0x53, 0x51, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a,
	0x22, 0x0b, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x65, 0x78, 0x65, 0x63, 0x12, 0x62, 0x0a,
	0x08, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x64, 0x62, 0x2f, 0x73, 0x71, 0x6c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x5b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x64, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x5b,
	0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22,
	0x0a, 0x2f, 0x64, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x10, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x47, 0x65, 0x74, 0x12,
	0x26, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x51, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x64, 0x62, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x73, 0x71, 0x6c, 0x67, 0x65, 0x74, 0x12, 0x7c, 0x0a, 0x10,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x26, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x64,
	0x62, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x42, 0x91, 0x03, 0x92, 0x41, 0xe0,
	0x02, 0x12, 0xee, 0x01, 0x0a, 0x0f, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x20, 0x52, 0x45, 0x53,
	0x54, 0x20, 0x41, 0x50, 0x49, 0x12, 0xda, 0x01, 0x3c, 0x62, 0x3e, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x41, 0x4e, 0x54, 0x3c, 0x2f, 0x62, 0x3e, 0x3a, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x3c, 0x63,
	0x6f, 0x64, 0x65, 0x3e, 0x67, 0x65, 0x74, 0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x73, 0x61, 0x66, 0x65, 0x67, 0x65, 0x74,
	0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x3c, 0x75, 0x3e, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x3c, 0x2f, 0x75, 0x3e, 0x20, 0x6b,
	0x65, 0x79, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2c, 0x20,
	0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e,
	0x73, 0x65, 0x74, 0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x3c,
	0x63, 0x6f, 0x64, 0x65, 0x3e, 0x73, 0x61, 0x66, 0x65, 0x73, 0x65, 0x74, 0x3c, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x3e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x20, 0x3c, 0x75, 0x3e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x2d, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x3c, 0x2f, 0x75, 0x3e, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2e, 0x22, 0x04, 0x2f, 0x61, 0x70, 0x69, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12,
	0x00, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_proto_rawDescOnce sync.Once
	file_schema_proto_rawDescData = file_schema_proto_rawDesc
)

func file_schema_proto_rawDescGZIP() []byte {
	file_schema_proto_rawDescOnce.Do(func() {
		file_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_proto_rawDescData)
	})
	return file_schema_proto_rawDescData
}

var file_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 133)
var file_schema_proto_goTypes = []interface{}{
	(EntryTypeAction)(0),                             // 0: immudb.schema.EntryTypeAction
	(PermissionAction)(0),                            // 1: immudb.schema.PermissionAction
	(TxMode)(0),                                      // 2: immudb.schema.TxMode
	(*Key)(nil),                                      // 3: immudb.schema.Key
	(*Permission)(nil),                               // 4: immudb.schema.Permission
	(*User)(nil),                                     // 5: immudb.schema.User
	(*UserList)(nil),                                 // 6: immudb.schema.UserList
	(*CreateUserRequest)(nil),                        // 7: immudb.schema.CreateUserRequest
	(*UserRequest)(nil),                              // 8: immudb.schema.UserRequest
	(*ChangePasswordRequest)(nil),                    // 9: immudb.schema.ChangePasswordRequest
	(*LoginRequest)(nil),                             // 10: immudb.schema.LoginRequest
	(*LoginResponse)(nil),                            // 11: immudb.schema.LoginResponse
	(*AuthConfig)(nil),                               // 12: immudb.schema.AuthConfig
	(*MTLSConfig)(nil),                               // 13: immudb.schema.MTLSConfig
	(*OpenSessionRequest)(nil),                       // 14: immudb.schema.OpenSessionRequest
	(*OpenSessionResponse)(nil),                      // 15: immudb.schema.OpenSessionResponse
	(*Precondition)(nil),                             // 16: immudb.schema.Precondition
	(*KeyValue)(nil),                                 // 17: immudb.schema.KeyValue
	(*Entry)(nil),                                    // 18: immudb.schema.Entry
	(*Reference)(nil),                                // 19: immudb.schema.Reference
	(*Op)(nil),                                       // 20: immudb.schema.Op
	(*ExecAllRequest)(nil),                           // 21: immudb.schema.ExecAllRequest
	(*Entries)(nil),                                  // 22: immudb.schema.Entries
	(*ZEntry)(nil),                                   // 23: immudb.schema.ZEntry
	(*ZEntries)(nil),                                 // 24: immudb.schema.ZEntries
	(*ScanRequest)(nil),                              // 25: immudb.schema.ScanRequest
	(*KeyPrefix)(nil),                                // 26: immudb.schema.KeyPrefix
	(*EntryCount)(nil),                               // 27: immudb.schema.EntryCount
	(*Signature)(nil),                                // 28: immudb.schema.Signature
	(*TxHeader)(nil),                                 // 29: immudb.schema.TxHeader
	(*TxMetadata)(nil),                               // 30: immudb.schema.TxMetadata
	(*LinearProof)(nil),                              // 31: immudb.schema.LinearProof
	(*LinearAdvanceProof)(nil),                       // 32: immudb.schema.LinearAdvanceProof
	(*DualProof)(nil),                                // 33: immudb.schema.DualProof
	(*DualProofV2)(nil),                              // 34: immudb.schema.DualProofV2
	(*Tx)(nil),                                       // 35: immudb.schema.Tx
	(*TxEntry)(nil),                                  // 36: immudb.schema.TxEntry
	(*KVMetadata)(nil),                               // 37: immudb.schema.KVMetadata
	(*Expiration)(nil),                               // 38: immudb.schema.Expiration
	(*VerifiableTx)(nil),                             // 39: immudb.schema.VerifiableTx
	(*VerifiableTxV2)(nil),                           // 40: immudb.schema.VerifiableTxV2
	(*VerifiableEntry)(nil),                          // 41: immudb.schema.VerifiableEntry
	(*InclusionProof)(nil),                           // 42: immudb.schema.InclusionProof
	(*SetRequest)(nil),                               // 43: immudb.schema.SetRequest
	(*KeyRequest)(nil),                               // 44: immudb.schema.KeyRequest
	(*KeyListRequest)(nil),                           // 45: immudb.schema.KeyListRequest
	(*DeleteKeysRequest)(nil),                        // 46: immudb.schema.DeleteKeysRequest
	(*VerifiableSetRequest)(nil),                     // 47: immudb.schema.VerifiableSetRequest
	(*VerifiableGetRequest)(nil),                     // 48: immudb.schema.VerifiableGetRequest
	(*ServerInfoRequest)(nil),                        // 49: immudb.schema.ServerInfoRequest
	(*ServerInfoResponse)(nil),                       // 50: immudb.schema.ServerInfoResponse
	(*HealthResponse)(nil),                           // 51: immudb.schema.HealthResponse
	(*DatabaseHealthResponse)(nil),                   // 52: immudb.schema.DatabaseHealthResponse
	(*ImmutableState)(nil),                           // 53: immudb.schema.ImmutableState
	(*ReferenceRequest)(nil),                         // 54: immudb.schema.ReferenceRequest
	(*VerifiableReferenceRequest)(nil),               // 55: immudb.schema.VerifiableReferenceRequest
	(*ZAddRequest)(nil),                              // 56: immudb.schema.ZAddRequest
	(*Score)(nil),                                    // 57: immudb.schema.Score
	(*ZScanRequest)(nil),                             // 58: immudb.schema.ZScanRequest
	(*HistoryRequest)(nil),                           // 59: immudb.schema.HistoryRequest
	(*VerifiableZAddRequest)(nil),                    // 60: immudb.schema.VerifiableZAddRequest
	(*TxRequest)(nil),                                // 61: immudb.schema.TxRequest
	(*EntriesSpec)(nil),                              // 62: immudb.schema.EntriesSpec
	(*EntryTypeSpec)(nil),                            // 63: immudb.schema.EntryTypeSpec
	(*VerifiableTxRequest)(nil),                      // 64: immudb.schema.VerifiableTxRequest
	(*TxScanRequest)(nil),                            // 65: immudb.schema.TxScanRequest
	(*TxList)(nil),                                   // 66: immudb.schema.TxList
	(*ExportTxRequest)(nil),                          // 67: immudb.schema.ExportTxRequest
	(*ReplicaState)(nil),                             // 68: immudb.schema.ReplicaState
	(*Database)(nil),                                 // 69: immudb.schema.Database
	(*DatabaseSettings)(nil),                         // 70: immudb.schema.DatabaseSettings
	(*CreateDatabaseRequest)(nil),                    // 71: immudb.schema.CreateDatabaseRequest
	(*CreateDatabaseResponse)(nil),                   // 72: immudb.schema.CreateDatabaseResponse
	(*UpdateDatabaseRequest)(nil),                    // 73: immudb.schema.UpdateDatabaseRequest
	(*UpdateDatabaseResponse)(nil),                   // 74: immudb.schema.UpdateDatabaseResponse
	(*DatabaseSettingsRequest)(nil),                  // 75: immudb.schema.DatabaseSettingsRequest
	(*DatabaseSettingsResponse)(nil),                 // 76: immudb.schema.DatabaseSettingsResponse
	(*NullableUint32)(nil),                           // 77: immudb.schema.NullableUint32
	(*NullableUint64)(nil),                           // 78: immudb.schema.NullableUint64
	(*NullableFloat)(nil),                            // 79: immudb.schema.NullableFloat
	(*NullableBool)(nil),                             // 80: immudb.schema.NullableBool
	(*NullableString)(nil),                           // 81: immudb.schema.NullableString
	(*NullableMilliseconds)(nil),                     // 82: immudb.schema.NullableMilliseconds
	(*DatabaseNullableSettings)(nil),                 // 83: immudb.schema.DatabaseNullableSettings
	(*ReplicationNullableSettings)(nil),              // 84: immudb.schema.ReplicationNullableSettings
	(*TruncationNullableSettings)(nil),               // 85: immudb.schema.TruncationNullableSettings
	(*IndexNullableSettings)(nil),                    // 86: immudb.schema.IndexNullableSettings
	(*AHTNullableSettings)(nil),                      // 87: immudb.schema.AHTNullableSettings
	(*LoadDatabaseRequest)(nil),                      // 88: immudb.schema.LoadDatabaseRequest
	(*LoadDatabaseResponse)(nil),                     // 89: immudb.schema.LoadDatabaseResponse
	(*UnloadDatabaseRequest)(nil),                    // 90: immudb.schema.UnloadDatabaseRequest
	(*UnloadDatabaseResponse)(nil),                   // 91: immudb.schema.UnloadDatabaseResponse
	(*DeleteDatabaseRequest)(nil),                    // 92: immudb.schema.DeleteDatabaseRequest
	(*DeleteDatabaseResponse)(nil),                   // 93: immudb.schema.DeleteDatabaseResponse
	(*FlushIndexRequest)(nil),                        // 94: immudb.schema.FlushIndexRequest
	(*FlushIndexResponse)(nil),                       // 95: immudb.schema.FlushIndexResponse
	(*Table)(nil),                                    // 96: immudb.schema.Table
	(*SQLGetRequest)(nil),                            // 97: immudb.schema.SQLGetRequest
	(*VerifiableSQLGetRequest)(nil),                  // 98: immudb.schema.VerifiableSQLGetRequest
	(*SQLEntry)(nil),                                 // 99: immudb.schema.SQLEntry
	(*VerifiableSQLEntry)(nil),                       // 100: immudb.schema.VerifiableSQLEntry
	(*UseDatabaseReply)(nil),                         // 101: immudb.schema.UseDatabaseReply
	(*ChangePermissionRequest)(nil),                  // 102: immudb.schema.ChangePermissionRequest
	(*SetActiveUserRequest)(nil),                     // 103: immudb.schema.SetActiveUserRequest
	(*DatabaseListResponse)(nil),                     // 104: immudb.schema.DatabaseListResponse
	(*DatabaseListRequestV2)(nil),                    // 105: immudb.schema.DatabaseListRequestV2
	(*DatabaseListResponseV2)(nil),                   // 106: immudb.schema.DatabaseListResponseV2
	(*DatabaseWithSettings)(nil),                     // 107: immudb.schema.DatabaseWithSettings
	(*Chunk)(nil),                                    // 108: immudb.schema.Chunk
	(*UseSnapshotRequest)(nil),                       // 109: immudb.schema.UseSnapshotRequest
	(*SQLExecRequest)(nil),                           // 110: immudb.schema.SQLExecRequest
	(*SQLQueryRequest)(nil),                          // 111: immudb.schema.SQLQueryRequest
	(*NamedParam)(nil),                               // 112: immudb.schema.NamedParam
	(*SQLExecResult)(nil),                            // 113: immudb.schema.SQLExecResult
	(*CommittedSQLTx)(nil),                           // 114: immudb.schema.CommittedSQLTx
	(*SQLQueryResult)(nil),                           // 115: immudb.schema.SQLQueryResult
	(*Column)(nil),                                   // 116: immudb.schema.Column
	(*Row)(nil),                                      // 117: immudb.schema.Row
	(*SQLValue)(nil),                                 // 118: immudb.schema.SQLValue
	(*NewTxRequest)(nil),                             // 119: immudb.schema.NewTxRequest
	(*NewTxResponse)(nil),                            // 120: immudb.schema.NewTxResponse
	(*ErrorInfo)(nil),                                // 121: immudb.schema.ErrorInfo
	(*DebugInfo)(nil),                                // 122: immudb.schema.DebugInfo
	(*RetryInfo)(nil),                                // 123: immudb.schema.RetryInfo
	(*TruncateDatabaseRequest)(nil),                  // 124: immudb.schema.TruncateDatabaseRequest
	(*TruncateDatabaseResponse)(nil),                 // 125: immudb.schema.TruncateDatabaseResponse
	(*Precondition_KeyMustExistPrecondition)(nil),    // 126: immudb.schema.Precondition.KeyMustExistPrecondition
	(*Precondition_KeyMustNotExistPrecondition)(nil), // 127: immudb.schema.Precondition.KeyMustNotExistPrecondition
	(*Precondition_KeyNotModifiedAfterTXPrecondition)(nil), // 128: immudb.schema.Precondition.KeyNotModifiedAfterTXPrecondition
	nil,                     // 129: immudb.schema.VerifiableSQLEntry.ColNamesByIdEntry
	nil,                     // 130: immudb.schema.VerifiableSQLEntry.ColIdsByNameEntry
	nil,                     // 131: immudb.schema.VerifiableSQLEntry.ColTypesByIdEntry
	nil,                     // 132: immudb.schema.VerifiableSQLEntry.ColLenByIdEntry
	nil,                     // 133: immudb.schema.Chunk.MetadataEntry
	nil,                     // 134: immudb.schema.CommittedSQLTx.LastInsertedPKsEntry
	nil,                     // 135: immudb.schema.CommittedSQLTx.FirstInsertedPKsEntry
	(structpb.NullValue)(0), // 136: google.protobuf.NullValue
	(*emptypb.Empty)(nil),   // 137: google.protobuf.Empty
}
var file_schema_proto_depIdxs = []int32{
	4,   // 0: immudb.schema.User.permissions:type_name -> immudb.schema.Permission
	5,   // 1: immudb.schema.UserList.users:type_name -> immudb.schema.User
	126, // 2: immudb.schema.Precondition.keyMustExist:type_name -> immudb.schema.Precondition.KeyMustExistPrecondition
	127, // 3: immudb.schema.Precondition.keyMustNotExist:type_name -> immudb.schema.Precondition.KeyMustNotExistPrecondition
	128, // 4: immudb.schema.Precondition.keyNotModifiedAfterTX:type_name -> immudb.schema.Precondition.KeyNotModifiedAfterTXPrecondition
	37,  // 5: immudb.schema.KeyValue.metadata:type_name -> immudb.schema.KVMetadata
	19,  // 6: immudb.schema.Entry.referencedBy:type_name -> immudb.schema.Reference
	37,  // 7: immudb.schema.Entry.metadata:type_name -> immudb.schema.KVMetadata
	37,  // 8: immudb.schema.Reference.metadata:type_name -> immudb.schema.KVMetadata
	17,  // 9: immudb.schema.Op.kv:type_name -> immudb.schema.KeyValue
	56,  // 10: immudb.schema.Op.zAdd:type_name -> immudb.schema.ZAddRequest
	54,  // 11: immudb.schema.Op.ref:type_name -> immudb.schema.ReferenceRequest
	20,  // 12: immudb.schema.ExecAllRequest.Operations:type_name -> immudb.schema.Op
	16,  // 13: immudb.schema.ExecAllRequest.preconditions:type_name -> immudb.schema.Precondition
	18,  // 14: immudb.schema.Entries.entries:type_name -> immudb.schema.Entry
	18,  // 15: immudb.schema.ZEntry.entry:type_name -> immudb.schema.Entry
	23,  // 16: immudb.schema.ZEntries.entries:type_name -> immudb.schema.ZEntry
	30,  // 17: immudb.schema.TxHeader.metadata:type_name -> immudb.schema.TxMetadata
	42,  // 18: immudb.schema.LinearAdvanceProof.inclusionProofs:type_name -> immudb.schema.InclusionProof
	29,  // 19: immudb.schema.DualProof.sourceTxHeader:type_name -> immudb.schema.TxHeader
	29,  // 20: immudb.schema.DualProof.targetTxHeader:type_name -> immudb.schema.TxHeader
	31,  // 21: immudb.schema.DualProof.linearProof:type_name -> immudb.schema.LinearProof
	32,  // 22: immudb.schema.DualProof.LinearAdvanceProof:type_name -> immudb.schema.LinearAdvanceProof
	29,  // 23: immudb.schema.DualProofV2.sourceTxHeader:type_name -> immudb.schema.TxHeader
	29,  // 24: immudb.schema.DualProofV2.targetTxHeader:type_name -> immudb.schema.TxHeader
	29,  // 25: immudb.schema.Tx.header:type_name -> immudb.schema.TxHeader
	36,  // 26: immudb.schema.Tx.entries:type_name -> immudb.schema.TxEntry
	18,  // 27: immudb.schema.Tx.kvEntries:type_name -> immudb.schema.Entry
	23,  // 28: immudb.schema.Tx.zEntries:type_name -> immudb.schema.ZEntry
	37,  // 29: immudb.schema.TxEntry.metadata:type_name -> immudb.schema.KVMetadata
	38,  // 30: immudb.schema.KVMetadata.expiration:type_name -> immudb.schema.Expiration
	35,  // 31: immudb.schema.VerifiableTx.tx:type_name -> immudb.schema.Tx
	33,  // 32: immudb.schema.VerifiableTx.dualProof:type_name -> immudb.schema.DualProof
	28,  // 33: immudb.schema.VerifiableTx.signature:type_name -> immudb.schema.Signature
	35,  // 34: immudb.schema.VerifiableTxV2.tx:type_name -> immudb.schema.Tx
	34,  // 35: immudb.schema.VerifiableTxV2.dualProof:type_name -> immudb.schema.DualProofV2
	28,  // 36: immudb.schema.VerifiableTxV2.signature:type_name -> immudb.schema.Signature
	18,  // 37: immudb.schema.VerifiableEntry.entry:type_name -> immudb.schema.Entry
	39,  // 38: immudb.schema.VerifiableEntry.verifiableTx:type_name -> immudb.schema.VerifiableTx
	42,  // 39: immudb.schema.VerifiableEntry.inclusionProof:type_name -> immudb.schema.InclusionProof
	17,  // 40: immudb.schema.SetRequest.KVs:type_name -> immudb.schema.KeyValue
	16,  // 41: immudb.schema.SetRequest.preconditions:type_name -> immudb.schema.Precondition
	43,  // 42: immudb.schema.VerifiableSetRequest.setRequest:type_name -> immudb.schema.SetRequest
	44,  // 43: immudb.schema.VerifiableGetRequest.keyRequest:type_name -> immudb.schema.KeyRequest
	28,  // 44: immudb.schema.ImmutableState.signature:type_name -> immudb.schema.Signature
	16,  // 45: immudb.schema.ReferenceRequest.preconditions:type_name -> immudb.schema.Precondition
	54,  // 46: immudb.schema.VerifiableReferenceRequest.referenceRequest:type_name -> immudb.schema.ReferenceRequest
	57,  // 47: immudb.schema.ZScanRequest.minScore:type_name -> immudb.schema.Score
	57,  // 48: immudb.schema.ZScanRequest.maxScore:type_name -> immudb.schema.Score
	56,  // 49: immudb.schema.VerifiableZAddRequest.zAddRequest:type_name -> immudb.schema.ZAddRequest
	62,  // 50: immudb.schema.TxRequest.entriesSpec:type_name -> immudb.schema.EntriesSpec
	63,  // 51: immudb.schema.EntriesSpec.kvEntriesSpec:type_name -> immudb.schema.EntryTypeSpec
	63,  // 52: immudb.schema.EntriesSpec.zEntriesSpec:type_name -> immudb.schema.EntryTypeSpec
	63,  // 53: immudb.schema.EntriesSpec.sqlEntriesSpec:type_name -> immudb.schema.EntryTypeSpec
	0,   // 54: immudb.schema.EntryTypeSpec.action:type_name -> immudb.schema.EntryTypeAction
	62,  // 55: immudb.schema.VerifiableTxRequest.entriesSpec:type_name -> immudb.schema.EntriesSpec
	62,  // 56: immudb.schema.TxScanRequest.entriesSpec:type_name -> immudb.schema.EntriesSpec
	35,  // 57: immudb.schema.TxList.txs:type_name -> immudb.schema.Tx
	68,  // 58: immudb.schema.ExportTxRequest.replicaState:type_name -> immudb.schema.ReplicaState
	83,  // 59: immudb.schema.CreateDatabaseRequest.settings:type_name -> immudb.schema.DatabaseNullableSettings
	83,  // 60: immudb.schema.CreateDatabaseResponse.settings:type_name -> immudb.schema.DatabaseNullableSettings
	83,  // 61: immudb.schema.UpdateDatabaseRequest.settings:type_name -> immudb.schema.DatabaseNullableSettings
	83,  // 62: immudb.schema.UpdateDatabaseResponse.settings:type_name -> immudb.schema.DatabaseNullableSettings
	83,  // 63: immudb.schema.DatabaseSettingsResponse.settings:type_name -> immudb.schema.DatabaseNullableSettings
	84,  // 64: immudb.schema.DatabaseNullableSettings.replicationSettings:type_name -> immudb.schema.ReplicationNullableSettings
	77,  // 65: immudb.schema.DatabaseNullableSettings.fileSize:type_name -> immudb.schema.NullableUint32
	77,  // 66: immudb.schema.DatabaseNullableSettings.maxKeyLen:type_name -> immudb.schema.NullableUint32
	77,  // 67: immudb.schema.DatabaseNullableSettings.maxValueLen:type_name -> immudb.schema.NullableUint32
	77,  // 68: immudb.schema.DatabaseNullableSettings.maxTxEntries:type_name -> immudb.schema.NullableUint32
	80,  // 69: immudb.schema.DatabaseNullableSettings.excludeCommitTime:type_name -> immudb.schema.NullableBool
	77,  // 70: immudb.schema.DatabaseNullableSettings.maxConcurrency:type_name -> immudb.schema.NullableUint32
	77,  // 71: immudb.schema.DatabaseNullableSettings.maxIOConcurrency:type_name -> immudb.schema.NullableUint32
	77,  // 72: immudb.schema.DatabaseNullableSettings.txLogCacheSize:type_name -> immudb.schema.NullableUint32
	77,  // 73: immudb.schema.DatabaseNullableSettings.vLogMaxOpenedFiles:type_name -> immudb.schema.NullableUint32
	77,  // 74: immudb.schema.DatabaseNullableSettings.txLogMaxOpenedFiles:type_name -> immudb.schema.NullableUint32
	77,  // 75: immudb.schema.DatabaseNullableSettings.commitLogMaxOpenedFiles:type_name -> immudb.schema.NullableUint32
	86,  // 76: immudb.schema.DatabaseNullableSettings.indexSettings:type_name -> immudb.schema.IndexNullableSettings
	77,  // 77: immudb.schema.DatabaseNullableSettings.writeTxHeaderVersion:type_name -> immudb.schema.NullableUint32
	80,  // 78: immudb.schema.DatabaseNullableSettings.autoload:type_name -> immudb.schema.NullableBool
	77,  // 79: immudb.schema.DatabaseNullableSettings.readTxPoolSize:type_name -> immudb.schema.NullableUint32
	82,  // 80: immudb.schema.DatabaseNullableSettings.syncFrequency:type_name -> immudb.schema.NullableMilliseconds
	77,  // 81: immudb.schema.DatabaseNullableSettings.writeBufferSize:type_name -> immudb.schema.NullableUint32
	87,  // 82: immudb.schema.DatabaseNullableSettings.ahtSettings:type_name -> immudb.schema.AHTNullableSettings
	77,  // 83: immudb.schema.DatabaseNullableSettings.maxActiveTransactions:type_name -> immudb.schema.NullableUint32
	77,  // 84: immudb.schema.DatabaseNullableSettings.mvccReadSetLimit:type_name -> immudb.schema.NullableUint32
	77,  // 85: immudb.schema.DatabaseNullableSettings.vLogCacheSize:type_name -> immudb.schema.NullableUint32
	85,  // 86: immudb.schema.DatabaseNullableSettings.truncationSettings:type_name -> immudb.schema.TruncationNullableSettings
	80,  // 87: immudb.schema.DatabaseNullableSettings.embeddedValues:type_name -> immudb.schema.NullableBool
	80,  // 88: immudb.schema.DatabaseNullableSettings.preallocFiles:type_name -> immudb.schema.NullableBool
	80,  // 89: immudb.schema.ReplicationNullableSettings.replica:type_name -> immudb.schema.NullableBool
	81,  // 90: immudb.schema.ReplicationNullableSettings.primaryDatabase:type_name -> immudb.schema.NullableString
	81,  // 91: immudb.schema.ReplicationNullableSettings.primaryHost:type_name -> immudb.schema.NullableString
	77,  // 92: immudb.schema.ReplicationNullableSettings.primaryPort:type_name -> immudb.schema.NullableUint32
	81,  // 93: immudb.schema.ReplicationNullableSettings.primaryUsername:type_name -> immudb.schema.NullableString
	81,  // 94: immudb.schema.ReplicationNullableSettings.primaryPassword:type_name -> immudb.schema.NullableString
	80,  // 95: immudb.schema.ReplicationNullableSettings.syncReplication:type_name -> immudb.schema.NullableBool
	77,  // 96: immudb.schema.ReplicationNullableSettings.syncAcks:type_name -> immudb.schema.NullableUint32
	77,  // 97: immudb.schema.ReplicationNullableSettings.prefetchTxBufferSize:type_name -> immudb.schema.NullableUint32
	77,  // 98: immudb.schema.ReplicationNullableSettings.replicationCommitConcurrency:type_name -> immudb.schema.NullableUint32
	80,  // 99: immudb.schema.ReplicationNullableSettings.allowTxDiscarding:type_name -> immudb.schema.NullableBool
	80,  // 100: immudb.schema.ReplicationNullableSettings.skipIntegrityCheck:type_name -> immudb.schema.NullableBool
	80,  // 101: immudb.schema.ReplicationNullableSettings.waitForIndexing:type_name -> immudb.schema.NullableBool
	82,  // 102: immudb.schema.TruncationNullableSettings.retentionPeriod:type_name -> immudb.schema.NullableMilliseconds
	82,  // 103: immudb.schema.TruncationNullableSettings.truncationFrequency:type_name -> immudb.schema.NullableMilliseconds
	77,  // 104: immudb.schema.IndexNullableSettings.flushThreshold:type_name -> immudb.schema.NullableUint32
	77,  // 105: immudb.schema.IndexNullableSettings.syncThreshold:type_name -> immudb.schema.NullableUint32
	77,  // 106: immudb.schema.IndexNullableSettings.cacheSize:type_name -> immudb.schema.NullableUint32
	77,  // 107: immudb.schema.IndexNullableSettings.maxNodeSize:type_name -> immudb.schema.NullableUint32
	77,  // 108: immudb.schema.IndexNullableSettings.maxActiveSnapshots:type_name -> immudb.schema.NullableUint32
	78,  // 109: immudb.schema.IndexNullableSettings.renewSnapRootAfter:type_name -> immudb.schema.NullableUint64
	77,  // 110: immudb.schema.IndexNullableSettings.compactionThld:type_name -> immudb.schema.NullableUint32
	77,  // 111: immudb.schema.IndexNullableSettings.delayDuringCompaction:type_name -> immudb.schema.NullableUint32
	77,  // 112: immudb.schema.IndexNullableSettings.nodesLogMaxOpenedFiles:type_name -> immudb.schema.NullableUint32
	77,  // 113: immudb.schema.IndexNullableSettings.historyLogMaxOpenedFiles:type_name -> immudb.schema.NullableUint32
	77,  // 114: immudb.schema.IndexNullableSettings.commitLogMaxOpenedFiles:type_name -> immudb.schema.NullableUint32
	77,  // 115: immudb.schema.IndexNullableSettings.flushBufferSize:type_name -> immudb.schema.NullableUint32
	79,  // 116: immudb.schema.IndexNullableSettings.cleanupPercentage:type_name -> immudb.schema.NullableFloat
	77,  // 117: immudb.schema.IndexNullableSettings.maxBulkSize:type_name -> immudb.schema.NullableUint32
	82,  // 118: immudb.schema.IndexNullableSettings.bulkPreparationTimeout:type_name -> immudb.schema.NullableMilliseconds
	77,  // 119: immudb.schema.AHTNullableSettings.syncThreshold:type_name -> immudb.schema.NullableUint32
	77,  // 120: immudb.schema.AHTNullableSettings.writeBufferSize:type_name -> immudb.schema.NullableUint32
	118, // 121: immudb.schema.SQLGetRequest.pkValues:type_name -> immudb.schema.SQLValue
	97,  // 122: immudb.schema.VerifiableSQLGetRequest.sqlGetRequest:type_name -> immudb.schema.SQLGetRequest
	37,  // 123: immudb.schema.SQLEntry.metadata:type_name -> immudb.schema.KVMetadata
	99,  // 124: immudb.schema.VerifiableSQLEntry.sqlEntry:type_name -> immudb.schema.SQLEntry
	39,  // 125: immudb.schema.VerifiableSQLEntry.verifiableTx:type_name -> immudb.schema.VerifiableTx
	42,  // 126: immudb.schema.VerifiableSQLEntry.inclusionProof:type_name -> immudb.schema.InclusionProof
	129, // 127: immudb.schema.VerifiableSQLEntry.ColNamesById:type_name -> immudb.schema.VerifiableSQLEntry.ColNamesByIdEntry
	130, // 128: immudb.schema.VerifiableSQLEntry.ColIdsByName:type_name -> immudb.schema.VerifiableSQLEntry.ColIdsByNameEntry
	131, // 129: immudb.schema.VerifiableSQLEntry.ColTypesById:type_name -> immudb.schema.VerifiableSQLEntry.ColTypesByIdEntry
	132, // 130: immudb.schema.VerifiableSQLEntry.ColLenById:type_name -> immudb.schema.VerifiableSQLEntry.ColLenByIdEntry
	1,   // 131: immudb.schema.ChangePermissionRequest.action:type_name -> immudb.schema.PermissionAction
	69,  // 132: immudb.schema.DatabaseListResponse.databases:type_name -> immudb.schema.Database
	107, // 133: immudb.schema.DatabaseListResponseV2.databases:type_name -> immudb.schema.DatabaseWithSettings
	83,  // 134: immudb.schema.DatabaseWithSettings.settings:type_name -> immudb.schema.DatabaseNullableSettings
	133, // 135: immudb.schema.Chunk.metadata:type_name -> immudb.schema.Chunk.MetadataEntry
	112, // 136: immudb.schema.SQLExecRequest.params:type_name -> immudb.schema.NamedParam
	112, // 137: immudb.schema.SQLQueryRequest.params:type_name -> immudb.schema.NamedParam
	118, // 138: immudb.schema.NamedParam.value:type_name -> immudb.schema.SQLValue
	114, // 139: immudb.schema.SQLExecResult.txs:type_name -> immudb.schema.CommittedSQLTx
	29,  // 140: immudb.schema.CommittedSQLTx.header:type_name -> immudb.schema.TxHeader
	134, // 141: immudb.schema.CommittedSQLTx.lastInsertedPKs:type_name -> immudb.schema.CommittedSQLTx.LastInsertedPKsEntry
	135, // 142: immudb.schema.CommittedSQLTx.firstInsertedPKs:type_name -> immudb.schema.CommittedSQLTx.FirstInsertedPKsEntry
	116, // 143: immudb.schema.SQLQueryResult.columns:type_name -> immudb.schema.Column
	117, // 144: immudb.schema.SQLQueryResult.rows:type_name -> immudb.schema.Row
	118, // 145: immudb.schema.Row.values:type_name -> immudb.schema.SQLValue
	136, // 146: immudb.schema.SQLValue.null:type_name -> google.protobuf.NullValue
	2,   // 147: immudb.schema.NewTxRequest.mode:type_name -> immudb.schema.TxMode
	78,  // 148: immudb.schema.NewTxRequest.snapshotMustIncludeTxID:type_name -> immudb.schema.NullableUint64
	82,  // 149: immudb.schema.NewTxRequest.snapshotRenewalPeriod:type_name -> immudb.schema.NullableMilliseconds
	118, // 150: immudb.schema.CommittedSQLTx.LastInsertedPKsEntry.value:type_name -> immudb.schema.SQLValue
	118, // 151: immudb.schema.CommittedSQLTx.FirstInsertedPKsEntry.value:type_name -> immudb.schema.SQLValue
	137, // 152: immudb.schema.ImmuService.ListUsers:input_type -> google.protobuf.Empty
	7,   // 153: immudb.schema.ImmuService.CreateUser:input_type -> immudb.schema.CreateUserRequest
	9,   // 154: immudb.schema.ImmuService.ChangePassword:input_type -> immudb.schema.ChangePasswordRequest
	102, // 155: immudb.schema.ImmuService.ChangePermission:input_type -> immudb.schema.ChangePermissionRequest
	103, // 156: immudb.schema.ImmuService.SetActiveUser:input_type -> immudb.schema.SetActiveUserRequest
	12,  // 157: immudb.schema.ImmuService.UpdateAuthConfig:input_type -> immudb.schema.AuthConfig
	13,  // 158: immudb.schema.ImmuService.UpdateMTLSConfig:input_type -> immudb.schema.MTLSConfig
	14,  // 159: immudb.schema.ImmuService.OpenSession:input_type -> immudb.schema.OpenSessionRequest
	137, // 160: immudb.schema.ImmuService.CloseSession:input_type -> google.protobuf.Empty
	137, // 161: immudb.schema.ImmuService.KeepAlive:input_type -> google.protobuf.Empty
	119, // 162: immudb.schema.ImmuService.NewTx:input_type -> immudb.schema.NewTxRequest
	137, // 163: immudb.schema.ImmuService.Commit:input_type -> google.protobuf.Empty
	137, // 164: immudb.schema.ImmuService.Rollback:input_type -> google.protobuf.Empty
	110, // 165: immudb.schema.ImmuService.TxSQLExec:input_type -> immudb.schema.SQLExecRequest
	111, // 166: immudb.schema.ImmuService.TxSQLQuery:input_type -> immudb.schema.SQLQueryRequest
	10,  // 167: immudb.schema.ImmuService.Login:input_type -> immudb.schema.LoginRequest
	137, // 168: immudb.schema.ImmuService.Logout:input_type -> google.protobuf.Empty
	43,  // 169: immudb.schema.ImmuService.Set:input_type -> immudb.schema.SetRequest
	47,  // 170: immudb.schema.ImmuService.VerifiableSet:input_type -> immudb.schema.VerifiableSetRequest
	44,  // 171: immudb.schema.ImmuService.Get:input_type -> immudb.schema.KeyRequest
	48,  // 172: immudb.schema.ImmuService.VerifiableGet:input_type -> immudb.schema.VerifiableGetRequest
	46,  // 173: immudb.schema.ImmuService.Delete:input_type -> immudb.schema.DeleteKeysRequest
	45,  // 174: immudb.schema.ImmuService.GetAll:input_type -> immudb.schema.KeyListRequest
	21,  // 175: immudb.schema.ImmuService.ExecAll:input_type -> immudb.schema.ExecAllRequest
	25,  // 176: immudb.schema.ImmuService.Scan:input_type -> immudb.schema.ScanRequest
	26,  // 177: immudb.schema.ImmuService.Count:input_type -> immudb.schema.KeyPrefix
	137, // 178: immudb.schema.ImmuService.CountAll:input_type -> google.protobuf.Empty
	61,  // 179: immudb.schema.ImmuService.TxById:input_type -> immudb.schema.TxRequest
	64,  // 180: immudb.schema.ImmuService.VerifiableTxById:input_type -> immudb.schema.VerifiableTxRequest
	65,  // 181: immudb.schema.ImmuService.TxScan:input_type -> immudb.schema.TxScanRequest
	59,  // 182: immudb.schema.ImmuService.History:input_type -> immudb.schema.HistoryRequest
	49,  // 183: immudb.schema.ImmuService.ServerInfo:input_type -> immudb.schema.ServerInfoRequest
	137, // 184: immudb.schema.ImmuService.Health:input_type -> google.protobuf.Empty
	137, // 185: immudb.schema.ImmuService.DatabaseHealth:input_type -> google.protobuf.Empty
	137, // 186: immudb.schema.ImmuService.CurrentState:input_type -> google.protobuf.Empty
	54,  // 187: immudb.schema.ImmuService.SetReference:input_type -> immudb.schema.ReferenceRequest
	55,  // 188: immudb.schema.ImmuService.VerifiableSetReference:input_type -> immudb.schema.VerifiableReferenceRequest
	56,  // 189: immudb.schema.ImmuService.ZAdd:input_type -> immudb.schema.ZAddRequest
	60,  // 190: immudb.schema.ImmuService.VerifiableZAdd:input_type -> immudb.schema.VerifiableZAddRequest
	58,  // 191: immudb.schema.ImmuService.ZScan:input_type -> immudb.schema.ZScanRequest
	69,  // 192: immudb.schema.ImmuService.CreateDatabase:input_type -> immudb.schema.Database
	70,  // 193: immudb.schema.ImmuService.CreateDatabaseWith:input_type -> immudb.schema.DatabaseSettings
	71,  // 194: immudb.schema.ImmuService.CreateDatabaseV2:input_type -> immudb.schema.CreateDatabaseRequest
	88,  // 195: immudb.schema.ImmuService.LoadDatabase:input_type -> immudb.schema.LoadDatabaseRequest
	90,  // 196: immudb.schema.ImmuService.UnloadDatabase:input_type -> immudb.schema.UnloadDatabaseRequest
	92,  // 197: immudb.schema.ImmuService.DeleteDatabase:input_type -> immudb.schema.DeleteDatabaseRequest
	137, // 198: immudb.schema.ImmuService.DatabaseList:input_type -> google.protobuf.Empty
	105, // 199: immudb.schema.ImmuService.DatabaseListV2:input_type -> immudb.schema.DatabaseListRequestV2
	69,  // 200: immudb.schema.ImmuService.UseDatabase:input_type -> immudb.schema.Database
	70,  // 201: immudb.schema.ImmuService.UpdateDatabase:input_type -> immudb.schema.DatabaseSettings
	73,  // 202: immudb.schema.ImmuService.UpdateDatabaseV2:input_type -> immudb.schema.UpdateDatabaseRequest
	137, // 203: immudb.schema.ImmuService.GetDatabaseSettings:input_type -> google.protobuf.Empty
	75,  // 204: immudb.schema.ImmuService.GetDatabaseSettingsV2:input_type -> immudb.schema.DatabaseSettingsRequest
	94,  // 205: immudb.schema.ImmuService.FlushIndex:input_type -> immudb.schema.FlushIndexRequest
	137, // 206: immudb.schema.ImmuService.CompactIndex:input_type -> google.protobuf.Empty
	44,  // 207: immudb.schema.ImmuService.streamGet:input_type -> immudb.schema.KeyRequest
	108, // 208: immudb.schema.ImmuService.streamSet:input_type -> immudb.schema.Chunk
	48,  // 209: immudb.schema.ImmuService.streamVerifiableGet:input_type -> immudb.schema.VerifiableGetRequest
	108, // 210: immudb.schema.ImmuService.streamVerifiableSet:input_type -> immudb.schema.Chunk
	25,  // 211: immudb.schema.ImmuService.streamScan:input_type -> immudb.schema.ScanRequest
	58,  // 212: immudb.schema.ImmuService.streamZScan:input_type -> immudb.schema.ZScanRequest
	59,  // 213: immudb.schema.ImmuService.streamHistory:input_type -> immudb.schema.HistoryRequest
	108, // 214: immudb.schema.ImmuService.streamExecAll:input_type -> immudb.schema.Chunk
	67,  // 215: immudb.schema.ImmuService.exportTx:input_type -> immudb.schema.ExportTxRequest
	108, // 216: immudb.schema.ImmuService.replicateTx:input_type -> immudb.schema.Chunk
	67,  // 217: immudb.schema.ImmuService.streamExportTx:input_type -> immudb.schema.ExportTxRequest
	110, // 218: immudb.schema.ImmuService.SQLExec:input_type -> immudb.schema.SQLExecRequest
	111, // 219: immudb.schema.ImmuService.SQLQuery:input_type -> immudb.schema.SQLQueryRequest
	137, // 220: immudb.schema.ImmuService.ListTables:input_type -> google.protobuf.Empty
	96,  // 221: immudb.schema.ImmuService.DescribeTable:input_type -> immudb.schema.Table
	98,  // 222: immudb.schema.ImmuService.VerifiableSQLGet:input_type -> immudb.schema.VerifiableSQLGetRequest
	124, // 223: immudb.schema.ImmuService.TruncateDatabase:input_type -> immudb.schema.TruncateDatabaseRequest
	6,   // 224: immudb.schema.ImmuService.ListUsers:output_type -> immudb.schema.UserList
	137, // 225: immudb.schema.ImmuService.CreateUser:output_type -> google.protobuf.Empty
	137, // 226: immudb.schema.ImmuService.ChangePassword:output_type -> google.protobuf.Empty
	137, // 227: immudb.schema.ImmuService.ChangePermission:output_type -> google.protobuf.Empty
	137, // 228: immudb.schema.ImmuService.SetActiveUser:output_type -> google.protobuf.Empty
	137, // 229: immudb.schema.ImmuService.UpdateAuthConfig:output_type -> google.protobuf.Empty
	137, // 230: immudb.schema.ImmuService.UpdateMTLSConfig:output_type -> google.protobuf.Empty
	15,  // 231: immudb.schema.ImmuService.OpenSession:output_type -> immudb.schema.OpenSessionResponse
	137, // 232: immudb.schema.ImmuService.CloseSession:output_type -> google.protobuf.Empty
	137, // 233: immudb.schema.ImmuService.KeepAlive:output_type -> google.protobuf.Empty
	120, // 234: immudb.schema.ImmuService.NewTx:output_type -> immudb.schema.NewTxResponse
	114, // 235: immudb.schema.ImmuService.Commit:output_type -> immudb.schema.CommittedSQLTx
	137, // 236: immudb.schema.ImmuService.Rollback:output_type -> google.protobuf.Empty
	137, // 237: immudb.schema.ImmuService.TxSQLExec:output_type -> google.protobuf.Empty
	115, // 238: immudb.schema.ImmuService.TxSQLQuery:output_type -> immudb.schema.SQLQueryResult
	11,  // 239: immudb.schema.ImmuService.Login:output_type -> immudb.schema.LoginResponse
	137, // 240: immudb.schema.ImmuService.Logout:output_type -> google.protobuf.Empty
	29,  // 241: immudb.schema.ImmuService.Set:output_type -> immudb.schema.TxHeader
	39,  // 242: immudb.schema.ImmuService.VerifiableSet:output_type -> immudb.schema.VerifiableTx
	18,  // 243: immudb.schema.ImmuService.Get:output_type -> immudb.schema.Entry
	41,  // 244: immudb.schema.ImmuService.VerifiableGet:output_type -> immudb.schema.VerifiableEntry
	29,  // 245: immudb.schema.ImmuService.Delete:output_type -> immudb.schema.TxHeader
	22,  // 246: immudb.schema.ImmuService.GetAll:output_type -> immudb.schema.Entries
	29,  // 247: immudb.schema.ImmuService.ExecAll:output_type -> immudb.schema.TxHeader
	22,  // 248: immudb.schema.ImmuService.Scan:output_type -> immudb.schema.Entries
	27,  // 249: immudb.schema.ImmuService.Count:output_type -> immudb.schema.EntryCount
	27,  // 250: immudb.schema.ImmuService.CountAll:output_type -> immudb.schema.EntryCount
	35,  // 251: immudb.schema.ImmuService.TxById:output_type -> immudb.schema.Tx
	39,  // 252: immudb.schema.ImmuService.VerifiableTxById:output_type -> immudb.schema.VerifiableTx
	66,  // 253: immudb.schema.ImmuService.TxScan:output_type -> immudb.schema.TxList
	22,  // 254: immudb.schema.ImmuService.History:output_type -> immudb.schema.Entries
	50,  // 255: immudb.schema.ImmuService.ServerInfo:output_type -> immudb.schema.ServerInfoResponse
	51,  // 256: immudb.schema.ImmuService.Health:output_type -> immudb.schema.HealthResponse
	52,  // 257: immudb.schema.ImmuService.DatabaseHealth:output_type -> immudb.schema.DatabaseHealthResponse
	53,  // 258: immudb.schema.ImmuService.CurrentState:output_type -> immudb.schema.ImmutableState
	29,  // 259: immudb.schema.ImmuService.SetReference:output_type -> immudb.schema.TxHeader
	39,  // 260: immudb.schema.ImmuService.VerifiableSetReference:output_type -> immudb.schema.VerifiableTx
	29,  // 261: immudb.schema.ImmuService.ZAdd:output_type -> immudb.schema.TxHeader
	39,  // 262: immudb.schema.ImmuService.VerifiableZAdd:output_type -> immudb.schema.VerifiableTx
	24,  // 263: immudb.schema.ImmuService.ZScan:output_type -> immudb.schema.ZEntries
	137, // 264: immudb.schema.ImmuService.CreateDatabase:output_type -> google.protobuf.Empty
	137, // 265: immudb.schema.ImmuService.CreateDatabaseWith:output_type -> google.protobuf.Empty
	72,  // 266: immudb.schema.ImmuService.CreateDatabaseV2:output_type -> immudb.schema.CreateDatabaseResponse
	89,  // 267: immudb.schema.ImmuService.LoadDatabase:output_type -> immudb.schema.LoadDatabaseResponse
	91,  // 268: immudb.schema.ImmuService.UnloadDatabase:output_type -> immudb.schema.UnloadDatabaseResponse
	93,  // 269: immudb.schema.ImmuService.DeleteDatabase:output_type -> immudb.schema.DeleteDatabaseResponse
	104, // 270: immudb.schema.ImmuService.DatabaseList:output_type -> immudb.schema.DatabaseListResponse
	106, // 271: immudb.schema.ImmuService.DatabaseListV2:output_type -> immudb.schema.DatabaseListResponseV2
	101, // 272: immudb.schema.ImmuService.UseDatabase:output_type -> immudb.schema.UseDatabaseReply
	137, // 273: immudb.schema.ImmuService.UpdateDatabase:output_type -> google.protobuf.Empty
	74,  // 274: immudb.schema.ImmuService.UpdateDatabaseV2:output_type -> immudb.schema.UpdateDatabaseResponse
	70,  // 275: immudb.schema.ImmuService.GetDatabaseSettings:output_type -> immudb.schema.DatabaseSettings
	76,  // 276: immudb.schema.ImmuService.GetDatabaseSettingsV2:output_type -> immudb.schema.DatabaseSettingsResponse
	95,  // 277: immudb.schema.ImmuService.FlushIndex:output_type -> immudb.schema.FlushIndexResponse
	137, // 278: immudb.schema.ImmuService.CompactIndex:output_type -> google.protobuf.Empty
	108, // 279: immudb.schema.ImmuService.streamGet:output_type -> immudb.schema.Chunk
	29,  // 280: immudb.schema.ImmuService.streamSet:output_type -> immudb.schema.TxHeader
	108, // 281: immudb.schema.ImmuService.streamVerifiableGet:output_type -> immudb.schema.Chunk
	39,  // 282: immudb.schema.ImmuService.streamVerifiableSet:output_type -> immudb.schema.VerifiableTx
	108, // 283: immudb.schema.ImmuService.streamScan:output_type -> immudb.schema.Chunk
	108, // 284: immudb.schema.ImmuService.streamZScan:output_type -> immudb.schema.Chunk
	108, // 285: immudb.schema.ImmuService.streamHistory:output_type -> immudb.schema.Chunk
	29,  // 286: immudb.schema.ImmuService.streamExecAll:output_type -> immudb.schema.TxHeader
	108, // 287: immudb.schema.ImmuService.exportTx:output_type -> immudb.schema.Chunk
	29,  // 288: immudb.schema.ImmuService.replicateTx:output_type -> immudb.schema.TxHeader
	108, // 289: immudb.schema.ImmuService.streamExportTx:output_type -> immudb.schema.Chunk
	113, // 290: immudb.schema.ImmuService.SQLExec:output_type -> immudb.schema.SQLExecResult
	115, // 291: immudb.schema.ImmuService.SQLQuery:output_type -> immudb.schema.SQLQueryResult
	115, // 292: immudb.schema.ImmuService.ListTables:output_type -> immudb.schema.SQLQueryResult
	115, // 293: immudb.schema.ImmuService.DescribeTable:output_type -> immudb.schema.SQLQueryResult
	100, // 294: immudb.schema.ImmuService.VerifiableSQLGet:output_type -> immudb.schema.VerifiableSQLEntry
	125, // 295: immudb.schema.ImmuService.TruncateDatabase:output_type -> immudb.schema.TruncateDatabaseResponse
	224, // [224:296] is the sub-list for method output_type
	152, // [152:224] is the sub-list for method input_type
	152, // [152:152] is the sub-list for extension type_name
	152, // [152:152] is the sub-list for extension extendee
	0,   // [0:152] is the sub-list for field type_name
}

func init() { file_schema_proto_init() }
func file_schema_proto_init() {
	if File_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Op); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearAdvanceProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DualProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DualProofV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expiration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableTxV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InclusionProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmutableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableZAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntriesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryTypeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullableUint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullableUint64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullableFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullableBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullableString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullableMilliseconds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseNullableSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationNullableSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncationNullableSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexNullableSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AHTNullableSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnloadDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnloadDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableSQLGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableSQLEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseDatabaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseListRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseListResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseWithSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLExecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommittedSQLTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition_KeyMustExistPrecondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition_KeyMustNotExistPrecondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Precondition_KeyNotModifiedAfterTXPrecondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schema_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Precondition_KeyMustExist)(nil),
		(*Precondition_KeyMustNotExist)(nil),
		(*Precondition_KeyNotModifiedAfterTX)(nil),
	}
	file_schema_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Op_Kv)(nil),
		(*Op_ZAdd)(nil),
		(*Op_Ref)(nil),
	}
	file_schema_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*SQLValue_Null)(nil),
		(*SQLValue_N)(nil),
		(*SQLValue_S)(nil),
		(*SQLValue_B)(nil),
		(*SQLValue_Bs)(nil),
		(*SQLValue_Ts)(nil),
		(*SQLValue_F)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   133,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schema_proto_goTypes,
		DependencyIndexes: file_schema_proto_depIdxs,
		EnumInfos:         file_schema_proto_enumTypes,
		MessageInfos:      file_schema_proto_msgTypes,
	}.Build()
	File_schema_proto = out.File
	file_schema_proto_rawDesc = nil
	file_schema_proto_goTypes = nil
	file_schema_proto_depIdxs = nil
}
