// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

package schema

import (
	context "context"
	fmt "fmt"
	pb "github.com/dgraph-io/badger/v2/pb"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Key struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CreateUserRequest struct {
	User                 []byte   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password             []byte   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUserRequest) Reset()         { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()    {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}

func (m *CreateUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateUserRequest.Unmarshal(m, b)
}
func (m *CreateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateUserRequest.Marshal(b, m, deterministic)
}
func (m *CreateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserRequest.Merge(m, src)
}
func (m *CreateUserRequest) XXX_Size() int {
	return xxx_messageInfo_CreateUserRequest.Size(m)
}
func (m *CreateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserRequest proto.InternalMessageInfo

func (m *CreateUserRequest) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateUserRequest) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

type CreateUserResponse struct {
	User                 []byte   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUserResponse) Reset()         { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()    {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{2}
}

func (m *CreateUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateUserResponse.Unmarshal(m, b)
}
func (m *CreateUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateUserResponse.Marshal(b, m, deterministic)
}
func (m *CreateUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserResponse.Merge(m, src)
}
func (m *CreateUserResponse) XXX_Size() int {
	return xxx_messageInfo_CreateUserResponse.Size(m)
}
func (m *CreateUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserResponse proto.InternalMessageInfo

func (m *CreateUserResponse) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

type DeleteUserRequest struct {
	User                 []byte   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteUserRequest) Reset()         { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()    {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{3}
}

func (m *DeleteUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteUserRequest.Unmarshal(m, b)
}
func (m *DeleteUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteUserRequest.Marshal(b, m, deterministic)
}
func (m *DeleteUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserRequest.Merge(m, src)
}
func (m *DeleteUserRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteUserRequest.Size(m)
}
func (m *DeleteUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserRequest proto.InternalMessageInfo

func (m *DeleteUserRequest) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

type ChangePasswordRequest struct {
	User                 []byte   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	OldPassword          []byte   `protobuf:"bytes,2,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`
	NewPassword          []byte   `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordRequest) Reset()         { *m = ChangePasswordRequest{} }
func (m *ChangePasswordRequest) String() string { return proto.CompactTextString(m) }
func (*ChangePasswordRequest) ProtoMessage()    {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{4}
}

func (m *ChangePasswordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordRequest.Unmarshal(m, b)
}
func (m *ChangePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordRequest.Marshal(b, m, deterministic)
}
func (m *ChangePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordRequest.Merge(m, src)
}
func (m *ChangePasswordRequest) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordRequest.Size(m)
}
func (m *ChangePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordRequest proto.InternalMessageInfo

func (m *ChangePasswordRequest) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ChangePasswordRequest) GetOldPassword() []byte {
	if m != nil {
		return m.OldPassword
	}
	return nil
}

func (m *ChangePasswordRequest) GetNewPassword() []byte {
	if m != nil {
		return m.NewPassword
	}
	return nil
}

type LoginRequest struct {
	User                 []byte   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password             []byte   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{5}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *LoginRequest) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

type LoginResponse struct {
	Token                []byte   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{6}
}

func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponse.Unmarshal(m, b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return xxx_messageInfo_LoginResponse.Size(m)
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type KeyValue struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{7}
}

func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type StructuredKeyValue struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                *Content `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StructuredKeyValue) Reset()         { *m = StructuredKeyValue{} }
func (m *StructuredKeyValue) String() string { return proto.CompactTextString(m) }
func (*StructuredKeyValue) ProtoMessage()    {}
func (*StructuredKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{8}
}

func (m *StructuredKeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredKeyValue.Unmarshal(m, b)
}
func (m *StructuredKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredKeyValue.Marshal(b, m, deterministic)
}
func (m *StructuredKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredKeyValue.Merge(m, src)
}
func (m *StructuredKeyValue) XXX_Size() int {
	return xxx_messageInfo_StructuredKeyValue.Size(m)
}
func (m *StructuredKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredKeyValue proto.InternalMessageInfo

func (m *StructuredKeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StructuredKeyValue) GetValue() *Content {
	if m != nil {
		return m.Value
	}
	return nil
}

type Content struct {
	Timestamp            uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{9}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Content) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Index struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Index) Reset()         { *m = Index{} }
func (m *Index) String() string { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()    {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{10}
}

func (m *Index) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Index.Unmarshal(m, b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Index.Marshal(b, m, deterministic)
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return xxx_messageInfo_Index.Size(m)
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

func (m *Index) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Item struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Index                uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{11}
}

func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Item) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Item) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type StructuredItem struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                *Content `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Index                uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StructuredItem) Reset()         { *m = StructuredItem{} }
func (m *StructuredItem) String() string { return proto.CompactTextString(m) }
func (*StructuredItem) ProtoMessage()    {}
func (*StructuredItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{12}
}

func (m *StructuredItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredItem.Unmarshal(m, b)
}
func (m *StructuredItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredItem.Marshal(b, m, deterministic)
}
func (m *StructuredItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredItem.Merge(m, src)
}
func (m *StructuredItem) XXX_Size() int {
	return xxx_messageInfo_StructuredItem.Size(m)
}
func (m *StructuredItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredItem.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredItem proto.InternalMessageInfo

func (m *StructuredItem) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StructuredItem) GetValue() *Content {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *StructuredItem) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type KVList struct {
	KVs                  []*KeyValue `protobuf:"bytes,1,rep,name=KVs,proto3" json:"KVs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KVList) Reset()         { *m = KVList{} }
func (m *KVList) String() string { return proto.CompactTextString(m) }
func (*KVList) ProtoMessage()    {}
func (*KVList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{13}
}

func (m *KVList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KVList.Unmarshal(m, b)
}
func (m *KVList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KVList.Marshal(b, m, deterministic)
}
func (m *KVList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVList.Merge(m, src)
}
func (m *KVList) XXX_Size() int {
	return xxx_messageInfo_KVList.Size(m)
}
func (m *KVList) XXX_DiscardUnknown() {
	xxx_messageInfo_KVList.DiscardUnknown(m)
}

var xxx_messageInfo_KVList proto.InternalMessageInfo

func (m *KVList) GetKVs() []*KeyValue {
	if m != nil {
		return m.KVs
	}
	return nil
}

type SKVList struct {
	SKVs                 []*StructuredKeyValue `protobuf:"bytes,1,rep,name=SKVs,proto3" json:"SKVs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SKVList) Reset()         { *m = SKVList{} }
func (m *SKVList) String() string { return proto.CompactTextString(m) }
func (*SKVList) ProtoMessage()    {}
func (*SKVList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{14}
}

func (m *SKVList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SKVList.Unmarshal(m, b)
}
func (m *SKVList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SKVList.Marshal(b, m, deterministic)
}
func (m *SKVList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SKVList.Merge(m, src)
}
func (m *SKVList) XXX_Size() int {
	return xxx_messageInfo_SKVList.Size(m)
}
func (m *SKVList) XXX_DiscardUnknown() {
	xxx_messageInfo_SKVList.DiscardUnknown(m)
}

var xxx_messageInfo_SKVList proto.InternalMessageInfo

func (m *SKVList) GetSKVs() []*StructuredKeyValue {
	if m != nil {
		return m.SKVs
	}
	return nil
}

type KeyList struct {
	Keys                 []*Key   `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyList) Reset()         { *m = KeyList{} }
func (m *KeyList) String() string { return proto.CompactTextString(m) }
func (*KeyList) ProtoMessage()    {}
func (*KeyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{15}
}

func (m *KeyList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyList.Unmarshal(m, b)
}
func (m *KeyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyList.Marshal(b, m, deterministic)
}
func (m *KeyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyList.Merge(m, src)
}
func (m *KeyList) XXX_Size() int {
	return xxx_messageInfo_KeyList.Size(m)
}
func (m *KeyList) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyList.DiscardUnknown(m)
}

var xxx_messageInfo_KeyList proto.InternalMessageInfo

func (m *KeyList) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ItemList struct {
	Items                []*Item  `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemList) Reset()         { *m = ItemList{} }
func (m *ItemList) String() string { return proto.CompactTextString(m) }
func (*ItemList) ProtoMessage()    {}
func (*ItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{16}
}

func (m *ItemList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemList.Unmarshal(m, b)
}
func (m *ItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemList.Marshal(b, m, deterministic)
}
func (m *ItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemList.Merge(m, src)
}
func (m *ItemList) XXX_Size() int {
	return xxx_messageInfo_ItemList.Size(m)
}
func (m *ItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemList.DiscardUnknown(m)
}

var xxx_messageInfo_ItemList proto.InternalMessageInfo

func (m *ItemList) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type StructuredItemList struct {
	Items                []*StructuredItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StructuredItemList) Reset()         { *m = StructuredItemList{} }
func (m *StructuredItemList) String() string { return proto.CompactTextString(m) }
func (*StructuredItemList) ProtoMessage()    {}
func (*StructuredItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{17}
}

func (m *StructuredItemList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredItemList.Unmarshal(m, b)
}
func (m *StructuredItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredItemList.Marshal(b, m, deterministic)
}
func (m *StructuredItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredItemList.Merge(m, src)
}
func (m *StructuredItemList) XXX_Size() int {
	return xxx_messageInfo_StructuredItemList.Size(m)
}
func (m *StructuredItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredItemList.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredItemList proto.InternalMessageInfo

func (m *StructuredItemList) GetItems() []*StructuredItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type Root struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Root                 []byte   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Root) Reset()         { *m = Root{} }
func (m *Root) String() string { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()    {}
func (*Root) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{18}
}

func (m *Root) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Root.Unmarshal(m, b)
}
func (m *Root) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Root.Marshal(b, m, deterministic)
}
func (m *Root) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Root.Merge(m, src)
}
func (m *Root) XXX_Size() int {
	return xxx_messageInfo_Root.Size(m)
}
func (m *Root) XXX_DiscardUnknown() {
	xxx_messageInfo_Root.DiscardUnknown(m)
}

var xxx_messageInfo_Root proto.InternalMessageInfo

func (m *Root) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Root) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type ScanOptions struct {
	Prefix               []byte   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Offset               []byte   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Reverse              bool     `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Deep                 bool     `protobuf:"varint,5,opt,name=deep,proto3" json:"deep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanOptions) Reset()         { *m = ScanOptions{} }
func (m *ScanOptions) String() string { return proto.CompactTextString(m) }
func (*ScanOptions) ProtoMessage()    {}
func (*ScanOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{19}
}

func (m *ScanOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanOptions.Unmarshal(m, b)
}
func (m *ScanOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanOptions.Marshal(b, m, deterministic)
}
func (m *ScanOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanOptions.Merge(m, src)
}
func (m *ScanOptions) XXX_Size() int {
	return xxx_messageInfo_ScanOptions.Size(m)
}
func (m *ScanOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ScanOptions proto.InternalMessageInfo

func (m *ScanOptions) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *ScanOptions) GetOffset() []byte {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ScanOptions) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ScanOptions) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func (m *ScanOptions) GetDeep() bool {
	if m != nil {
		return m.Deep
	}
	return false
}

type KeyPrefix struct {
	Prefix               []byte   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPrefix) Reset()         { *m = KeyPrefix{} }
func (m *KeyPrefix) String() string { return proto.CompactTextString(m) }
func (*KeyPrefix) ProtoMessage()    {}
func (*KeyPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{20}
}

func (m *KeyPrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyPrefix.Unmarshal(m, b)
}
func (m *KeyPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyPrefix.Marshal(b, m, deterministic)
}
func (m *KeyPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPrefix.Merge(m, src)
}
func (m *KeyPrefix) XXX_Size() int {
	return xxx_messageInfo_KeyPrefix.Size(m)
}
func (m *KeyPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPrefix proto.InternalMessageInfo

func (m *KeyPrefix) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

type ItemsCount struct {
	Count                uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemsCount) Reset()         { *m = ItemsCount{} }
func (m *ItemsCount) String() string { return proto.CompactTextString(m) }
func (*ItemsCount) ProtoMessage()    {}
func (*ItemsCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{21}
}

func (m *ItemsCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemsCount.Unmarshal(m, b)
}
func (m *ItemsCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemsCount.Marshal(b, m, deterministic)
}
func (m *ItemsCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemsCount.Merge(m, src)
}
func (m *ItemsCount) XXX_Size() int {
	return xxx_messageInfo_ItemsCount.Size(m)
}
func (m *ItemsCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemsCount.DiscardUnknown(m)
}

var xxx_messageInfo_ItemsCount proto.InternalMessageInfo

func (m *ItemsCount) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type InclusionProof struct {
	At                   uint64   `protobuf:"varint,1,opt,name=at,proto3" json:"at,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Root                 []byte   `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	Leaf                 []byte   `protobuf:"bytes,4,opt,name=leaf,proto3" json:"leaf,omitempty"`
	Path                 [][]byte `protobuf:"bytes,5,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InclusionProof) Reset()         { *m = InclusionProof{} }
func (m *InclusionProof) String() string { return proto.CompactTextString(m) }
func (*InclusionProof) ProtoMessage()    {}
func (*InclusionProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{22}
}

func (m *InclusionProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InclusionProof.Unmarshal(m, b)
}
func (m *InclusionProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InclusionProof.Marshal(b, m, deterministic)
}
func (m *InclusionProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InclusionProof.Merge(m, src)
}
func (m *InclusionProof) XXX_Size() int {
	return xxx_messageInfo_InclusionProof.Size(m)
}
func (m *InclusionProof) XXX_DiscardUnknown() {
	xxx_messageInfo_InclusionProof.DiscardUnknown(m)
}

var xxx_messageInfo_InclusionProof proto.InternalMessageInfo

func (m *InclusionProof) GetAt() uint64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *InclusionProof) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *InclusionProof) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *InclusionProof) GetLeaf() []byte {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *InclusionProof) GetPath() [][]byte {
	if m != nil {
		return m.Path
	}
	return nil
}

type ConsistencyProof struct {
	First                uint64   `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               uint64   `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
	FirstRoot            []byte   `protobuf:"bytes,3,opt,name=firstRoot,proto3" json:"firstRoot,omitempty"`
	SecondRoot           []byte   `protobuf:"bytes,4,opt,name=secondRoot,proto3" json:"secondRoot,omitempty"`
	Path                 [][]byte `protobuf:"bytes,5,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsistencyProof) Reset()         { *m = ConsistencyProof{} }
func (m *ConsistencyProof) String() string { return proto.CompactTextString(m) }
func (*ConsistencyProof) ProtoMessage()    {}
func (*ConsistencyProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{23}
}

func (m *ConsistencyProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsistencyProof.Unmarshal(m, b)
}
func (m *ConsistencyProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsistencyProof.Marshal(b, m, deterministic)
}
func (m *ConsistencyProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsistencyProof.Merge(m, src)
}
func (m *ConsistencyProof) XXX_Size() int {
	return xxx_messageInfo_ConsistencyProof.Size(m)
}
func (m *ConsistencyProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsistencyProof.DiscardUnknown(m)
}

var xxx_messageInfo_ConsistencyProof proto.InternalMessageInfo

func (m *ConsistencyProof) GetFirst() uint64 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *ConsistencyProof) GetSecond() uint64 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *ConsistencyProof) GetFirstRoot() []byte {
	if m != nil {
		return m.FirstRoot
	}
	return nil
}

func (m *ConsistencyProof) GetSecondRoot() []byte {
	if m != nil {
		return m.SecondRoot
	}
	return nil
}

func (m *ConsistencyProof) GetPath() [][]byte {
	if m != nil {
		return m.Path
	}
	return nil
}

type Proof struct {
	Leaf                 []byte   `protobuf:"bytes,1,opt,name=leaf,proto3" json:"leaf,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Root                 []byte   `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	At                   uint64   `protobuf:"varint,4,opt,name=at,proto3" json:"at,omitempty"`
	InclusionPath        [][]byte `protobuf:"bytes,5,rep,name=inclusionPath,proto3" json:"inclusionPath,omitempty"`
	ConsistencyPath      [][]byte `protobuf:"bytes,6,rep,name=consistencyPath,proto3" json:"consistencyPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{24}
}

func (m *Proof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proof.Unmarshal(m, b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return xxx_messageInfo_Proof.Size(m)
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetLeaf() []byte {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *Proof) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Proof) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Proof) GetAt() uint64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *Proof) GetInclusionPath() [][]byte {
	if m != nil {
		return m.InclusionPath
	}
	return nil
}

func (m *Proof) GetConsistencyPath() [][]byte {
	if m != nil {
		return m.ConsistencyPath
	}
	return nil
}

type SafeItem struct {
	Item                 *Item    `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Proof                *Proof   `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SafeItem) Reset()         { *m = SafeItem{} }
func (m *SafeItem) String() string { return proto.CompactTextString(m) }
func (*SafeItem) ProtoMessage()    {}
func (*SafeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{25}
}

func (m *SafeItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SafeItem.Unmarshal(m, b)
}
func (m *SafeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SafeItem.Marshal(b, m, deterministic)
}
func (m *SafeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SafeItem.Merge(m, src)
}
func (m *SafeItem) XXX_Size() int {
	return xxx_messageInfo_SafeItem.Size(m)
}
func (m *SafeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SafeItem.DiscardUnknown(m)
}

var xxx_messageInfo_SafeItem proto.InternalMessageInfo

func (m *SafeItem) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *SafeItem) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type SafeStructuredItem struct {
	Item                 *StructuredItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Proof                *Proof          `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SafeStructuredItem) Reset()         { *m = SafeStructuredItem{} }
func (m *SafeStructuredItem) String() string { return proto.CompactTextString(m) }
func (*SafeStructuredItem) ProtoMessage()    {}
func (*SafeStructuredItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{26}
}

func (m *SafeStructuredItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SafeStructuredItem.Unmarshal(m, b)
}
func (m *SafeStructuredItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SafeStructuredItem.Marshal(b, m, deterministic)
}
func (m *SafeStructuredItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SafeStructuredItem.Merge(m, src)
}
func (m *SafeStructuredItem) XXX_Size() int {
	return xxx_messageInfo_SafeStructuredItem.Size(m)
}
func (m *SafeStructuredItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SafeStructuredItem.DiscardUnknown(m)
}

var xxx_messageInfo_SafeStructuredItem proto.InternalMessageInfo

func (m *SafeStructuredItem) GetItem() *StructuredItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *SafeStructuredItem) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type SafeSetOptions struct {
	Kv                   *KeyValue `protobuf:"bytes,1,opt,name=kv,proto3" json:"kv,omitempty"`
	RootIndex            *Index    `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SafeSetOptions) Reset()         { *m = SafeSetOptions{} }
func (m *SafeSetOptions) String() string { return proto.CompactTextString(m) }
func (*SafeSetOptions) ProtoMessage()    {}
func (*SafeSetOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{27}
}

func (m *SafeSetOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SafeSetOptions.Unmarshal(m, b)
}
func (m *SafeSetOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SafeSetOptions.Marshal(b, m, deterministic)
}
func (m *SafeSetOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SafeSetOptions.Merge(m, src)
}
func (m *SafeSetOptions) XXX_Size() int {
	return xxx_messageInfo_SafeSetOptions.Size(m)
}
func (m *SafeSetOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SafeSetOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SafeSetOptions proto.InternalMessageInfo

func (m *SafeSetOptions) GetKv() *KeyValue {
	if m != nil {
		return m.Kv
	}
	return nil
}

func (m *SafeSetOptions) GetRootIndex() *Index {
	if m != nil {
		return m.RootIndex
	}
	return nil
}

type SafeSetSVOptions struct {
	Skv                  *StructuredKeyValue `protobuf:"bytes,1,opt,name=skv,proto3" json:"skv,omitempty"`
	RootIndex            *Index              `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SafeSetSVOptions) Reset()         { *m = SafeSetSVOptions{} }
func (m *SafeSetSVOptions) String() string { return proto.CompactTextString(m) }
func (*SafeSetSVOptions) ProtoMessage()    {}
func (*SafeSetSVOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{28}
}

func (m *SafeSetSVOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SafeSetSVOptions.Unmarshal(m, b)
}
func (m *SafeSetSVOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SafeSetSVOptions.Marshal(b, m, deterministic)
}
func (m *SafeSetSVOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SafeSetSVOptions.Merge(m, src)
}
func (m *SafeSetSVOptions) XXX_Size() int {
	return xxx_messageInfo_SafeSetSVOptions.Size(m)
}
func (m *SafeSetSVOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SafeSetSVOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SafeSetSVOptions proto.InternalMessageInfo

func (m *SafeSetSVOptions) GetSkv() *StructuredKeyValue {
	if m != nil {
		return m.Skv
	}
	return nil
}

func (m *SafeSetSVOptions) GetRootIndex() *Index {
	if m != nil {
		return m.RootIndex
	}
	return nil
}

type SafeGetOptions struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	RootIndex            *Index   `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SafeGetOptions) Reset()         { *m = SafeGetOptions{} }
func (m *SafeGetOptions) String() string { return proto.CompactTextString(m) }
func (*SafeGetOptions) ProtoMessage()    {}
func (*SafeGetOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{29}
}

func (m *SafeGetOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SafeGetOptions.Unmarshal(m, b)
}
func (m *SafeGetOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SafeGetOptions.Marshal(b, m, deterministic)
}
func (m *SafeGetOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SafeGetOptions.Merge(m, src)
}
func (m *SafeGetOptions) XXX_Size() int {
	return xxx_messageInfo_SafeGetOptions.Size(m)
}
func (m *SafeGetOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SafeGetOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SafeGetOptions proto.InternalMessageInfo

func (m *SafeGetOptions) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SafeGetOptions) GetRootIndex() *Index {
	if m != nil {
		return m.RootIndex
	}
	return nil
}

type SafeReferenceOptions struct {
	Ro                   *ReferenceOptions `protobuf:"bytes,1,opt,name=ro,proto3" json:"ro,omitempty"`
	RootIndex            *Index            `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SafeReferenceOptions) Reset()         { *m = SafeReferenceOptions{} }
func (m *SafeReferenceOptions) String() string { return proto.CompactTextString(m) }
func (*SafeReferenceOptions) ProtoMessage()    {}
func (*SafeReferenceOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{30}
}

func (m *SafeReferenceOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SafeReferenceOptions.Unmarshal(m, b)
}
func (m *SafeReferenceOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SafeReferenceOptions.Marshal(b, m, deterministic)
}
func (m *SafeReferenceOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SafeReferenceOptions.Merge(m, src)
}
func (m *SafeReferenceOptions) XXX_Size() int {
	return xxx_messageInfo_SafeReferenceOptions.Size(m)
}
func (m *SafeReferenceOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SafeReferenceOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SafeReferenceOptions proto.InternalMessageInfo

func (m *SafeReferenceOptions) GetRo() *ReferenceOptions {
	if m != nil {
		return m.Ro
	}
	return nil
}

func (m *SafeReferenceOptions) GetRootIndex() *Index {
	if m != nil {
		return m.RootIndex
	}
	return nil
}

type HealthResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{31}
}

func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (m *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(m, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type ReferenceOptions struct {
	Reference            []byte   `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReferenceOptions) Reset()         { *m = ReferenceOptions{} }
func (m *ReferenceOptions) String() string { return proto.CompactTextString(m) }
func (*ReferenceOptions) ProtoMessage()    {}
func (*ReferenceOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{32}
}

func (m *ReferenceOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceOptions.Unmarshal(m, b)
}
func (m *ReferenceOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceOptions.Marshal(b, m, deterministic)
}
func (m *ReferenceOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceOptions.Merge(m, src)
}
func (m *ReferenceOptions) XXX_Size() int {
	return xxx_messageInfo_ReferenceOptions.Size(m)
}
func (m *ReferenceOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceOptions proto.InternalMessageInfo

func (m *ReferenceOptions) GetReference() []byte {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *ReferenceOptions) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

//
//Why use double as score type?
//Because it is not purely about the storage size, but also use cases.
//64-bit floating point double gives a lot of flexibility and dynamic range, at the expense of having only 53-bits of integer.
type ZAddOptions struct {
	Set                  []byte   `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	Score                float64  `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Key                  []byte   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZAddOptions) Reset()         { *m = ZAddOptions{} }
func (m *ZAddOptions) String() string { return proto.CompactTextString(m) }
func (*ZAddOptions) ProtoMessage()    {}
func (*ZAddOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{33}
}

func (m *ZAddOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZAddOptions.Unmarshal(m, b)
}
func (m *ZAddOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZAddOptions.Marshal(b, m, deterministic)
}
func (m *ZAddOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZAddOptions.Merge(m, src)
}
func (m *ZAddOptions) XXX_Size() int {
	return xxx_messageInfo_ZAddOptions.Size(m)
}
func (m *ZAddOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ZAddOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ZAddOptions proto.InternalMessageInfo

func (m *ZAddOptions) GetSet() []byte {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *ZAddOptions) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ZAddOptions) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ZScanOptions struct {
	Set                  []byte   `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	Offset               []byte   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Reverse              bool     `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZScanOptions) Reset()         { *m = ZScanOptions{} }
func (m *ZScanOptions) String() string { return proto.CompactTextString(m) }
func (*ZScanOptions) ProtoMessage()    {}
func (*ZScanOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{34}
}

func (m *ZScanOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZScanOptions.Unmarshal(m, b)
}
func (m *ZScanOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZScanOptions.Marshal(b, m, deterministic)
}
func (m *ZScanOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZScanOptions.Merge(m, src)
}
func (m *ZScanOptions) XXX_Size() int {
	return xxx_messageInfo_ZScanOptions.Size(m)
}
func (m *ZScanOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ZScanOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ZScanOptions proto.InternalMessageInfo

func (m *ZScanOptions) GetSet() []byte {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *ZScanOptions) GetOffset() []byte {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ZScanOptions) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ZScanOptions) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

type IScanOptions struct {
	PageSize             uint64   `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNumber           uint64   `protobuf:"varint,2,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IScanOptions) Reset()         { *m = IScanOptions{} }
func (m *IScanOptions) String() string { return proto.CompactTextString(m) }
func (*IScanOptions) ProtoMessage()    {}
func (*IScanOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{35}
}

func (m *IScanOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IScanOptions.Unmarshal(m, b)
}
func (m *IScanOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IScanOptions.Marshal(b, m, deterministic)
}
func (m *IScanOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IScanOptions.Merge(m, src)
}
func (m *IScanOptions) XXX_Size() int {
	return xxx_messageInfo_IScanOptions.Size(m)
}
func (m *IScanOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_IScanOptions.DiscardUnknown(m)
}

var xxx_messageInfo_IScanOptions proto.InternalMessageInfo

func (m *IScanOptions) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *IScanOptions) GetPageNumber() uint64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

type Page struct {
	Items                []*Item  `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	More                 bool     `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{36}
}

func (m *Page) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Page.Unmarshal(m, b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Page.Marshal(b, m, deterministic)
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return xxx_messageInfo_Page.Size(m)
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Page) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

type SPage struct {
	Items                []*StructuredItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	PageNum              uint64            `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	More                 bool              `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SPage) Reset()         { *m = SPage{} }
func (m *SPage) String() string { return proto.CompactTextString(m) }
func (*SPage) ProtoMessage()    {}
func (*SPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{37}
}

func (m *SPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SPage.Unmarshal(m, b)
}
func (m *SPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SPage.Marshal(b, m, deterministic)
}
func (m *SPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPage.Merge(m, src)
}
func (m *SPage) XXX_Size() int {
	return xxx_messageInfo_SPage.Size(m)
}
func (m *SPage) XXX_DiscardUnknown() {
	xxx_messageInfo_SPage.DiscardUnknown(m)
}

var xxx_messageInfo_SPage proto.InternalMessageInfo

func (m *SPage) GetItems() []*StructuredItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SPage) GetPageNum() uint64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *SPage) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

type SafeZAddOptions struct {
	Zopts                *ZAddOptions `protobuf:"bytes,1,opt,name=zopts,proto3" json:"zopts,omitempty"`
	RootIndex            *Index       `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SafeZAddOptions) Reset()         { *m = SafeZAddOptions{} }
func (m *SafeZAddOptions) String() string { return proto.CompactTextString(m) }
func (*SafeZAddOptions) ProtoMessage()    {}
func (*SafeZAddOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{38}
}

func (m *SafeZAddOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SafeZAddOptions.Unmarshal(m, b)
}
func (m *SafeZAddOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SafeZAddOptions.Marshal(b, m, deterministic)
}
func (m *SafeZAddOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SafeZAddOptions.Merge(m, src)
}
func (m *SafeZAddOptions) XXX_Size() int {
	return xxx_messageInfo_SafeZAddOptions.Size(m)
}
func (m *SafeZAddOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SafeZAddOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SafeZAddOptions proto.InternalMessageInfo

func (m *SafeZAddOptions) GetZopts() *ZAddOptions {
	if m != nil {
		return m.Zopts
	}
	return nil
}

func (m *SafeZAddOptions) GetRootIndex() *Index {
	if m != nil {
		return m.RootIndex
	}
	return nil
}

func init() {
	proto.RegisterType((*Key)(nil), "immudb.schema.Key")
	proto.RegisterType((*CreateUserRequest)(nil), "immudb.schema.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "immudb.schema.CreateUserResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "immudb.schema.DeleteUserRequest")
	proto.RegisterType((*ChangePasswordRequest)(nil), "immudb.schema.ChangePasswordRequest")
	proto.RegisterType((*LoginRequest)(nil), "immudb.schema.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "immudb.schema.LoginResponse")
	proto.RegisterType((*KeyValue)(nil), "immudb.schema.KeyValue")
	proto.RegisterType((*StructuredKeyValue)(nil), "immudb.schema.StructuredKeyValue")
	proto.RegisterType((*Content)(nil), "immudb.schema.Content")
	proto.RegisterType((*Index)(nil), "immudb.schema.Index")
	proto.RegisterType((*Item)(nil), "immudb.schema.Item")
	proto.RegisterType((*StructuredItem)(nil), "immudb.schema.StructuredItem")
	proto.RegisterType((*KVList)(nil), "immudb.schema.KVList")
	proto.RegisterType((*SKVList)(nil), "immudb.schema.SKVList")
	proto.RegisterType((*KeyList)(nil), "immudb.schema.KeyList")
	proto.RegisterType((*ItemList)(nil), "immudb.schema.ItemList")
	proto.RegisterType((*StructuredItemList)(nil), "immudb.schema.StructuredItemList")
	proto.RegisterType((*Root)(nil), "immudb.schema.Root")
	proto.RegisterType((*ScanOptions)(nil), "immudb.schema.ScanOptions")
	proto.RegisterType((*KeyPrefix)(nil), "immudb.schema.KeyPrefix")
	proto.RegisterType((*ItemsCount)(nil), "immudb.schema.ItemsCount")
	proto.RegisterType((*InclusionProof)(nil), "immudb.schema.InclusionProof")
	proto.RegisterType((*ConsistencyProof)(nil), "immudb.schema.ConsistencyProof")
	proto.RegisterType((*Proof)(nil), "immudb.schema.Proof")
	proto.RegisterType((*SafeItem)(nil), "immudb.schema.SafeItem")
	proto.RegisterType((*SafeStructuredItem)(nil), "immudb.schema.SafeStructuredItem")
	proto.RegisterType((*SafeSetOptions)(nil), "immudb.schema.SafeSetOptions")
	proto.RegisterType((*SafeSetSVOptions)(nil), "immudb.schema.SafeSetSVOptions")
	proto.RegisterType((*SafeGetOptions)(nil), "immudb.schema.SafeGetOptions")
	proto.RegisterType((*SafeReferenceOptions)(nil), "immudb.schema.SafeReferenceOptions")
	proto.RegisterType((*HealthResponse)(nil), "immudb.schema.HealthResponse")
	proto.RegisterType((*ReferenceOptions)(nil), "immudb.schema.ReferenceOptions")
	proto.RegisterType((*ZAddOptions)(nil), "immudb.schema.ZAddOptions")
	proto.RegisterType((*ZScanOptions)(nil), "immudb.schema.ZScanOptions")
	proto.RegisterType((*IScanOptions)(nil), "immudb.schema.IScanOptions")
	proto.RegisterType((*Page)(nil), "immudb.schema.Page")
	proto.RegisterType((*SPage)(nil), "immudb.schema.SPage")
	proto.RegisterType((*SafeZAddOptions)(nil), "immudb.schema.SafeZAddOptions")
}

func init() {
	proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a)
}

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 1971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xe9, 0x6e, 0x1b, 0xc9,
	0x11, 0xe6, 0x29, 0x8a, 0x45, 0x49, 0xeb, 0xed, 0x78, 0x25, 0x2e, 0xad, 0xb5, 0xa9, 0xb6, 0x6c,
	0x29, 0x5a, 0x99, 0xb4, 0x65, 0x2c, 0x10, 0x18, 0x86, 0x11, 0x1d, 0x0b, 0x99, 0xd1, 0x26, 0x16,
	0x86, 0x1b, 0x2d, 0xa2, 0x20, 0x58, 0x0c, 0xc9, 0x26, 0x39, 0x4b, 0x72, 0x7a, 0x32, 0xd3, 0x23,
	0x99, 0x12, 0xfc, 0x23, 0x79, 0x04, 0xe7, 0x57, 0x1e, 0x20, 0xef, 0x13, 0x20, 0xaf, 0x90, 0x07,
	0x09, 0xfa, 0x98, 0x83, 0x73, 0x50, 0x07, 0xf2, 0x4b, 0xdd, 0x3d, 0xd5, 0xf5, 0x7d, 0x55, 0x5d,
	0x5d, 0x5d, 0x45, 0xc1, 0x92, 0xd3, 0x1d, 0x92, 0x89, 0xde, 0xb0, 0x6c, 0xca, 0x28, 0x5a, 0x36,
	0x26, 0x13, 0xb7, 0xd7, 0x69, 0xc8, 0xc5, 0xda, 0xfa, 0x80, 0xd2, 0xc1, 0x98, 0x34, 0x75, 0xcb,
	0x68, 0xea, 0xa6, 0x49, 0x99, 0xce, 0x0c, 0x6a, 0x3a, 0x52, 0xb8, 0xf6, 0x48, 0x7d, 0x15, 0xb3,
	0x8e, 0xdb, 0x6f, 0x92, 0x89, 0xc5, 0xa6, 0xea, 0xe3, 0xae, 0xf8, 0xd3, 0x7d, 0x31, 0x20, 0xe6,
	0x0b, 0xe7, 0x52, 0x1f, 0x0c, 0x88, 0xdd, 0xa4, 0x96, 0xd8, 0x9e, 0xa0, 0xaa, 0x62, 0x75, 0x9a,
	0x56, 0x47, 0x4e, 0xf0, 0x1a, 0xe4, 0x4f, 0xc8, 0x14, 0x3d, 0x80, 0xfc, 0x88, 0x4c, 0xab, 0xd9,
	0x7a, 0x76, 0x7b, 0x49, 0xe3, 0x43, 0x7c, 0x08, 0x5f, 0x1e, 0xda, 0x44, 0x67, 0xe4, 0x8f, 0x0e,
	0xb1, 0x35, 0xf2, 0x57, 0x97, 0x38, 0x0c, 0x21, 0x28, 0xb8, 0x0e, 0xb1, 0x95, 0x9c, 0x18, 0xa3,
	0x1a, 0x2c, 0x5a, 0xba, 0xe3, 0x5c, 0x52, 0xbb, 0x57, 0xcd, 0x89, 0x75, 0x7f, 0x8e, 0xb7, 0x01,
	0x85, 0x95, 0x38, 0x16, 0x35, 0x1d, 0x92, 0xa4, 0x05, 0x6f, 0xc1, 0x97, 0x47, 0x64, 0x4c, 0x6e,
	0x84, 0xc3, 0x14, 0xbe, 0x3a, 0x1c, 0xea, 0xe6, 0x80, 0x9c, 0x2a, 0x90, 0x79, 0xdc, 0xea, 0x50,
	0xa1, 0xe3, 0xde, 0xe9, 0x2c, 0xbd, 0xf0, 0x12, 0x97, 0x30, 0xc9, 0xa5, 0x2f, 0x91, 0x97, 0x12,
	0xa1, 0x25, 0xfc, 0x0e, 0x96, 0x7e, 0xa0, 0x03, 0xc3, 0xbc, 0xaf, 0x0f, 0x9e, 0xc1, 0xb2, 0xda,
	0xaf, 0xcc, 0x7f, 0x08, 0x45, 0x46, 0x47, 0xc4, 0x54, 0x1a, 0xe4, 0x04, 0xef, 0xc1, 0xe2, 0x09,
	0x99, 0x9e, 0xe9, 0x63, 0x97, 0xc4, 0x4f, 0x83, 0xef, 0xb9, 0xe0, 0x9f, 0x94, 0x76, 0x39, 0xc1,
	0x3f, 0x02, 0x6a, 0x33, 0xdb, 0xed, 0x32, 0xd7, 0x26, 0xbd, 0x39, 0xbb, 0x77, 0xc3, 0xbb, 0x2b,
	0x7b, 0xab, 0x8d, 0x99, 0xc8, 0x6b, 0x1c, 0x52, 0x93, 0x11, 0x93, 0x79, 0x5a, 0xf7, 0xa1, 0xa4,
	0x56, 0xd0, 0x3a, 0x94, 0x99, 0x31, 0x21, 0x0e, 0xd3, 0x27, 0x96, 0x50, 0x58, 0xd0, 0x82, 0x05,
	0x54, 0x85, 0x92, 0xa5, 0x4f, 0xc7, 0x54, 0xf7, 0x8c, 0xf6, 0xa6, 0xf8, 0x1b, 0x28, 0xb6, 0xcc,
	0x1e, 0xf9, 0xc8, 0x79, 0x1b, 0x7c, 0xa0, 0x36, 0xcb, 0x09, 0x3e, 0x82, 0x42, 0x8b, 0x91, 0xc9,
	0x6d, 0xed, 0x0c, 0xb4, 0xe4, 0xc3, 0x5a, 0xfa, 0xb0, 0x12, 0x58, 0x9f, 0xa2, 0xef, 0x4e, 0x96,
	0xa7, 0xe0, 0xbc, 0x86, 0x85, 0x93, 0xb3, 0x1f, 0x0c, 0x87, 0xa1, 0x5f, 0x43, 0xfe, 0xe4, 0xcc,
	0xa9, 0x66, 0xeb, 0xf9, 0xed, 0xca, 0xde, 0x5a, 0x44, 0x97, 0xe7, 0x7f, 0x8d, 0xcb, 0xe0, 0xdf,
	0x42, 0xa9, 0xad, 0x76, 0x7d, 0x07, 0x85, 0x76, 0xb0, 0x6d, 0x23, 0xb2, 0x2d, 0x7e, 0x80, 0x9a,
	0x10, 0xc7, 0xaf, 0xa0, 0x74, 0x42, 0xa6, 0x42, 0xc3, 0x73, 0x28, 0x8c, 0xc8, 0xd4, 0xd3, 0x80,
	0xe2, 0xc0, 0x9a, 0xf8, 0x8e, 0xbf, 0x83, 0x45, 0xee, 0x07, 0xc5, 0xb5, 0x68, 0x30, 0x32, 0xf1,
	0x36, 0xfd, 0x2a, 0xb2, 0x89, 0xcb, 0x69, 0x52, 0x02, 0xb7, 0xc2, 0x61, 0xe4, 0x2b, 0x78, 0x3d,
	0xab, 0xe0, 0x9b, 0x54, 0xde, 0x61, 0x55, 0x2f, 0xa1, 0xa0, 0x51, 0xca, 0x92, 0xcf, 0x9d, 0x5f,
	0x1d, 0x9b, 0x52, 0xa6, 0x0e, 0x57, 0x8c, 0xf1, 0xdf, 0xb2, 0x50, 0x69, 0x77, 0x75, 0xf3, 0x83,
	0xcc, 0x57, 0x68, 0x15, 0x16, 0x2c, 0x9b, 0xf4, 0x8d, 0x8f, 0xea, 0x18, 0xd5, 0x8c, 0xaf, 0xd3,
	0x7e, 0xdf, 0x21, 0xde, 0x6e, 0x35, 0xe3, 0x48, 0x63, 0x63, 0x62, 0x30, 0xef, 0xcc, 0xc4, 0x84,
	0x87, 0xa6, 0x4d, 0x2e, 0x88, 0xed, 0x90, 0x6a, 0xa1, 0x9e, 0xdd, 0x5e, 0xd4, 0xbc, 0x29, 0xe7,
	0xd0, 0x23, 0xc4, 0xaa, 0x16, 0xc5, 0xb2, 0x18, 0xe3, 0xa7, 0x50, 0x3e, 0x21, 0xd3, 0x53, 0x1f,
	0x28, 0x89, 0x00, 0xc6, 0x00, 0xdc, 0x52, 0xe7, 0x90, 0xba, 0xa6, 0x80, 0xed, 0xf2, 0x81, 0x67,
	0xa0, 0x98, 0x60, 0x1b, 0x56, 0x5a, 0x66, 0x77, 0xec, 0x3a, 0x06, 0x35, 0x4f, 0x6d, 0x4a, 0xfb,
	0x68, 0x05, 0x72, 0xba, 0x27, 0x94, 0xd3, 0x43, 0x8e, 0xc9, 0x25, 0x39, 0x26, 0x1f, 0x38, 0x86,
	0xaf, 0x8d, 0x89, 0xde, 0x17, 0xfc, 0x97, 0x34, 0x31, 0xe6, 0x6b, 0x96, 0xce, 0x86, 0xd5, 0x62,
	0x3d, 0xcf, 0xd7, 0xf8, 0x18, 0x7f, 0xce, 0xc2, 0x83, 0x43, 0x6a, 0x3a, 0x86, 0xc3, 0x88, 0xd9,
	0x9d, 0x4a, 0xd8, 0x87, 0x50, 0xec, 0x1b, 0xb6, 0xe3, 0xd3, 0x13, 0x13, 0x6e, 0x9a, 0x43, 0xba,
	0xd4, 0xec, 0x29, 0x74, 0x35, 0xe3, 0xd7, 0x5c, 0x08, 0x68, 0x01, 0x87, 0x60, 0x01, 0x3d, 0x06,
	0x90, 0x72, 0xe2, 0xb3, 0xa4, 0x13, 0x5a, 0x49, 0x24, 0xf5, 0xaf, 0x2c, 0x14, 0x25, 0x13, 0xcf,
	0x8c, 0x6c, 0xc8, 0x8c, 0xdb, 0x3b, 0x41, 0xba, 0xaf, 0xe0, 0xbb, 0x6f, 0x13, 0x96, 0x0d, 0xdf,
	0xc1, 0x01, 0xe8, 0xec, 0x22, 0xda, 0x86, 0x2f, 0xba, 0x21, 0x8f, 0x70, 0xb9, 0x05, 0x21, 0x17,
	0x5d, 0xc6, 0x3f, 0xc3, 0x62, 0x5b, 0xef, 0x13, 0x91, 0x3d, 0xb6, 0xa0, 0xc0, 0x83, 0x58, 0x30,
	0x4d, 0xb9, 0x30, 0x42, 0x00, 0xed, 0x40, 0xd1, 0xe2, 0xb6, 0xa9, 0xa4, 0xf2, 0x30, 0x22, 0x29,
	0xec, 0xd6, 0xa4, 0x08, 0x76, 0x00, 0x71, 0x80, 0x48, 0xa2, 0x7a, 0x35, 0x03, 0x75, 0xc3, 0xd5,
	0xba, 0x3b, 0xe8, 0x04, 0x56, 0x04, 0x28, 0x61, 0xde, 0xad, 0xda, 0x82, 0xdc, 0xe8, 0x42, 0xc1,
	0xa5, 0x26, 0xae, 0xdc, 0xe8, 0x02, 0xed, 0x41, 0x99, 0x3b, 0xbe, 0xe5, 0x1f, 0x4f, 0x1c, 0x4a,
	0x7c, 0xd3, 0x02, 0x31, 0x7c, 0x0d, 0x0f, 0x14, 0x5c, 0xfb, 0xcc, 0x03, 0x7c, 0x0d, 0x79, 0xc7,
	0x47, 0xbc, 0x45, 0xce, 0xe3, 0xd2, 0xf7, 0x02, 0x3f, 0x93, 0xb6, 0x1e, 0x07, 0xb6, 0xc6, 0x5f,
	0x81, 0xfb, 0x19, 0xf5, 0x90, 0xeb, 0xd5, 0x48, 0x9f, 0xd8, 0xc4, 0xec, 0x12, 0x4f, 0x7b, 0x13,
	0x72, 0x36, 0x55, 0x76, 0x3d, 0x89, 0x28, 0x89, 0x0a, 0x6b, 0x39, 0x9b, 0xde, 0x0b, 0x7c, 0x1b,
	0x56, 0xde, 0x13, 0x7d, 0xcc, 0x86, 0x7e, 0xd1, 0xc0, 0xaf, 0x2e, 0xd3, 0x99, 0xeb, 0x08, 0xe8,
	0x45, 0x4d, 0xcd, 0xf0, 0x01, 0x3c, 0x88, 0x51, 0x5c, 0x87, 0xb2, 0xed, 0xad, 0x29, 0x37, 0x04,
	0x0b, 0x9e, 0x7b, 0x72, 0x41, 0xa9, 0x77, 0x0c, 0x95, 0xf3, 0xfd, 0x5e, 0x2f, 0xe4, 0x3f, 0x9e,
	0x66, 0x95, 0xff, 0x54, 0x8e, 0x75, 0xba, 0xd4, 0x96, 0xaf, 0x68, 0x56, 0x93, 0x13, 0x4f, 0x51,
	0x3e, 0x50, 0x34, 0x84, 0xa5, 0xf3, 0x70, 0x2e, 0x8f, 0x6b, 0xfa, 0x3f, 0x65, 0x71, 0xfc, 0x3b,
	0x58, 0x6a, 0x85, 0x91, 0x44, 0x01, 0x36, 0x20, 0x6d, 0xe3, 0x8a, 0xa8, 0x94, 0xe7, 0xcf, 0x79,
	0xfe, 0xe2, 0xe3, 0x3f, 0xb8, 0x93, 0x0e, 0xb1, 0x55, 0xca, 0x09, 0xad, 0xe0, 0xef, 0xa1, 0x70,
	0xaa, 0x0f, 0xc8, 0x1d, 0x5e, 0x4c, 0x9e, 0xaa, 0x26, 0xdc, 0x1f, 0x79, 0xf9, 0x88, 0xf0, 0x31,
	0xfe, 0x05, 0x8a, 0x6d, 0xa1, 0xe7, 0x3e, 0x0f, 0xa7, 0xac, 0xa5, 0x04, 0x25, 0xc5, 0xd0, 0x9b,
	0x26, 0x62, 0x5d, 0xc2, 0x17, 0x3c, 0x38, 0xc3, 0xa7, 0xf6, 0x12, 0x8a, 0x57, 0xd4, 0x62, 0x8e,
	0x0a, 0xcd, 0x5a, 0x04, 0x35, 0x24, 0xaa, 0x49, 0xc1, 0xfb, 0x04, 0xe6, 0xde, 0xbf, 0xbf, 0x86,
	0x4a, 0x6b, 0x32, 0x71, 0xdb, 0xc4, 0xbe, 0x30, 0xba, 0x04, 0xb5, 0x01, 0x82, 0x02, 0x1f, 0xd5,
	0xa3, 0xe5, 0x55, 0xb4, 0x81, 0xa8, 0x6d, 0xcc, 0x91, 0x90, 0x91, 0x8e, 0x33, 0xe8, 0x14, 0x56,
	0x66, 0x4b, 0x7c, 0xb4, 0x19, 0xdd, 0x96, 0xd4, 0x01, 0xd4, 0x56, 0x1b, 0xb2, 0x49, 0x6a, 0x78,
	0x4d, 0x52, 0xe3, 0x7b, 0xde, 0x24, 0xe1, 0x0c, 0x7a, 0x0f, 0x10, 0x74, 0x17, 0x31, 0x9a, 0xb1,
	0xc6, 0x63, 0x8e, 0xa6, 0x11, 0x14, 0x45, 0x35, 0x8f, 0x1e, 0x45, 0x94, 0x84, 0x7b, 0x84, 0xda,
	0x7a, 0xf2, 0x47, 0x65, 0xe1, 0xd6, 0xe7, 0xfd, 0x5c, 0x27, 0xf3, 0xf7, 0xff, 0xfc, 0xf7, 0x1f,
	0xb9, 0x75, 0xbc, 0xd6, 0xbc, 0x78, 0xd5, 0xe4, 0xd2, 0x36, 0x71, 0x98, 0x65, 0xd3, 0x8f, 0xd3,
	0xe6, 0x98, 0x4b, 0xbf, 0xc9, 0xee, 0xa0, 0x9f, 0x20, 0xdf, 0x26, 0x0c, 0xa5, 0x25, 0xec, 0x5a,
	0xe2, 0x71, 0xe1, 0x0d, 0xa1, 0xf9, 0x11, 0x5e, 0x8d, 0x6b, 0xe6, 0xb1, 0xc6, 0x15, 0x1f, 0x40,
	0x51, 0x64, 0x6b, 0x74, 0x73, 0x66, 0x4e, 0x01, 0xc9, 0xa0, 0x3e, 0x94, 0x54, 0xd6, 0x47, 0xb1,
	0x10, 0x9f, 0x79, 0x7c, 0x6a, 0x89, 0x6f, 0x15, 0x7e, 0x2e, 0x68, 0xd6, 0xf1, 0xa3, 0x64, 0x9a,
	0x4d, 0x47, 0xef, 0x13, 0xce, 0xf5, 0x08, 0xca, 0xfe, 0xeb, 0x82, 0x9e, 0x24, 0x23, 0xf9, 0xef,
	0x4e, 0x0a, 0x56, 0x06, 0xfd, 0x08, 0xf9, 0x63, 0xc2, 0x50, 0x42, 0xed, 0x5c, 0x4b, 0xba, 0xe8,
	0x78, 0x53, 0xb0, 0x7b, 0x8c, 0xd6, 0x53, 0xd8, 0x5d, 0x8f, 0xc8, 0xf4, 0x13, 0x7a, 0x0b, 0xc5,
	0x63, 0xc1, 0x2b, 0x49, 0xef, 0xfc, 0x8b, 0x8f, 0x33, 0x68, 0x22, 0x3d, 0x78, 0x9c, 0xe2, 0xc1,
	0xe0, 0x49, 0xab, 0xad, 0x25, 0x7c, 0x16, 0x4a, 0x76, 0x04, 0xcd, 0x4d, 0xfc, 0x64, 0x8e, 0x13,
	0x9b, 0x03, 0xc2, 0xb8, 0x23, 0x3f, 0x48, 0x47, 0x4a, 0xc2, 0x37, 0x00, 0x6e, 0x24, 0xf9, 0x39,
	0xca, 0x9f, 0x17, 0x4f, 0x84, 0x1d, 0xe8, 0xac, 0x3b, 0x44, 0x5f, 0x45, 0x1d, 0x20, 0x7a, 0x9f,
	0x94, 0xe0, 0x99, 0x73, 0xf4, 0x1d, 0xae, 0xad, 0xe9, 0x48, 0xc6, 0x6f, 0x01, 0x3c, 0x80, 0xf6,
	0x19, 0x8a, 0x36, 0x6f, 0xed, 0xb9, 0x18, 0x19, 0xd4, 0x85, 0xc5, 0x63, 0x8f, 0xde, 0x6a, 0xfc,
	0x7c, 0xc4, 0xde, 0xb5, 0x84, 0xb3, 0xe7, 0x1f, 0x6e, 0xa6, 0xa8, 0x9c, 0xda, 0x02, 0x38, 0x4e,
	0xa7, 0xe8, 0xc1, 0x6c, 0xcc, 0x0d, 0x05, 0x01, 0xc8, 0xf9, 0x16, 0xf8, 0x93, 0x86, 0xa2, 0xa9,
	0x3b, 0xf4, 0xce, 0xdd, 0x8b, 0xaf, 0x0c, 0x84, 0xae, 0x6e, 0x4a, 0xbe, 0x0b, 0x5c, 0x5f, 0xfb,
	0x6c, 0x2e, 0xcc, 0xad, 0xf8, 0x8e, 0xa0, 0x28, 0x7b, 0xa1, 0x6a, 0xdc, 0x6a, 0xd9, 0x4b, 0xd5,
	0xbe, 0x4e, 0xa0, 0x2b, 0x1b, 0x28, 0xfc, 0x42, 0x10, 0xde, 0x42, 0xcf, 0x52, 0x08, 0x8b, 0x86,
	0xaa, 0x79, 0x2d, 0x9b, 0xaf, 0x4f, 0xe8, 0x67, 0xa8, 0x1c, 0xba, 0xb6, 0xcd, 0x9b, 0x75, 0xde,
	0x17, 0xa4, 0x24, 0xe8, 0xd8, 0x5d, 0xe6, 0xc2, 0xf8, 0x69, 0x90, 0x6f, 0xab, 0x28, 0x21, 0x2b,
	0x8a, 0x4e, 0xc3, 0x86, 0xb2, 0xdf, 0xba, 0xa1, 0xc4, 0x90, 0x8a, 0x5d, 0xe8, 0xd9, 0x56, 0x0f,
	0xbf, 0x14, 0x08, 0x3b, 0x68, 0x3b, 0xc1, 0x22, 0x4f, 0x52, 0xd4, 0xe7, 0xcd, 0x6b, 0xd1, 0xf0,
	0x7c, 0x42, 0x1f, 0xa1, 0x12, 0xea, 0xdc, 0x52, 0x50, 0x9f, 0xc4, 0x7f, 0xb3, 0x98, 0xe9, 0xf5,
	0xf0, 0x9e, 0xc0, 0xdd, 0x45, 0x3b, 0x71, 0xdc, 0x50, 0xbb, 0x33, 0x8b, 0xdc, 0x81, 0xd2, 0xc1,
	0x54, 0xfd, 0x44, 0x93, 0x88, 0x9a, 0x98, 0x14, 0x77, 0x05, 0xd2, 0x73, 0xb4, 0x99, 0x72, 0x66,
	0x42, 0xb9, 0x8f, 0x71, 0x00, 0x65, 0x85, 0xd1, 0x3e, 0xbb, 0xa5, 0x47, 0x13, 0x52, 0x4c, 0xe9,
	0xbd, 0xe1, 0x30, 0x6a, 0x4f, 0x13, 0x53, 0x6c, 0xea, 0x75, 0xd8, 0x12, 0x4c, 0x37, 0x50, 0x42,
	0x5e, 0x1c, 0x4a, 0x7d, 0x2a, 0x83, 0x1f, 0x41, 0x59, 0x01, 0xa4, 0x64, 0xf1, 0x5b, 0x5d, 0x05,
	0x13, 0x16, 0x64, 0xbd, 0x9e, 0x1a, 0x98, 0x51, 0x4b, 0x67, 0xcb, 0x7b, 0xfc, 0x22, 0x08, 0x51,
	0x8c, 0xea, 0x09, 0xa4, 0x85, 0xb8, 0xed, 0x75, 0x03, 0xbf, 0x40, 0xd9, 0xaf, 0xfa, 0xd1, 0x4d,
	0x5d, 0xc8, 0xdd, 0x93, 0xb0, 0xdf, 0x2c, 0xf0, 0x8c, 0x71, 0x09, 0xcb, 0x33, 0x8d, 0x10, 0x7a,
	0x9a, 0xf0, 0x36, 0xdc, 0x88, 0x29, 0x43, 0xf5, 0x5b, 0x81, 0xf9, 0x0c, 0x27, 0x58, 0x28, 0x5e,
	0xaa, 0x19, 0xe0, 0x3f, 0x43, 0x81, 0x57, 0xad, 0x68, 0x4e, 0x29, 0x7b, 0xf7, 0x0a, 0xe8, 0x4a,
	0xef, 0xf5, 0xb8, 0x72, 0x1d, 0x8a, 0xa2, 0x55, 0x89, 0xd5, 0x71, 0xe7, 0xb7, 0x4a, 0xb7, 0x38,
	0xbd, 0x7a, 0xbb, 0xf2, 0x52, 0xed, 0x09, 0x94, 0xce, 0x55, 0xae, 0x9d, 0x0b, 0x72, 0xab, 0x08,
	0x1b, 0xca, 0x1f, 0x2a, 0x84, 0x43, 0x1e, 0x27, 0x1c, 0xc0, 0x3c, 0xa7, 0xdc, 0x58, 0x6f, 0x09,
	0xdf, 0x7b, 0x9e, 0xf9, 0x0b, 0x14, 0x5b, 0x89, 0x9e, 0x09, 0x37, 0x5c, 0xb1, 0xfc, 0xc0, 0x3b,
	0x9f, 0x79, 0x5e, 0x31, 0x3c, 0xaf, 0xbc, 0x83, 0x52, 0x2b, 0xc5, 0x2b, 0x33, 0x00, 0x51, 0x23,
	0x44, 0x6f, 0x85, 0x33, 0xe8, 0x03, 0x14, 0x8e, 0xdc, 0x89, 0x95, 0x7a, 0xd1, 0xa0, 0x61, 0x75,
	0x54, 0xf5, 0x31, 0x2f, 0x0e, 0x7a, 0xee, 0xc4, 0x7a, 0x93, 0xdd, 0x79, 0x99, 0x3d, 0xf8, 0x67,
	0xf6, 0xf3, 0xbe, 0x71, 0xfe, 0x27, 0xf8, 0x09, 0x16, 0x3a, 0x44, 0xb7, 0x89, 0x8d, 0x7e, 0xbf,
	0x98, 0x43, 0xbf, 0xd9, 0x77, 0xd9, 0x90, 0x98, 0xcc, 0xe8, 0x8a, 0xff, 0x9d, 0xd4, 0xc5, 0x8f,
	0xf4, 0xbb, 0x75, 0xf9, 0x1c, 0x91, 0x5e, 0xbd, 0x33, 0xad, 0x1f, 0x08, 0xe9, 0x37, 0xea, 0x6f,
	0xfd, 0xad, 0x10, 0x79, 0x57, 0x5b, 0xe6, 0x3b, 0xa9, 0x6d, 0x5c, 0xc9, 0x8d, 0xb9, 0xce, 0x12,
	0x80, 0xaf, 0x3a, 0x73, 0xfe, 0xed, 0xc0, 0x60, 0x43, 0xb7, 0xd3, 0xe8, 0x52, 0xfe, 0xc6, 0xf5,
	0x88, 0x49, 0x99, 0x6e, 0x4f, 0x9b, 0xd2, 0xd8, 0xa6, 0x35, 0x1a, 0x88, 0x7f, 0x00, 0x49, 0xa3,
	0x3b, 0x0b, 0xc2, 0xb8, 0xd7, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x41, 0x69, 0x0d, 0xca, 0x39,
	0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImmuServiceClient is the client API for ImmuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImmuServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Index, error)
	SetSV(ctx context.Context, in *StructuredKeyValue, opts ...grpc.CallOption) (*Index, error)
	SafeSet(ctx context.Context, in *SafeSetOptions, opts ...grpc.CallOption) (*Proof, error)
	SafeSetSV(ctx context.Context, in *SafeSetSVOptions, opts ...grpc.CallOption) (*Proof, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error)
	GetSV(ctx context.Context, in *Key, opts ...grpc.CallOption) (*StructuredItem, error)
	SafeGet(ctx context.Context, in *SafeGetOptions, opts ...grpc.CallOption) (*SafeItem, error)
	SafeGetSV(ctx context.Context, in *SafeGetOptions, opts ...grpc.CallOption) (*SafeStructuredItem, error)
	SetBatch(ctx context.Context, in *KVList, opts ...grpc.CallOption) (*Index, error)
	SetBatchSV(ctx context.Context, in *SKVList, opts ...grpc.CallOption) (*Index, error)
	GetBatch(ctx context.Context, in *KeyList, opts ...grpc.CallOption) (*ItemList, error)
	GetBatchSV(ctx context.Context, in *KeyList, opts ...grpc.CallOption) (*StructuredItemList, error)
	Scan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*ItemList, error)
	ScanSV(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*StructuredItemList, error)
	Count(ctx context.Context, in *KeyPrefix, opts ...grpc.CallOption) (*ItemsCount, error)
	CurrentRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Root, error)
	Inclusion(ctx context.Context, in *Index, opts ...grpc.CallOption) (*InclusionProof, error)
	Consistency(ctx context.Context, in *Index, opts ...grpc.CallOption) (*ConsistencyProof, error)
	ByIndex(ctx context.Context, in *Index, opts ...grpc.CallOption) (*Item, error)
	ByIndexSV(ctx context.Context, in *Index, opts ...grpc.CallOption) (*StructuredItem, error)
	History(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ItemList, error)
	HistorySV(ctx context.Context, in *Key, opts ...grpc.CallOption) (*StructuredItemList, error)
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	Reference(ctx context.Context, in *ReferenceOptions, opts ...grpc.CallOption) (*Index, error)
	SafeReference(ctx context.Context, in *SafeReferenceOptions, opts ...grpc.CallOption) (*Proof, error)
	ZAdd(ctx context.Context, in *ZAddOptions, opts ...grpc.CallOption) (*Index, error)
	ZScan(ctx context.Context, in *ZScanOptions, opts ...grpc.CallOption) (*ItemList, error)
	ZScanSV(ctx context.Context, in *ZScanOptions, opts ...grpc.CallOption) (*StructuredItemList, error)
	SafeZAdd(ctx context.Context, in *SafeZAddOptions, opts ...grpc.CallOption) (*Proof, error)
	IScan(ctx context.Context, in *IScanOptions, opts ...grpc.CallOption) (*Page, error)
	IScanSV(ctx context.Context, in *IScanOptions, opts ...grpc.CallOption) (*SPage, error)
	Dump(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ImmuService_DumpClient, error)
}

type immuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImmuServiceClient(cc grpc.ClientConnInterface) ImmuServiceClient {
	return &immuServiceClient{cc}
}

func (c *immuServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SetSV(ctx context.Context, in *StructuredKeyValue, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SetSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeSet(ctx context.Context, in *SafeSetOptions, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeSetSV(ctx context.Context, in *SafeSetSVOptions, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeSetSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) GetSV(ctx context.Context, in *Key, opts ...grpc.CallOption) (*StructuredItem, error) {
	out := new(StructuredItem)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeGet(ctx context.Context, in *SafeGetOptions, opts ...grpc.CallOption) (*SafeItem, error) {
	out := new(SafeItem)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeGetSV(ctx context.Context, in *SafeGetOptions, opts ...grpc.CallOption) (*SafeStructuredItem, error) {
	out := new(SafeStructuredItem)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeGetSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SetBatch(ctx context.Context, in *KVList, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SetBatchSV(ctx context.Context, in *SKVList, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SetBatchSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) GetBatch(ctx context.Context, in *KeyList, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) GetBatchSV(ctx context.Context, in *KeyList, opts ...grpc.CallOption) (*StructuredItemList, error) {
	out := new(StructuredItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetBatchSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Scan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ScanSV(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*StructuredItemList, error) {
	out := new(StructuredItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ScanSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Count(ctx context.Context, in *KeyPrefix, opts ...grpc.CallOption) (*ItemsCount, error) {
	out := new(ItemsCount)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CurrentRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Root, error) {
	out := new(Root)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CurrentRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Inclusion(ctx context.Context, in *Index, opts ...grpc.CallOption) (*InclusionProof, error) {
	out := new(InclusionProof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Inclusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Consistency(ctx context.Context, in *Index, opts ...grpc.CallOption) (*ConsistencyProof, error) {
	out := new(ConsistencyProof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Consistency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ByIndex(ctx context.Context, in *Index, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ByIndexSV(ctx context.Context, in *Index, opts ...grpc.CallOption) (*StructuredItem, error) {
	out := new(StructuredItem)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ByIndexSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) History(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) HistorySV(ctx context.Context, in *Key, opts ...grpc.CallOption) (*StructuredItemList, error) {
	out := new(StructuredItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/HistorySV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Reference(ctx context.Context, in *ReferenceOptions, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Reference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeReference(ctx context.Context, in *SafeReferenceOptions, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ZAdd(ctx context.Context, in *ZAddOptions, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ZScan(ctx context.Context, in *ZScanOptions, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ZScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ZScanSV(ctx context.Context, in *ZScanOptions, opts ...grpc.CallOption) (*StructuredItemList, error) {
	out := new(StructuredItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ZScanSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeZAdd(ctx context.Context, in *SafeZAddOptions, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) IScan(ctx context.Context, in *IScanOptions, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/IScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) IScanSV(ctx context.Context, in *IScanOptions, opts ...grpc.CallOption) (*SPage, error) {
	out := new(SPage)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/IScanSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Dump(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ImmuService_DumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImmuService_serviceDesc.Streams[0], "/immudb.schema.ImmuService/Dump", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_DumpClient interface {
	Recv() (*pb.KVList, error)
	grpc.ClientStream
}

type immuServiceDumpClient struct {
	grpc.ClientStream
}

func (x *immuServiceDumpClient) Recv() (*pb.KVList, error) {
	m := new(pb.KVList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImmuServiceServer is the server API for ImmuService service.
type ImmuServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*empty.Empty, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Set(context.Context, *KeyValue) (*Index, error)
	SetSV(context.Context, *StructuredKeyValue) (*Index, error)
	SafeSet(context.Context, *SafeSetOptions) (*Proof, error)
	SafeSetSV(context.Context, *SafeSetSVOptions) (*Proof, error)
	Get(context.Context, *Key) (*Item, error)
	GetSV(context.Context, *Key) (*StructuredItem, error)
	SafeGet(context.Context, *SafeGetOptions) (*SafeItem, error)
	SafeGetSV(context.Context, *SafeGetOptions) (*SafeStructuredItem, error)
	SetBatch(context.Context, *KVList) (*Index, error)
	SetBatchSV(context.Context, *SKVList) (*Index, error)
	GetBatch(context.Context, *KeyList) (*ItemList, error)
	GetBatchSV(context.Context, *KeyList) (*StructuredItemList, error)
	Scan(context.Context, *ScanOptions) (*ItemList, error)
	ScanSV(context.Context, *ScanOptions) (*StructuredItemList, error)
	Count(context.Context, *KeyPrefix) (*ItemsCount, error)
	CurrentRoot(context.Context, *empty.Empty) (*Root, error)
	Inclusion(context.Context, *Index) (*InclusionProof, error)
	Consistency(context.Context, *Index) (*ConsistencyProof, error)
	ByIndex(context.Context, *Index) (*Item, error)
	ByIndexSV(context.Context, *Index) (*StructuredItem, error)
	History(context.Context, *Key) (*ItemList, error)
	HistorySV(context.Context, *Key) (*StructuredItemList, error)
	Health(context.Context, *empty.Empty) (*HealthResponse, error)
	Reference(context.Context, *ReferenceOptions) (*Index, error)
	SafeReference(context.Context, *SafeReferenceOptions) (*Proof, error)
	ZAdd(context.Context, *ZAddOptions) (*Index, error)
	ZScan(context.Context, *ZScanOptions) (*ItemList, error)
	ZScanSV(context.Context, *ZScanOptions) (*StructuredItemList, error)
	SafeZAdd(context.Context, *SafeZAddOptions) (*Proof, error)
	IScan(context.Context, *IScanOptions) (*Page, error)
	IScanSV(context.Context, *IScanOptions) (*SPage, error)
	Dump(*empty.Empty, ImmuService_DumpServer) error
}

// UnimplementedImmuServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImmuServiceServer struct {
}

func (*UnimplementedImmuServiceServer) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedImmuServiceServer) ChangePassword(ctx context.Context, req *ChangePasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedImmuServiceServer) DeleteUser(ctx context.Context, req *DeleteUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedImmuServiceServer) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedImmuServiceServer) Set(ctx context.Context, req *KeyValue) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedImmuServiceServer) SetSV(ctx context.Context, req *StructuredKeyValue) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSV not implemented")
}
func (*UnimplementedImmuServiceServer) SafeSet(ctx context.Context, req *SafeSetOptions) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeSet not implemented")
}
func (*UnimplementedImmuServiceServer) SafeSetSV(ctx context.Context, req *SafeSetSVOptions) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeSetSV not implemented")
}
func (*UnimplementedImmuServiceServer) Get(ctx context.Context, req *Key) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedImmuServiceServer) GetSV(ctx context.Context, req *Key) (*StructuredItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSV not implemented")
}
func (*UnimplementedImmuServiceServer) SafeGet(ctx context.Context, req *SafeGetOptions) (*SafeItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeGet not implemented")
}
func (*UnimplementedImmuServiceServer) SafeGetSV(ctx context.Context, req *SafeGetOptions) (*SafeStructuredItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeGetSV not implemented")
}
func (*UnimplementedImmuServiceServer) SetBatch(ctx context.Context, req *KVList) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBatch not implemented")
}
func (*UnimplementedImmuServiceServer) SetBatchSV(ctx context.Context, req *SKVList) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBatchSV not implemented")
}
func (*UnimplementedImmuServiceServer) GetBatch(ctx context.Context, req *KeyList) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (*UnimplementedImmuServiceServer) GetBatchSV(ctx context.Context, req *KeyList) (*StructuredItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchSV not implemented")
}
func (*UnimplementedImmuServiceServer) Scan(ctx context.Context, req *ScanOptions) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (*UnimplementedImmuServiceServer) ScanSV(ctx context.Context, req *ScanOptions) (*StructuredItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanSV not implemented")
}
func (*UnimplementedImmuServiceServer) Count(ctx context.Context, req *KeyPrefix) (*ItemsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedImmuServiceServer) CurrentRoot(ctx context.Context, req *empty.Empty) (*Root, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentRoot not implemented")
}
func (*UnimplementedImmuServiceServer) Inclusion(ctx context.Context, req *Index) (*InclusionProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inclusion not implemented")
}
func (*UnimplementedImmuServiceServer) Consistency(ctx context.Context, req *Index) (*ConsistencyProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consistency not implemented")
}
func (*UnimplementedImmuServiceServer) ByIndex(ctx context.Context, req *Index) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByIndex not implemented")
}
func (*UnimplementedImmuServiceServer) ByIndexSV(ctx context.Context, req *Index) (*StructuredItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByIndexSV not implemented")
}
func (*UnimplementedImmuServiceServer) History(ctx context.Context, req *Key) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (*UnimplementedImmuServiceServer) HistorySV(ctx context.Context, req *Key) (*StructuredItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistorySV not implemented")
}
func (*UnimplementedImmuServiceServer) Health(ctx context.Context, req *empty.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedImmuServiceServer) Reference(ctx context.Context, req *ReferenceOptions) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reference not implemented")
}
func (*UnimplementedImmuServiceServer) SafeReference(ctx context.Context, req *SafeReferenceOptions) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeReference not implemented")
}
func (*UnimplementedImmuServiceServer) ZAdd(ctx context.Context, req *ZAddOptions) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (*UnimplementedImmuServiceServer) ZScan(ctx context.Context, req *ZScanOptions) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScan not implemented")
}
func (*UnimplementedImmuServiceServer) ZScanSV(ctx context.Context, req *ZScanOptions) (*StructuredItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScanSV not implemented")
}
func (*UnimplementedImmuServiceServer) SafeZAdd(ctx context.Context, req *SafeZAddOptions) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeZAdd not implemented")
}
func (*UnimplementedImmuServiceServer) IScan(ctx context.Context, req *IScanOptions) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IScan not implemented")
}
func (*UnimplementedImmuServiceServer) IScanSV(ctx context.Context, req *IScanOptions) (*SPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IScanSV not implemented")
}
func (*UnimplementedImmuServiceServer) Dump(req *empty.Empty, srv ImmuService_DumpServer) error {
	return status.Errorf(codes.Unimplemented, "method Dump not implemented")
}

func RegisterImmuServiceServer(s *grpc.Server, srv ImmuServiceServer) {
	s.RegisterService(&_ImmuService_serviceDesc, srv)
}

func _ImmuService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Set(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SetSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StructuredKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SetSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SetSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SetSV(ctx, req.(*StructuredKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeSetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeSet(ctx, req.(*SafeSetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeSetSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeSetSVOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeSetSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeSetSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeSetSV(ctx, req.(*SafeSetSVOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetSV(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeGetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeGet(ctx, req.(*SafeGetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeGetSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeGetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeGetSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeGetSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeGetSV(ctx, req.(*SafeGetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SetBatch(ctx, req.(*KVList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SetBatchSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKVList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SetBatchSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SetBatchSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SetBatchSV(ctx, req.(*SKVList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetBatch(ctx, req.(*KeyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetBatchSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetBatchSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetBatchSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetBatchSV(ctx, req.(*KeyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Scan(ctx, req.(*ScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ScanSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ScanSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ScanSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ScanSV(ctx, req.(*ScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Count(ctx, req.(*KeyPrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CurrentRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CurrentRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CurrentRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CurrentRoot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Inclusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Inclusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Inclusion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Inclusion(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Consistency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Consistency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Consistency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Consistency(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ByIndex(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ByIndexSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ByIndexSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ByIndexSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ByIndexSV(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).History(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_HistorySV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).HistorySV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/HistorySV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).HistorySV(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Reference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Reference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Reference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Reference(ctx, req.(*ReferenceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeReferenceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeReference(ctx, req.(*SafeReferenceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZAddOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ZAdd(ctx, req.(*ZAddOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ZScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ZScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ZScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ZScan(ctx, req.(*ZScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ZScanSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ZScanSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ZScanSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ZScanSV(ctx, req.(*ZScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeZAddOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeZAdd(ctx, req.(*SafeZAddOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_IScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).IScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/IScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).IScan(ctx, req.(*IScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_IScanSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).IScanSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/IScanSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).IScanSV(ctx, req.(*IScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Dump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).Dump(m, &immuServiceDumpServer{stream})
}

type ImmuService_DumpServer interface {
	Send(*pb.KVList) error
	grpc.ServerStream
}

type immuServiceDumpServer struct {
	grpc.ServerStream
}

func (x *immuServiceDumpServer) Send(m *pb.KVList) error {
	return x.ServerStream.SendMsg(m)
}

var _ImmuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "immudb.schema.ImmuService",
	HandlerType: (*ImmuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ImmuService_CreateUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _ImmuService_ChangePassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ImmuService_DeleteUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ImmuService_Login_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ImmuService_Set_Handler,
		},
		{
			MethodName: "SetSV",
			Handler:    _ImmuService_SetSV_Handler,
		},
		{
			MethodName: "SafeSet",
			Handler:    _ImmuService_SafeSet_Handler,
		},
		{
			MethodName: "SafeSetSV",
			Handler:    _ImmuService_SafeSetSV_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ImmuService_Get_Handler,
		},
		{
			MethodName: "GetSV",
			Handler:    _ImmuService_GetSV_Handler,
		},
		{
			MethodName: "SafeGet",
			Handler:    _ImmuService_SafeGet_Handler,
		},
		{
			MethodName: "SafeGetSV",
			Handler:    _ImmuService_SafeGetSV_Handler,
		},
		{
			MethodName: "SetBatch",
			Handler:    _ImmuService_SetBatch_Handler,
		},
		{
			MethodName: "SetBatchSV",
			Handler:    _ImmuService_SetBatchSV_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _ImmuService_GetBatch_Handler,
		},
		{
			MethodName: "GetBatchSV",
			Handler:    _ImmuService_GetBatchSV_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _ImmuService_Scan_Handler,
		},
		{
			MethodName: "ScanSV",
			Handler:    _ImmuService_ScanSV_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _ImmuService_Count_Handler,
		},
		{
			MethodName: "CurrentRoot",
			Handler:    _ImmuService_CurrentRoot_Handler,
		},
		{
			MethodName: "Inclusion",
			Handler:    _ImmuService_Inclusion_Handler,
		},
		{
			MethodName: "Consistency",
			Handler:    _ImmuService_Consistency_Handler,
		},
		{
			MethodName: "ByIndex",
			Handler:    _ImmuService_ByIndex_Handler,
		},
		{
			MethodName: "ByIndexSV",
			Handler:    _ImmuService_ByIndexSV_Handler,
		},
		{
			MethodName: "History",
			Handler:    _ImmuService_History_Handler,
		},
		{
			MethodName: "HistorySV",
			Handler:    _ImmuService_HistorySV_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ImmuService_Health_Handler,
		},
		{
			MethodName: "Reference",
			Handler:    _ImmuService_Reference_Handler,
		},
		{
			MethodName: "SafeReference",
			Handler:    _ImmuService_SafeReference_Handler,
		},
		{
			MethodName: "ZAdd",
			Handler:    _ImmuService_ZAdd_Handler,
		},
		{
			MethodName: "ZScan",
			Handler:    _ImmuService_ZScan_Handler,
		},
		{
			MethodName: "ZScanSV",
			Handler:    _ImmuService_ZScanSV_Handler,
		},
		{
			MethodName: "SafeZAdd",
			Handler:    _ImmuService_SafeZAdd_Handler,
		},
		{
			MethodName: "IScan",
			Handler:    _ImmuService_IScan_Handler,
		},
		{
			MethodName: "IScanSV",
			Handler:    _ImmuService_IScanSV_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dump",
			Handler:       _ImmuService_Dump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema.proto",
}
