//
//Copyright 2019-2020 vChain, Inc.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: schema.proto

package schema

import (
	context "context"
	pb "github.com/dgraph-io/badger/v2/pb"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PermissionAction int32

const (
	PermissionAction_GRANT  PermissionAction = 0
	PermissionAction_REVOKE PermissionAction = 1
)

// Enum value maps for PermissionAction.
var (
	PermissionAction_name = map[int32]string{
		0: "GRANT",
		1: "REVOKE",
	}
	PermissionAction_value = map[string]int32{
		"GRANT":  0,
		"REVOKE": 1,
	}
)

func (x PermissionAction) Enum() *PermissionAction {
	p := new(PermissionAction)
	*p = x
	return p
}

func (x PermissionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[0].Descriptor()
}

func (PermissionAction) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[0]
}

func (x PermissionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionAction.Descriptor instead.
func (PermissionAction) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Key) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database   string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Permission uint32 `protobuf:"varint,2,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Permission) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Permission) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        []byte        `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Createdby   string        `protobuf:"bytes,4,opt,name=createdby,proto3" json:"createdby,omitempty"`
	Createdat   string        `protobuf:"bytes,5,opt,name=createdat,proto3" json:"createdat,omitempty"`
	Active      bool          `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *User) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *User) GetCreatedby() string {
	if x != nil {
		return x.Createdby
	}
	return ""
}

func (x *User) GetCreatedat() string {
	if x != nil {
		return x.Createdat
	}
	return ""
}

func (x *User) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type UserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserList) Reset() {
	*x = UserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserList) ProtoMessage() {}

func (x *UserList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserList.ProtoReflect.Descriptor instead.
func (*UserList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{3}
}

func (x *UserList) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password   []byte `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Permission uint32 `protobuf:"varint,3,opt,name=permission,proto3" json:"permission,omitempty"`
	Database   string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{4}
}

func (x *CreateUserRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateUserRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *CreateUserRequest) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

func (x *CreateUserRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{5}
}

func (x *UserRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	OldPassword []byte `protobuf:"bytes,2,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`
	NewPassword []byte `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{6}
}

func (x *ChangePasswordRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChangePasswordRequest) GetOldPassword() []byte {
	if x != nil {
		return x.OldPassword
	}
	return nil
}

func (x *ChangePasswordRequest) GetNewPassword() []byte {
	if x != nil {
		return x.NewPassword
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password []byte `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{7}
}

func (x *LoginRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Warning []byte `protobuf:"bytes,2,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{8}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResponse) GetWarning() []byte {
	if x != nil {
		return x.Warning
	}
	return nil
}

type AuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind uint32 `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *AuthConfig) Reset() {
	*x = AuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthConfig) ProtoMessage() {}

func (x *AuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthConfig.ProtoReflect.Descriptor instead.
func (*AuthConfig) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{9}
}

func (x *AuthConfig) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

type MTLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *MTLSConfig) Reset() {
	*x = MTLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSConfig) ProtoMessage() {}

func (x *MTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSConfig.ProtoReflect.Descriptor instead.
func (*MTLSConfig) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{10}
}

func (x *MTLSConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I     []byte `protobuf:"bytes,1,opt,name=i,proto3" json:"i,omitempty"`
	H     []byte `protobuf:"bytes,2,opt,name=h,proto3" json:"h,omitempty"`
	Refk  []byte `protobuf:"bytes,3,opt,name=refk,proto3" json:"refk,omitempty"`
	Ref   bool   `protobuf:"varint,4,opt,name=ref,proto3" json:"ref,omitempty"`
	Cache bool   `protobuf:"varint,5,opt,name=cache,proto3" json:"cache,omitempty"`
	Root  bool   `protobuf:"varint,6,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{11}
}

func (x *Node) GetI() []byte {
	if x != nil {
		return x.I
	}
	return nil
}

func (x *Node) GetH() []byte {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *Node) GetRefk() []byte {
	if x != nil {
		return x.Refk
	}
	return nil
}

func (x *Node) GetRef() bool {
	if x != nil {
		return x.Ref
	}
	return false
}

func (x *Node) GetCache() bool {
	if x != nil {
		return x.Cache
	}
	return false
}

func (x *Node) GetRoot() bool {
	if x != nil {
		return x.Root
	}
	return false
}

type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L []*Node `protobuf:"bytes,1,rep,name=l,proto3" json:"l,omitempty"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{12}
}

func (x *Layer) GetL() []*Node {
	if x != nil {
		return x.L
	}
	return nil
}

type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T []*Layer `protobuf:"bytes,1,rep,name=t,proto3" json:"t,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{13}
}

func (x *Tree) GetT() []*Layer {
	if x != nil {
		return x.T
	}
	return nil
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{14}
}

func (x *KeyValue) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Op struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//	*Op_KVs
	//	*Op_ZOpts
	//	*Op_ROpts
	Operation isOp_Operation `protobuf_oneof:"operation"`
}

func (x *Op) Reset() {
	*x = Op{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Op) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Op) ProtoMessage() {}

func (x *Op) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Op.ProtoReflect.Descriptor instead.
func (*Op) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{15}
}

func (m *Op) GetOperation() isOp_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *Op) GetKVs() *KeyValue {
	if x, ok := x.GetOperation().(*Op_KVs); ok {
		return x.KVs
	}
	return nil
}

func (x *Op) GetZOpts() *ZAddOptions {
	if x, ok := x.GetOperation().(*Op_ZOpts); ok {
		return x.ZOpts
	}
	return nil
}

func (x *Op) GetROpts() *ReferenceOptions {
	if x, ok := x.GetOperation().(*Op_ROpts); ok {
		return x.ROpts
	}
	return nil
}

type isOp_Operation interface {
	isOp_Operation()
}

type Op_KVs struct {
	KVs *KeyValue `protobuf:"bytes,1,opt,name=KVs,proto3,oneof"`
}

type Op_ZOpts struct {
	ZOpts *ZAddOptions `protobuf:"bytes,2,opt,name=ZOpts,proto3,oneof"`
}

type Op_ROpts struct {
	ROpts *ReferenceOptions `protobuf:"bytes,3,opt,name=ROpts,proto3,oneof"`
}

func (*Op_KVs) isOp_Operation() {}

func (*Op_ZOpts) isOp_Operation() {}

func (*Op_ROpts) isOp_Operation() {}

type Ops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*Op `protobuf:"bytes,1,rep,name=Operations,proto3" json:"Operations,omitempty"`
}

func (x *Ops) Reset() {
	*x = Ops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ops) ProtoMessage() {}

func (x *Ops) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ops.ProtoReflect.Descriptor instead.
func (*Ops) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{16}
}

func (x *Ops) GetOperations() []*Op {
	if x != nil {
		return x.Operations
	}
	return nil
}

type StructuredKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Content `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StructuredKeyValue) Reset() {
	*x = StructuredKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredKeyValue) ProtoMessage() {}

func (x *StructuredKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredKeyValue.ProtoReflect.Descriptor instead.
func (*StructuredKeyValue) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{17}
}

func (x *StructuredKeyValue) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StructuredKeyValue) GetValue() *Content {
	if x != nil {
		return x.Value
	}
	return nil
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{18}
}

func (x *Content) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Content) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{19}
}

func (x *Index) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{20}
}

func (x *Item) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Item) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Item) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type StructuredItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Content `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Index uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *StructuredItem) Reset() {
	*x = StructuredItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredItem) ProtoMessage() {}

func (x *StructuredItem) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredItem.ProtoReflect.Descriptor instead.
func (*StructuredItem) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{21}
}

func (x *StructuredItem) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StructuredItem) GetValue() *Content {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StructuredItem) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type KVList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KVs []*KeyValue `protobuf:"bytes,1,rep,name=KVs,proto3" json:"KVs,omitempty"`
}

func (x *KVList) Reset() {
	*x = KVList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVList) ProtoMessage() {}

func (x *KVList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVList.ProtoReflect.Descriptor instead.
func (*KVList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{22}
}

func (x *KVList) GetKVs() []*KeyValue {
	if x != nil {
		return x.KVs
	}
	return nil
}

type SKVList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SKVs []*StructuredKeyValue `protobuf:"bytes,1,rep,name=SKVs,proto3" json:"SKVs,omitempty"`
}

func (x *SKVList) Reset() {
	*x = SKVList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKVList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKVList) ProtoMessage() {}

func (x *SKVList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKVList.ProtoReflect.Descriptor instead.
func (*SKVList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{23}
}

func (x *SKVList) GetSKVs() []*StructuredKeyValue {
	if x != nil {
		return x.SKVs
	}
	return nil
}

type KeyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*Key `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *KeyList) Reset() {
	*x = KeyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyList) ProtoMessage() {}

func (x *KeyList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyList.ProtoReflect.Descriptor instead.
func (*KeyList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{24}
}

func (x *KeyList) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ItemList) Reset() {
	*x = ItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemList) ProtoMessage() {}

func (x *ItemList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemList.ProtoReflect.Descriptor instead.
func (*ItemList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{25}
}

func (x *ItemList) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type ZItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item          *Item   `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Score         float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	CurrentOffset []byte  `protobuf:"bytes,3,opt,name=currentOffset,proto3" json:"currentOffset,omitempty"`
	Index         uint64  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ZItem) Reset() {
	*x = ZItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZItem) ProtoMessage() {}

func (x *ZItem) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZItem.ProtoReflect.Descriptor instead.
func (*ZItem) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{26}
}

func (x *ZItem) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ZItem) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ZItem) GetCurrentOffset() []byte {
	if x != nil {
		return x.CurrentOffset
	}
	return nil
}

func (x *ZItem) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ZItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ZItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ZItemList) Reset() {
	*x = ZItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZItemList) ProtoMessage() {}

func (x *ZItemList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZItemList.ProtoReflect.Descriptor instead.
func (*ZItemList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{27}
}

func (x *ZItemList) GetItems() []*ZItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type StructuredItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*StructuredItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *StructuredItemList) Reset() {
	*x = StructuredItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredItemList) ProtoMessage() {}

func (x *StructuredItemList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredItemList.ProtoReflect.Descriptor instead.
func (*StructuredItemList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{28}
}

func (x *StructuredItemList) GetItems() []*StructuredItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ZStructuredItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ZStructuredItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ZStructuredItemList) Reset() {
	*x = ZStructuredItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZStructuredItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZStructuredItemList) ProtoMessage() {}

func (x *ZStructuredItemList) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZStructuredItemList.ProtoReflect.Descriptor instead.
func (*ZStructuredItemList) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{29}
}

func (x *ZStructuredItemList) GetItems() []*ZStructuredItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ZStructuredItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item          *StructuredItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Score         float64         `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	CurrentOffset []byte          `protobuf:"bytes,3,opt,name=currentOffset,proto3" json:"currentOffset,omitempty"`
	Index         uint64          `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ZStructuredItem) Reset() {
	*x = ZStructuredItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZStructuredItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZStructuredItem) ProtoMessage() {}

func (x *ZStructuredItem) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZStructuredItem.ProtoReflect.Descriptor instead.
func (*ZStructuredItem) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{30}
}

func (x *ZStructuredItem) GetItem() *StructuredItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ZStructuredItem) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ZStructuredItem) GetCurrentOffset() []byte {
	if x != nil {
		return x.CurrentOffset
	}
	return nil
}

func (x *ZStructuredItem) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *RootIndex `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Root) Reset() {
	*x = Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{31}
}

func (x *Root) GetPayload() *RootIndex {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Root) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RootIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Root  []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *RootIndex) Reset() {
	*x = RootIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootIndex) ProtoMessage() {}

func (x *RootIndex) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootIndex.ProtoReflect.Descriptor instead.
func (*RootIndex) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{32}
}

func (x *RootIndex) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RootIndex) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{33}
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ScanOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix  []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Offset  []byte `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Reverse bool   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Deep    bool   `protobuf:"varint,5,opt,name=deep,proto3" json:"deep,omitempty"`
}

func (x *ScanOptions) Reset() {
	*x = ScanOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanOptions) ProtoMessage() {}

func (x *ScanOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanOptions.ProtoReflect.Descriptor instead.
func (*ScanOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{34}
}

func (x *ScanOptions) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *ScanOptions) GetOffset() []byte {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ScanOptions) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ScanOptions) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ScanOptions) GetDeep() bool {
	if x != nil {
		return x.Deep
	}
	return false
}

type KeyPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *KeyPrefix) Reset() {
	*x = KeyPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPrefix) ProtoMessage() {}

func (x *KeyPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPrefix.ProtoReflect.Descriptor instead.
func (*KeyPrefix) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{35}
}

func (x *KeyPrefix) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type ItemsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ItemsCount) Reset() {
	*x = ItemsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemsCount) ProtoMessage() {}

func (x *ItemsCount) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemsCount.ProtoReflect.Descriptor instead.
func (*ItemsCount) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{36}
}

func (x *ItemsCount) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InclusionProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I     uint64   `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	J     uint64   `protobuf:"varint,2,opt,name=j,proto3" json:"j,omitempty"`
	ILeaf []byte   `protobuf:"bytes,3,opt,name=iLeaf,proto3" json:"iLeaf,omitempty"`
	JRoot []byte   `protobuf:"bytes,4,opt,name=jRoot,proto3" json:"jRoot,omitempty"`
	Terms [][]byte `protobuf:"bytes,5,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *InclusionProof) Reset() {
	*x = InclusionProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InclusionProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InclusionProof) ProtoMessage() {}

func (x *InclusionProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InclusionProof.ProtoReflect.Descriptor instead.
func (*InclusionProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{37}
}

func (x *InclusionProof) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *InclusionProof) GetJ() uint64 {
	if x != nil {
		return x.J
	}
	return 0
}

func (x *InclusionProof) GetILeaf() []byte {
	if x != nil {
		return x.ILeaf
	}
	return nil
}

func (x *InclusionProof) GetJRoot() []byte {
	if x != nil {
		return x.JRoot
	}
	return nil
}

func (x *InclusionProof) GetTerms() [][]byte {
	if x != nil {
		return x.Terms
	}
	return nil
}

type ConsistencyProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I     uint64   `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	J     uint64   `protobuf:"varint,2,opt,name=j,proto3" json:"j,omitempty"`
	IRoot []byte   `protobuf:"bytes,3,opt,name=iRoot,proto3" json:"iRoot,omitempty"`
	JRoot []byte   `protobuf:"bytes,4,opt,name=jRoot,proto3" json:"jRoot,omitempty"`
	Terms [][]byte `protobuf:"bytes,5,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *ConsistencyProof) Reset() {
	*x = ConsistencyProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyProof) ProtoMessage() {}

func (x *ConsistencyProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyProof.ProtoReflect.Descriptor instead.
func (*ConsistencyProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{38}
}

func (x *ConsistencyProof) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *ConsistencyProof) GetJ() uint64 {
	if x != nil {
		return x.J
	}
	return 0
}

func (x *ConsistencyProof) GetIRoot() []byte {
	if x != nil {
		return x.IRoot
	}
	return nil
}

func (x *ConsistencyProof) GetJRoot() []byte {
	if x != nil {
		return x.JRoot
	}
	return nil
}

func (x *ConsistencyProof) GetTerms() [][]byte {
	if x != nil {
		return x.Terms
	}
	return nil
}

type TxMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrevAlh  []byte `protobuf:"bytes,2,opt,name=prevAlh,proto3" json:"prevAlh,omitempty"`
	Ts       int64  `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Nentries int32  `protobuf:"varint,4,opt,name=nentries,proto3" json:"nentries,omitempty"`
	EH       []byte `protobuf:"bytes,5,opt,name=eH,proto3" json:"eH,omitempty"`
	BlTxId   uint64 `protobuf:"varint,6,opt,name=blTxId,proto3" json:"blTxId,omitempty"`
	BlRoot   []byte `protobuf:"bytes,7,opt,name=blRoot,proto3" json:"blRoot,omitempty"`
}

func (x *TxMetadata) Reset() {
	*x = TxMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxMetadata) ProtoMessage() {}

func (x *TxMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxMetadata.ProtoReflect.Descriptor instead.
func (*TxMetadata) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{39}
}

func (x *TxMetadata) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TxMetadata) GetPrevAlh() []byte {
	if x != nil {
		return x.PrevAlh
	}
	return nil
}

func (x *TxMetadata) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *TxMetadata) GetNentries() int32 {
	if x != nil {
		return x.Nentries
	}
	return 0
}

func (x *TxMetadata) GetEH() []byte {
	if x != nil {
		return x.EH
	}
	return nil
}

func (x *TxMetadata) GetBlTxId() uint64 {
	if x != nil {
		return x.BlTxId
	}
	return 0
}

func (x *TxMetadata) GetBlRoot() []byte {
	if x != nil {
		return x.BlRoot
	}
	return nil
}

type LinearProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I     uint64   `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	J     uint64   `protobuf:"varint,2,opt,name=j,proto3" json:"j,omitempty"`
	IAlh  []byte   `protobuf:"bytes,3,opt,name=iAlh,proto3" json:"iAlh,omitempty"`
	JAlh  []byte   `protobuf:"bytes,4,opt,name=jAlh,proto3" json:"jAlh,omitempty"`
	Terms [][]byte `protobuf:"bytes,5,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *LinearProof) Reset() {
	*x = LinearProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearProof) ProtoMessage() {}

func (x *LinearProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearProof.ProtoReflect.Descriptor instead.
func (*LinearProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{40}
}

func (x *LinearProof) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *LinearProof) GetJ() uint64 {
	if x != nil {
		return x.J
	}
	return 0
}

func (x *LinearProof) GetIAlh() []byte {
	if x != nil {
		return x.IAlh
	}
	return nil
}

func (x *LinearProof) GetJAlh() []byte {
	if x != nil {
		return x.JAlh
	}
	return nil
}

func (x *LinearProof) GetTerms() [][]byte {
	if x != nil {
		return x.Terms
	}
	return nil
}

type DualProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTxMetadata   *TxMetadata       `protobuf:"bytes,1,opt,name=sourceTxMetadata,proto3" json:"sourceTxMetadata,omitempty"`
	TargetTxMetadata   *TxMetadata       `protobuf:"bytes,2,opt,name=targetTxMetadata,proto3" json:"targetTxMetadata,omitempty"`
	InclusionProof     *InclusionProof   `protobuf:"bytes,3,opt,name=inclusionProof,proto3" json:"inclusionProof,omitempty"`
	ConsistencyProof   *ConsistencyProof `protobuf:"bytes,4,opt,name=consistencyProof,proto3" json:"consistencyProof,omitempty"`
	TargetBlTxAlh      []byte            `protobuf:"bytes,5,opt,name=targetBlTxAlh,proto3" json:"targetBlTxAlh,omitempty"`
	LastInclusionProof *InclusionProof   `protobuf:"bytes,6,opt,name=lastInclusionProof,proto3" json:"lastInclusionProof,omitempty"`
	LinearProof        *LinearProof      `protobuf:"bytes,7,opt,name=linearProof,proto3" json:"linearProof,omitempty"`
}

func (x *DualProof) Reset() {
	*x = DualProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DualProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DualProof) ProtoMessage() {}

func (x *DualProof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DualProof.ProtoReflect.Descriptor instead.
func (*DualProof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{41}
}

func (x *DualProof) GetSourceTxMetadata() *TxMetadata {
	if x != nil {
		return x.SourceTxMetadata
	}
	return nil
}

func (x *DualProof) GetTargetTxMetadata() *TxMetadata {
	if x != nil {
		return x.TargetTxMetadata
	}
	return nil
}

func (x *DualProof) GetInclusionProof() *InclusionProof {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *DualProof) GetConsistencyProof() *ConsistencyProof {
	if x != nil {
		return x.ConsistencyProof
	}
	return nil
}

func (x *DualProof) GetTargetBlTxAlh() []byte {
	if x != nil {
		return x.TargetBlTxAlh
	}
	return nil
}

func (x *DualProof) GetLastInclusionProof() *InclusionProof {
	if x != nil {
		return x.LastInclusionProof
	}
	return nil
}

func (x *DualProof) GetLinearProof() *LinearProof {
	if x != nil {
		return x.LinearProof
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *TxMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Entries  []*TxEntry  `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{42}
}

func (x *Tx) GetMetadata() *TxMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Tx) GetEntries() []*TxEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TxEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	HValue []byte `protobuf:"bytes,2,opt,name=hValue,proto3" json:"hValue,omitempty"`
	VOff   int64  `protobuf:"varint,3,opt,name=vOff,proto3" json:"vOff,omitempty"`
}

func (x *TxEntry) Reset() {
	*x = TxEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxEntry) ProtoMessage() {}

func (x *TxEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxEntry.ProtoReflect.Descriptor instead.
func (*TxEntry) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{43}
}

func (x *TxEntry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TxEntry) GetHValue() []byte {
	if x != nil {
		return x.HValue
	}
	return nil
}

func (x *TxEntry) GetVOff() int64 {
	if x != nil {
		return x.VOff
	}
	return 0
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *TxMetadata     `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Entry          *TxEntry        `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	InclusionProof *InclusionProof `protobuf:"bytes,3,opt,name=inclusionProof,proto3" json:"inclusionProof,omitempty"`
	DualProof      *DualProof      `protobuf:"bytes,4,opt,name=dualProof,proto3" json:"dualProof,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{44}
}

func (x *Proof) GetMetadata() *TxMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Proof) GetEntry() *TxEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *Proof) GetInclusionProof() *InclusionProof {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *Proof) GetDualProof() *DualProof {
	if x != nil {
		return x.DualProof
	}
	return nil
}

type SafeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item  *Item  `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Proof *Proof `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *SafeItem) Reset() {
	*x = SafeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeItem) ProtoMessage() {}

func (x *SafeItem) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeItem.ProtoReflect.Descriptor instead.
func (*SafeItem) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{45}
}

func (x *SafeItem) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *SafeItem) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type SafeStructuredItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item  *StructuredItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Proof *Proof          `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *SafeStructuredItem) Reset() {
	*x = SafeStructuredItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeStructuredItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeStructuredItem) ProtoMessage() {}

func (x *SafeStructuredItem) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeStructuredItem.ProtoReflect.Descriptor instead.
func (*SafeStructuredItem) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{46}
}

func (x *SafeStructuredItem) GetItem() *StructuredItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *SafeStructuredItem) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type SafeSetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kv        *KeyValue `protobuf:"bytes,1,opt,name=kv,proto3" json:"kv,omitempty"`
	RootIndex *Index    `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
}

func (x *SafeSetOptions) Reset() {
	*x = SafeSetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeSetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeSetOptions) ProtoMessage() {}

func (x *SafeSetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeSetOptions.ProtoReflect.Descriptor instead.
func (*SafeSetOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{47}
}

func (x *SafeSetOptions) GetKv() *KeyValue {
	if x != nil {
		return x.Kv
	}
	return nil
}

func (x *SafeSetOptions) GetRootIndex() *Index {
	if x != nil {
		return x.RootIndex
	}
	return nil
}

type SafeSetSVOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skv       *StructuredKeyValue `protobuf:"bytes,1,opt,name=skv,proto3" json:"skv,omitempty"`
	RootIndex *Index              `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
}

func (x *SafeSetSVOptions) Reset() {
	*x = SafeSetSVOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeSetSVOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeSetSVOptions) ProtoMessage() {}

func (x *SafeSetSVOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeSetSVOptions.ProtoReflect.Descriptor instead.
func (*SafeSetSVOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{48}
}

func (x *SafeSetSVOptions) GetSkv() *StructuredKeyValue {
	if x != nil {
		return x.Skv
	}
	return nil
}

func (x *SafeSetSVOptions) GetRootIndex() *Index {
	if x != nil {
		return x.RootIndex
	}
	return nil
}

type SafeGetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	RootIndex *Index `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
}

func (x *SafeGetOptions) Reset() {
	*x = SafeGetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeGetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeGetOptions) ProtoMessage() {}

func (x *SafeGetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeGetOptions.ProtoReflect.Descriptor instead.
func (*SafeGetOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{49}
}

func (x *SafeGetOptions) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SafeGetOptions) GetRootIndex() *Index {
	if x != nil {
		return x.RootIndex
	}
	return nil
}

type SafeReferenceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ro        *ReferenceOptions `protobuf:"bytes,1,opt,name=ro,proto3" json:"ro,omitempty"`
	RootIndex *Index            `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
}

func (x *SafeReferenceOptions) Reset() {
	*x = SafeReferenceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeReferenceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeReferenceOptions) ProtoMessage() {}

func (x *SafeReferenceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeReferenceOptions.ProtoReflect.Descriptor instead.
func (*SafeReferenceOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{50}
}

func (x *SafeReferenceOptions) GetRo() *ReferenceOptions {
	if x != nil {
		return x.Ro
	}
	return nil
}

func (x *SafeReferenceOptions) GetRootIndex() *Index {
	if x != nil {
		return x.RootIndex
	}
	return nil
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{51}
}

func (x *HealthResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *HealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ReferenceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference []byte `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Index     *Index `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ReferenceOptions) Reset() {
	*x = ReferenceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceOptions) ProtoMessage() {}

func (x *ReferenceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceOptions.ProtoReflect.Descriptor instead.
func (*ReferenceOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{52}
}

func (x *ReferenceOptions) GetReference() []byte {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *ReferenceOptions) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReferenceOptions) GetIndex() *Index {
	if x != nil {
		return x.Index
	}
	return nil
}

type ZAddOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set   []byte `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	Score *Score `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Key   []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Index *Index `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ZAddOptions) Reset() {
	*x = ZAddOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZAddOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZAddOptions) ProtoMessage() {}

func (x *ZAddOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZAddOptions.ProtoReflect.Descriptor instead.
func (*ZAddOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{53}
}

func (x *ZAddOptions) GetSet() []byte {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ZAddOptions) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ZAddOptions) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ZAddOptions) GetIndex() *Index {
	if x != nil {
		return x.Index
	}
	return nil
}

type ZScanOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set     []byte `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	Offset  []byte `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Reverse bool   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Min     *Score `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	Max     *Score `protobuf:"bytes,6,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ZScanOptions) Reset() {
	*x = ZScanOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZScanOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZScanOptions) ProtoMessage() {}

func (x *ZScanOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZScanOptions.ProtoReflect.Descriptor instead.
func (*ZScanOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{54}
}

func (x *ZScanOptions) GetSet() []byte {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ZScanOptions) GetOffset() []byte {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ZScanOptions) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ZScanOptions) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ZScanOptions) GetMin() *Score {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ZScanOptions) GetMax() *Score {
	if x != nil {
		return x.Max
	}
	return nil
}

type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{55}
}

func (x *Score) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type IScanOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   uint64 `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNumber uint64 `protobuf:"varint,2,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
}

func (x *IScanOptions) Reset() {
	*x = IScanOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IScanOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IScanOptions) ProtoMessage() {}

func (x *IScanOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IScanOptions.ProtoReflect.Descriptor instead.
func (*IScanOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{56}
}

func (x *IScanOptions) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *IScanOptions) GetPageNumber() uint64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	More  bool    `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{57}
}

func (x *Page) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Page) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

type SPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*StructuredItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	PageNum uint64            `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	More    bool              `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`
}

func (x *SPage) Reset() {
	*x = SPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPage) ProtoMessage() {}

func (x *SPage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPage.ProtoReflect.Descriptor instead.
func (*SPage) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{58}
}

func (x *SPage) GetItems() []*StructuredItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SPage) GetPageNum() uint64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SPage) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

type HistoryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Offset  uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Reverse bool   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *HistoryOptions) Reset() {
	*x = HistoryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryOptions) ProtoMessage() {}

func (x *HistoryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryOptions.ProtoReflect.Descriptor instead.
func (*HistoryOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{59}
}

func (x *HistoryOptions) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HistoryOptions) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *HistoryOptions) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HistoryOptions) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type SafeZAddOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zopts     *ZAddOptions `protobuf:"bytes,1,opt,name=zopts,proto3" json:"zopts,omitempty"`
	RootIndex *Index       `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
}

func (x *SafeZAddOptions) Reset() {
	*x = SafeZAddOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeZAddOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeZAddOptions) ProtoMessage() {}

func (x *SafeZAddOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeZAddOptions.ProtoReflect.Descriptor instead.
func (*SafeZAddOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{60}
}

func (x *SafeZAddOptions) GetZopts() *ZAddOptions {
	if x != nil {
		return x.Zopts
	}
	return nil
}

func (x *SafeZAddOptions) GetRootIndex() *Index {
	if x != nil {
		return x.RootIndex
	}
	return nil
}

type SafeIndexOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	RootIndex *Index `protobuf:"bytes,2,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
}

func (x *SafeIndexOptions) Reset() {
	*x = SafeIndexOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeIndexOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeIndexOptions) ProtoMessage() {}

func (x *SafeIndexOptions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeIndexOptions.ProtoReflect.Descriptor instead.
func (*SafeIndexOptions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{61}
}

func (x *SafeIndexOptions) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SafeIndexOptions) GetRootIndex() *Index {
	if x != nil {
		return x.RootIndex
	}
	return nil
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Databasename string `protobuf:"bytes,1,opt,name=databasename,proto3" json:"databasename,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{62}
}

func (x *Database) GetDatabasename() string {
	if x != nil {
		return x.Databasename
	}
	return ""
}

type UseDatabaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UseDatabaseReply) Reset() {
	*x = UseDatabaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseDatabaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseDatabaseReply) ProtoMessage() {}

func (x *UseDatabaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseDatabaseReply.ProtoReflect.Descriptor instead.
func (*UseDatabaseReply) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{63}
}

func (x *UseDatabaseReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ChangePermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action     PermissionAction `protobuf:"varint,1,opt,name=action,proto3,enum=immudb.schema.PermissionAction" json:"action,omitempty"`
	Username   string           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Database   string           `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Permission uint32           `protobuf:"varint,4,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *ChangePermissionRequest) Reset() {
	*x = ChangePermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePermissionRequest) ProtoMessage() {}

func (x *ChangePermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePermissionRequest.ProtoReflect.Descriptor instead.
func (*ChangePermissionRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{64}
}

func (x *ChangePermissionRequest) GetAction() PermissionAction {
	if x != nil {
		return x.Action
	}
	return PermissionAction_GRANT
}

func (x *ChangePermissionRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChangePermissionRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ChangePermissionRequest) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

type SetActiveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active   bool   `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SetActiveUserRequest) Reset() {
	*x = SetActiveUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveUserRequest) ProtoMessage() {}

func (x *SetActiveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveUserRequest.ProtoReflect.Descriptor instead.
func (*SetActiveUserRequest) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{65}
}

func (x *SetActiveUserRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SetActiveUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DatabaseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Databases []*Database `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *DatabaseListResponse) Reset() {
	*x = DatabaseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseListResponse) ProtoMessage() {}

func (x *DatabaseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseListResponse.ProtoReflect.Descriptor instead.
func (*DatabaseListResponse) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{66}
}

func (x *DatabaseListResponse) GetDatabases() []*Database {
	if x != nil {
		return x.Databases
	}
	return nil
}

var File_schema_proto protoreflect.FileDescriptor

var file_schema_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x48, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x35, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x6f, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x3e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x3f, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x22, 0x20, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x26, 0x0a, 0x0a, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x72, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x69, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72,
	0x65, 0x66, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22,
	0x2a, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x01, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x01, 0x6c, 0x22, 0x2a, 0x0a, 0x04, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x01, 0x74, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x02,
	0x4f, 0x70, 0x12, 0x2b, 0x0a, 0x03, 0x4b, 0x56, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x4b, 0x56, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x5a, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a,
	0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x5a, 0x4f,
	0x70, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x52, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x52, 0x4f, 0x70, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x03, 0x4f, 0x70, 0x73,
	0x12, 0x31, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x1d, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x44, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x66, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x33, 0x0a, 0x06, 0x4b, 0x56, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x4b, 0x56, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x4b, 0x56, 0x73, 0x22, 0x40,
	0x0a, 0x07, 0x53, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x53, 0x4b, 0x56,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x53, 0x4b, 0x56, 0x73,
	0x22, 0x31, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x35, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x5a,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x37, 0x0a, 0x09, 0x5a, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x4b, 0x0a, 0x13, 0x5a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x96, 0x01, 0x0a, 0x0f, 0x5a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x72, 0x0a, 0x04, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x35, 0x0a,
	0x09, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x22, 0x47, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x81, 0x01,
	0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x65,
	0x70, 0x22, 0x23, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x22, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0e, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x0c, 0x0a, 0x01,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x6a, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6a, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x4c, 0x65, 0x61,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0x70, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x0c,
	0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01,
	0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6a, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6a, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6a, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xa2, 0x01, 0x0a,
	0x0a, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x41, 0x6c, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x41, 0x6c, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x48, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x65,
	0x48, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x54, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x62, 0x6c, 0x54, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x6c, 0x52, 0x6f, 0x6f,
	0x74, 0x22, 0x67, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x69, 0x12, 0x0c,
	0x0a, 0x01, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6a, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x41, 0x6c, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x41, 0x6c, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x6a, 0x41, 0x6c, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6a, 0x41, 0x6c, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xe0, 0x03, 0x0a, 0x09, 0x44,
	0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x45, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x78, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4b, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x54, 0x78, 0x41, 0x6c, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x54, 0x78, 0x41, 0x6c, 0x68,
	0x12, 0x4d, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x3c, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x6d, 0x0a,
	0x02, 0x54, 0x78, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x07,
	0x54, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x4f, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x76, 0x4f, 0x66, 0x66, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x09, 0x64,
	0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44,
	0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x5f, 0x0a, 0x08, 0x53, 0x61, 0x66, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x27, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x22, 0x73, 0x0a, 0x12, 0x53, 0x61, 0x66, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x61, 0x66,
	0x65, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x6b,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x6b, 0x76, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x72,
	0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7b, 0x0a, 0x10, 0x53, 0x61, 0x66, 0x65,
	0x53, 0x65, 0x74, 0x53, 0x56, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x03,
	0x73, 0x6b, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x6b,
	0x76, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x56, 0x0a, 0x0e, 0x53, 0x61, 0x66, 0x65, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7b, 0x0a,
	0x14, 0x53, 0x61, 0x66, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x02, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x02, 0x72, 0x6f, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x42, 0x0a, 0x0e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6e,
	0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x89,
	0x01, 0x0a, 0x0b, 0x5a, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x5a,
	0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x26, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x1d, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x49, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x45, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x05, 0x53, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d,
	0x6f, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22,
	0x77, 0x0a, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x5a, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x7a, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x5a, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x7a,
	0x6f, 0x70, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x72,
	0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5c, 0x0a, 0x10, 0x53, 0x61, 0x66, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x72, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x2e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xaa, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2a, 0x29, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x10, 0x01, 0x32, 0x81, 0x1f, 0x0a, 0x0b, 0x49, 0x6d, 0x6d, 0x75, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75,
	0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01,
	0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x47, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x02, 0x62, 0x00,
	0x12, 0x5d, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x57, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x69, 0x74, 0x65, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x07, 0x53, 0x61, 0x66, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x61, 0x66, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x54, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x13, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d,
	0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d,
	0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x6d, 0x0a, 0x07, 0x53, 0x61, 0x66, 0x65, 0x47, 0x65,
	0x74, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x61, 0x66, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x61, 0x66, 0x65, 0x2f, 0x67,
	0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x15, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75,
	0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x73, 0x12, 0x12, 0x2e, 0x69, 0x6d, 0x6d, 0x75,
	0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x73, 0x1a, 0x14, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x63, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d,
	0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f,
	0x73, 0x63, 0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x7d, 0x12, 0x66, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x0b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x72, 0x0a,
	0x09, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d,
	0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x7d, 0x12, 0x78, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12,
	0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12, 0x62, 0x0a, 0x07, 0x42,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x13, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x74, 0x65,
	0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12,
	0x7a, 0x0a, 0x0b, 0x42, 0x79, 0x53, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x61, 0x66, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x61, 0x66, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x61, 0x66, 0x65, 0x2f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12, 0x67, 0x0a, 0x07, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75,
	0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x92,
	0x41, 0x02, 0x62, 0x00, 0x12, 0x6a, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x62, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x13, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x7b,
	0x6b, 0x65, 0x79, 0x7d, 0x12, 0x77, 0x0a, 0x0d, 0x53, 0x61, 0x66, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d,
	0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x61, 0x66, 0x65,
	0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a,
	0x04, 0x5a, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x7a, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x05, 0x5a, 0x53,
	0x63, 0x61, 0x6e, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x5a, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x7a, 0x73, 0x63, 0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x68,
	0x0a, 0x08, 0x53, 0x61, 0x66, 0x65, 0x5a, 0x41, 0x64, 0x64, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x5a,
	0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d,
	0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x61, 0x66, 0x65,
	0x2f, 0x7a, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x05, 0x49, 0x53, 0x63, 0x61,
	0x6e, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x49, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x13,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69,
	0x73, 0x63, 0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x04, 0x44, 0x75, 0x6d, 0x70, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x64,
	0x75, 0x6d, 0x70, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x1a, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x75, 0x73, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x74, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x72, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x8b, 0x03, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x6f, 0x74, 0x61, 0x72,
	0x79, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x92, 0x41, 0xda, 0x02, 0x12, 0xee, 0x01, 0x0a, 0x0f,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x41, 0x50, 0x49, 0x12,
	0xda, 0x01, 0x3c, 0x62, 0x3e, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x54, 0x3c, 0x2f,
	0x62, 0x3e, 0x3a, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x67, 0x65,
	0x74, 0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x3c, 0x63, 0x6f,
	0x64, 0x65, 0x3e, 0x73, 0x61, 0x66, 0x65, 0x67, 0x65, 0x74, 0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x3e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x3c, 0x75, 0x3e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x2d, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x3c, 0x2f, 0x75, 0x3e, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x73, 0x65, 0x74, 0x3c, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x3e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x73,
	0x61, 0x66, 0x65, 0x73, 0x65, 0x74, 0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x20, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x20, 0x3c,
	0x75, 0x3e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x3c, 0x2f, 0x75, 0x3e, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x5a, 0x59, 0x0a, 0x57,
	0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_proto_rawDescOnce sync.Once
	file_schema_proto_rawDescData = file_schema_proto_rawDesc
)

func file_schema_proto_rawDescGZIP() []byte {
	file_schema_proto_rawDescOnce.Do(func() {
		file_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_proto_rawDescData)
	})
	return file_schema_proto_rawDescData
}

var file_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_schema_proto_goTypes = []interface{}{
	(PermissionAction)(0),           // 0: immudb.schema.PermissionAction
	(*Key)(nil),                     // 1: immudb.schema.Key
	(*Permission)(nil),              // 2: immudb.schema.Permission
	(*User)(nil),                    // 3: immudb.schema.User
	(*UserList)(nil),                // 4: immudb.schema.UserList
	(*CreateUserRequest)(nil),       // 5: immudb.schema.CreateUserRequest
	(*UserRequest)(nil),             // 6: immudb.schema.UserRequest
	(*ChangePasswordRequest)(nil),   // 7: immudb.schema.ChangePasswordRequest
	(*LoginRequest)(nil),            // 8: immudb.schema.LoginRequest
	(*LoginResponse)(nil),           // 9: immudb.schema.LoginResponse
	(*AuthConfig)(nil),              // 10: immudb.schema.AuthConfig
	(*MTLSConfig)(nil),              // 11: immudb.schema.MTLSConfig
	(*Node)(nil),                    // 12: immudb.schema.Node
	(*Layer)(nil),                   // 13: immudb.schema.Layer
	(*Tree)(nil),                    // 14: immudb.schema.Tree
	(*KeyValue)(nil),                // 15: immudb.schema.KeyValue
	(*Op)(nil),                      // 16: immudb.schema.Op
	(*Ops)(nil),                     // 17: immudb.schema.Ops
	(*StructuredKeyValue)(nil),      // 18: immudb.schema.StructuredKeyValue
	(*Content)(nil),                 // 19: immudb.schema.Content
	(*Index)(nil),                   // 20: immudb.schema.Index
	(*Item)(nil),                    // 21: immudb.schema.Item
	(*StructuredItem)(nil),          // 22: immudb.schema.StructuredItem
	(*KVList)(nil),                  // 23: immudb.schema.KVList
	(*SKVList)(nil),                 // 24: immudb.schema.SKVList
	(*KeyList)(nil),                 // 25: immudb.schema.KeyList
	(*ItemList)(nil),                // 26: immudb.schema.ItemList
	(*ZItem)(nil),                   // 27: immudb.schema.ZItem
	(*ZItemList)(nil),               // 28: immudb.schema.ZItemList
	(*StructuredItemList)(nil),      // 29: immudb.schema.StructuredItemList
	(*ZStructuredItemList)(nil),     // 30: immudb.schema.ZStructuredItemList
	(*ZStructuredItem)(nil),         // 31: immudb.schema.ZStructuredItem
	(*Root)(nil),                    // 32: immudb.schema.Root
	(*RootIndex)(nil),               // 33: immudb.schema.RootIndex
	(*Signature)(nil),               // 34: immudb.schema.Signature
	(*ScanOptions)(nil),             // 35: immudb.schema.ScanOptions
	(*KeyPrefix)(nil),               // 36: immudb.schema.KeyPrefix
	(*ItemsCount)(nil),              // 37: immudb.schema.ItemsCount
	(*InclusionProof)(nil),          // 38: immudb.schema.InclusionProof
	(*ConsistencyProof)(nil),        // 39: immudb.schema.ConsistencyProof
	(*TxMetadata)(nil),              // 40: immudb.schema.TxMetadata
	(*LinearProof)(nil),             // 41: immudb.schema.LinearProof
	(*DualProof)(nil),               // 42: immudb.schema.DualProof
	(*Tx)(nil),                      // 43: immudb.schema.Tx
	(*TxEntry)(nil),                 // 44: immudb.schema.TxEntry
	(*Proof)(nil),                   // 45: immudb.schema.Proof
	(*SafeItem)(nil),                // 46: immudb.schema.SafeItem
	(*SafeStructuredItem)(nil),      // 47: immudb.schema.SafeStructuredItem
	(*SafeSetOptions)(nil),          // 48: immudb.schema.SafeSetOptions
	(*SafeSetSVOptions)(nil),        // 49: immudb.schema.SafeSetSVOptions
	(*SafeGetOptions)(nil),          // 50: immudb.schema.SafeGetOptions
	(*SafeReferenceOptions)(nil),    // 51: immudb.schema.SafeReferenceOptions
	(*HealthResponse)(nil),          // 52: immudb.schema.HealthResponse
	(*ReferenceOptions)(nil),        // 53: immudb.schema.ReferenceOptions
	(*ZAddOptions)(nil),             // 54: immudb.schema.ZAddOptions
	(*ZScanOptions)(nil),            // 55: immudb.schema.ZScanOptions
	(*Score)(nil),                   // 56: immudb.schema.Score
	(*IScanOptions)(nil),            // 57: immudb.schema.IScanOptions
	(*Page)(nil),                    // 58: immudb.schema.Page
	(*SPage)(nil),                   // 59: immudb.schema.SPage
	(*HistoryOptions)(nil),          // 60: immudb.schema.HistoryOptions
	(*SafeZAddOptions)(nil),         // 61: immudb.schema.SafeZAddOptions
	(*SafeIndexOptions)(nil),        // 62: immudb.schema.SafeIndexOptions
	(*Database)(nil),                // 63: immudb.schema.Database
	(*UseDatabaseReply)(nil),        // 64: immudb.schema.UseDatabaseReply
	(*ChangePermissionRequest)(nil), // 65: immudb.schema.ChangePermissionRequest
	(*SetActiveUserRequest)(nil),    // 66: immudb.schema.SetActiveUserRequest
	(*DatabaseListResponse)(nil),    // 67: immudb.schema.DatabaseListResponse
	(*empty.Empty)(nil),             // 68: google.protobuf.Empty
	(*pb.KVList)(nil),               // 69: pb.KVList
}
var file_schema_proto_depIdxs = []int32{
	2,  // 0: immudb.schema.User.permissions:type_name -> immudb.schema.Permission
	3,  // 1: immudb.schema.UserList.users:type_name -> immudb.schema.User
	12, // 2: immudb.schema.Layer.l:type_name -> immudb.schema.Node
	13, // 3: immudb.schema.Tree.t:type_name -> immudb.schema.Layer
	15, // 4: immudb.schema.Op.KVs:type_name -> immudb.schema.KeyValue
	54, // 5: immudb.schema.Op.ZOpts:type_name -> immudb.schema.ZAddOptions
	53, // 6: immudb.schema.Op.ROpts:type_name -> immudb.schema.ReferenceOptions
	16, // 7: immudb.schema.Ops.Operations:type_name -> immudb.schema.Op
	19, // 8: immudb.schema.StructuredKeyValue.value:type_name -> immudb.schema.Content
	19, // 9: immudb.schema.StructuredItem.value:type_name -> immudb.schema.Content
	15, // 10: immudb.schema.KVList.KVs:type_name -> immudb.schema.KeyValue
	18, // 11: immudb.schema.SKVList.SKVs:type_name -> immudb.schema.StructuredKeyValue
	1,  // 12: immudb.schema.KeyList.keys:type_name -> immudb.schema.Key
	21, // 13: immudb.schema.ItemList.items:type_name -> immudb.schema.Item
	21, // 14: immudb.schema.ZItem.item:type_name -> immudb.schema.Item
	27, // 15: immudb.schema.ZItemList.items:type_name -> immudb.schema.ZItem
	22, // 16: immudb.schema.StructuredItemList.items:type_name -> immudb.schema.StructuredItem
	31, // 17: immudb.schema.ZStructuredItemList.items:type_name -> immudb.schema.ZStructuredItem
	22, // 18: immudb.schema.ZStructuredItem.item:type_name -> immudb.schema.StructuredItem
	33, // 19: immudb.schema.Root.payload:type_name -> immudb.schema.RootIndex
	34, // 20: immudb.schema.Root.signature:type_name -> immudb.schema.Signature
	40, // 21: immudb.schema.DualProof.sourceTxMetadata:type_name -> immudb.schema.TxMetadata
	40, // 22: immudb.schema.DualProof.targetTxMetadata:type_name -> immudb.schema.TxMetadata
	38, // 23: immudb.schema.DualProof.inclusionProof:type_name -> immudb.schema.InclusionProof
	39, // 24: immudb.schema.DualProof.consistencyProof:type_name -> immudb.schema.ConsistencyProof
	38, // 25: immudb.schema.DualProof.lastInclusionProof:type_name -> immudb.schema.InclusionProof
	41, // 26: immudb.schema.DualProof.linearProof:type_name -> immudb.schema.LinearProof
	40, // 27: immudb.schema.Tx.metadata:type_name -> immudb.schema.TxMetadata
	44, // 28: immudb.schema.Tx.entries:type_name -> immudb.schema.TxEntry
	40, // 29: immudb.schema.Proof.metadata:type_name -> immudb.schema.TxMetadata
	44, // 30: immudb.schema.Proof.entry:type_name -> immudb.schema.TxEntry
	38, // 31: immudb.schema.Proof.inclusionProof:type_name -> immudb.schema.InclusionProof
	42, // 32: immudb.schema.Proof.dualProof:type_name -> immudb.schema.DualProof
	21, // 33: immudb.schema.SafeItem.item:type_name -> immudb.schema.Item
	45, // 34: immudb.schema.SafeItem.proof:type_name -> immudb.schema.Proof
	22, // 35: immudb.schema.SafeStructuredItem.item:type_name -> immudb.schema.StructuredItem
	45, // 36: immudb.schema.SafeStructuredItem.proof:type_name -> immudb.schema.Proof
	15, // 37: immudb.schema.SafeSetOptions.kv:type_name -> immudb.schema.KeyValue
	20, // 38: immudb.schema.SafeSetOptions.rootIndex:type_name -> immudb.schema.Index
	18, // 39: immudb.schema.SafeSetSVOptions.skv:type_name -> immudb.schema.StructuredKeyValue
	20, // 40: immudb.schema.SafeSetSVOptions.rootIndex:type_name -> immudb.schema.Index
	20, // 41: immudb.schema.SafeGetOptions.rootIndex:type_name -> immudb.schema.Index
	53, // 42: immudb.schema.SafeReferenceOptions.ro:type_name -> immudb.schema.ReferenceOptions
	20, // 43: immudb.schema.SafeReferenceOptions.rootIndex:type_name -> immudb.schema.Index
	20, // 44: immudb.schema.ReferenceOptions.index:type_name -> immudb.schema.Index
	56, // 45: immudb.schema.ZAddOptions.score:type_name -> immudb.schema.Score
	20, // 46: immudb.schema.ZAddOptions.index:type_name -> immudb.schema.Index
	56, // 47: immudb.schema.ZScanOptions.min:type_name -> immudb.schema.Score
	56, // 48: immudb.schema.ZScanOptions.max:type_name -> immudb.schema.Score
	21, // 49: immudb.schema.Page.items:type_name -> immudb.schema.Item
	22, // 50: immudb.schema.SPage.items:type_name -> immudb.schema.StructuredItem
	54, // 51: immudb.schema.SafeZAddOptions.zopts:type_name -> immudb.schema.ZAddOptions
	20, // 52: immudb.schema.SafeZAddOptions.rootIndex:type_name -> immudb.schema.Index
	20, // 53: immudb.schema.SafeIndexOptions.rootIndex:type_name -> immudb.schema.Index
	0,  // 54: immudb.schema.ChangePermissionRequest.action:type_name -> immudb.schema.PermissionAction
	63, // 55: immudb.schema.DatabaseListResponse.databases:type_name -> immudb.schema.Database
	68, // 56: immudb.schema.ImmuService.ListUsers:input_type -> google.protobuf.Empty
	5,  // 57: immudb.schema.ImmuService.CreateUser:input_type -> immudb.schema.CreateUserRequest
	7,  // 58: immudb.schema.ImmuService.ChangePassword:input_type -> immudb.schema.ChangePasswordRequest
	10, // 59: immudb.schema.ImmuService.UpdateAuthConfig:input_type -> immudb.schema.AuthConfig
	11, // 60: immudb.schema.ImmuService.UpdateMTLSConfig:input_type -> immudb.schema.MTLSConfig
	68, // 61: immudb.schema.ImmuService.PrintTree:input_type -> google.protobuf.Empty
	8,  // 62: immudb.schema.ImmuService.Login:input_type -> immudb.schema.LoginRequest
	68, // 63: immudb.schema.ImmuService.Logout:input_type -> google.protobuf.Empty
	15, // 64: immudb.schema.ImmuService.Set:input_type -> immudb.schema.KeyValue
	48, // 65: immudb.schema.ImmuService.SafeSet:input_type -> immudb.schema.SafeSetOptions
	1,  // 66: immudb.schema.ImmuService.Get:input_type -> immudb.schema.Key
	50, // 67: immudb.schema.ImmuService.SafeGet:input_type -> immudb.schema.SafeGetOptions
	23, // 68: immudb.schema.ImmuService.SetBatch:input_type -> immudb.schema.KVList
	25, // 69: immudb.schema.ImmuService.GetBatch:input_type -> immudb.schema.KeyList
	17, // 70: immudb.schema.ImmuService.ExecAllOps:input_type -> immudb.schema.Ops
	35, // 71: immudb.schema.ImmuService.Scan:input_type -> immudb.schema.ScanOptions
	36, // 72: immudb.schema.ImmuService.Count:input_type -> immudb.schema.KeyPrefix
	68, // 73: immudb.schema.ImmuService.CountAll:input_type -> google.protobuf.Empty
	68, // 74: immudb.schema.ImmuService.CurrentRoot:input_type -> google.protobuf.Empty
	20, // 75: immudb.schema.ImmuService.Inclusion:input_type -> immudb.schema.Index
	20, // 76: immudb.schema.ImmuService.Consistency:input_type -> immudb.schema.Index
	20, // 77: immudb.schema.ImmuService.ByIndex:input_type -> immudb.schema.Index
	62, // 78: immudb.schema.ImmuService.BySafeIndex:input_type -> immudb.schema.SafeIndexOptions
	60, // 79: immudb.schema.ImmuService.History:input_type -> immudb.schema.HistoryOptions
	68, // 80: immudb.schema.ImmuService.Health:input_type -> google.protobuf.Empty
	53, // 81: immudb.schema.ImmuService.Reference:input_type -> immudb.schema.ReferenceOptions
	1,  // 82: immudb.schema.ImmuService.GetReference:input_type -> immudb.schema.Key
	51, // 83: immudb.schema.ImmuService.SafeReference:input_type -> immudb.schema.SafeReferenceOptions
	54, // 84: immudb.schema.ImmuService.ZAdd:input_type -> immudb.schema.ZAddOptions
	55, // 85: immudb.schema.ImmuService.ZScan:input_type -> immudb.schema.ZScanOptions
	61, // 86: immudb.schema.ImmuService.SafeZAdd:input_type -> immudb.schema.SafeZAddOptions
	57, // 87: immudb.schema.ImmuService.IScan:input_type -> immudb.schema.IScanOptions
	68, // 88: immudb.schema.ImmuService.Dump:input_type -> google.protobuf.Empty
	63, // 89: immudb.schema.ImmuService.CreateDatabase:input_type -> immudb.schema.Database
	63, // 90: immudb.schema.ImmuService.UseDatabase:input_type -> immudb.schema.Database
	65, // 91: immudb.schema.ImmuService.ChangePermission:input_type -> immudb.schema.ChangePermissionRequest
	66, // 92: immudb.schema.ImmuService.SetActiveUser:input_type -> immudb.schema.SetActiveUserRequest
	68, // 93: immudb.schema.ImmuService.DatabaseList:input_type -> google.protobuf.Empty
	4,  // 94: immudb.schema.ImmuService.ListUsers:output_type -> immudb.schema.UserList
	68, // 95: immudb.schema.ImmuService.CreateUser:output_type -> google.protobuf.Empty
	68, // 96: immudb.schema.ImmuService.ChangePassword:output_type -> google.protobuf.Empty
	68, // 97: immudb.schema.ImmuService.UpdateAuthConfig:output_type -> google.protobuf.Empty
	68, // 98: immudb.schema.ImmuService.UpdateMTLSConfig:output_type -> google.protobuf.Empty
	14, // 99: immudb.schema.ImmuService.PrintTree:output_type -> immudb.schema.Tree
	9,  // 100: immudb.schema.ImmuService.Login:output_type -> immudb.schema.LoginResponse
	68, // 101: immudb.schema.ImmuService.Logout:output_type -> google.protobuf.Empty
	20, // 102: immudb.schema.ImmuService.Set:output_type -> immudb.schema.Index
	45, // 103: immudb.schema.ImmuService.SafeSet:output_type -> immudb.schema.Proof
	21, // 104: immudb.schema.ImmuService.Get:output_type -> immudb.schema.Item
	46, // 105: immudb.schema.ImmuService.SafeGet:output_type -> immudb.schema.SafeItem
	20, // 106: immudb.schema.ImmuService.SetBatch:output_type -> immudb.schema.Index
	26, // 107: immudb.schema.ImmuService.GetBatch:output_type -> immudb.schema.ItemList
	20, // 108: immudb.schema.ImmuService.ExecAllOps:output_type -> immudb.schema.Index
	26, // 109: immudb.schema.ImmuService.Scan:output_type -> immudb.schema.ItemList
	37, // 110: immudb.schema.ImmuService.Count:output_type -> immudb.schema.ItemsCount
	37, // 111: immudb.schema.ImmuService.CountAll:output_type -> immudb.schema.ItemsCount
	32, // 112: immudb.schema.ImmuService.CurrentRoot:output_type -> immudb.schema.Root
	38, // 113: immudb.schema.ImmuService.Inclusion:output_type -> immudb.schema.InclusionProof
	39, // 114: immudb.schema.ImmuService.Consistency:output_type -> immudb.schema.ConsistencyProof
	21, // 115: immudb.schema.ImmuService.ByIndex:output_type -> immudb.schema.Item
	46, // 116: immudb.schema.ImmuService.BySafeIndex:output_type -> immudb.schema.SafeItem
	26, // 117: immudb.schema.ImmuService.History:output_type -> immudb.schema.ItemList
	52, // 118: immudb.schema.ImmuService.Health:output_type -> immudb.schema.HealthResponse
	20, // 119: immudb.schema.ImmuService.Reference:output_type -> immudb.schema.Index
	21, // 120: immudb.schema.ImmuService.GetReference:output_type -> immudb.schema.Item
	45, // 121: immudb.schema.ImmuService.SafeReference:output_type -> immudb.schema.Proof
	20, // 122: immudb.schema.ImmuService.ZAdd:output_type -> immudb.schema.Index
	28, // 123: immudb.schema.ImmuService.ZScan:output_type -> immudb.schema.ZItemList
	45, // 124: immudb.schema.ImmuService.SafeZAdd:output_type -> immudb.schema.Proof
	58, // 125: immudb.schema.ImmuService.IScan:output_type -> immudb.schema.Page
	69, // 126: immudb.schema.ImmuService.Dump:output_type -> pb.KVList
	68, // 127: immudb.schema.ImmuService.CreateDatabase:output_type -> google.protobuf.Empty
	64, // 128: immudb.schema.ImmuService.UseDatabase:output_type -> immudb.schema.UseDatabaseReply
	68, // 129: immudb.schema.ImmuService.ChangePermission:output_type -> google.protobuf.Empty
	68, // 130: immudb.schema.ImmuService.SetActiveUser:output_type -> google.protobuf.Empty
	67, // 131: immudb.schema.ImmuService.DatabaseList:output_type -> immudb.schema.DatabaseListResponse
	94, // [94:132] is the sub-list for method output_type
	56, // [56:94] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_schema_proto_init() }
func file_schema_proto_init() {
	if File_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Op); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKVList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZStructuredItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZStructuredItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InclusionProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DualProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeStructuredItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeSetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeSetSVOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeGetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeReferenceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZAddOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZScanOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IScanOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeZAddOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeIndexOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseDatabaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schema_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Op_KVs)(nil),
		(*Op_ZOpts)(nil),
		(*Op_ROpts)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schema_proto_goTypes,
		DependencyIndexes: file_schema_proto_depIdxs,
		EnumInfos:         file_schema_proto_enumTypes,
		MessageInfos:      file_schema_proto_msgTypes,
	}.Build()
	File_schema_proto = out.File
	file_schema_proto_rawDesc = nil
	file_schema_proto_goTypes = nil
	file_schema_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImmuServiceClient is the client API for ImmuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImmuServiceClient interface {
	ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserList, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateAuthConfig(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateMTLSConfig(ctx context.Context, in *MTLSConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	PrintTree(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tree, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Index, error)
	SafeSet(ctx context.Context, in *SafeSetOptions, opts ...grpc.CallOption) (*Proof, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error)
	SafeGet(ctx context.Context, in *SafeGetOptions, opts ...grpc.CallOption) (*SafeItem, error)
	SetBatch(ctx context.Context, in *KVList, opts ...grpc.CallOption) (*Index, error)
	GetBatch(ctx context.Context, in *KeyList, opts ...grpc.CallOption) (*ItemList, error)
	ExecAllOps(ctx context.Context, in *Ops, opts ...grpc.CallOption) (*Index, error)
	Scan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*ItemList, error)
	Count(ctx context.Context, in *KeyPrefix, opts ...grpc.CallOption) (*ItemsCount, error)
	CountAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ItemsCount, error)
	CurrentRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Root, error)
	Inclusion(ctx context.Context, in *Index, opts ...grpc.CallOption) (*InclusionProof, error)
	Consistency(ctx context.Context, in *Index, opts ...grpc.CallOption) (*ConsistencyProof, error)
	ByIndex(ctx context.Context, in *Index, opts ...grpc.CallOption) (*Item, error)
	BySafeIndex(ctx context.Context, in *SafeIndexOptions, opts ...grpc.CallOption) (*SafeItem, error)
	History(ctx context.Context, in *HistoryOptions, opts ...grpc.CallOption) (*ItemList, error)
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	Reference(ctx context.Context, in *ReferenceOptions, opts ...grpc.CallOption) (*Index, error)
	GetReference(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error)
	SafeReference(ctx context.Context, in *SafeReferenceOptions, opts ...grpc.CallOption) (*Proof, error)
	ZAdd(ctx context.Context, in *ZAddOptions, opts ...grpc.CallOption) (*Index, error)
	ZScan(ctx context.Context, in *ZScanOptions, opts ...grpc.CallOption) (*ZItemList, error)
	SafeZAdd(ctx context.Context, in *SafeZAddOptions, opts ...grpc.CallOption) (*Proof, error)
	IScan(ctx context.Context, in *IScanOptions, opts ...grpc.CallOption) (*Page, error)
	Dump(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ImmuService_DumpClient, error)
	// todo(joe-dz): Enable restore when the feature is required again
	//	rpc Restore(stream pb.KVList) returns (ItemsCount) {
	//		option (google.api.http) = {
	//			post: "/v1/immurestproxy/restore"
	//			body: "*"
	//		};
	//	}
	CreateDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*empty.Empty, error)
	UseDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*UseDatabaseReply, error)
	ChangePermission(ctx context.Context, in *ChangePermissionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetActiveUser(ctx context.Context, in *SetActiveUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DatabaseList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseListResponse, error)
}

type immuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImmuServiceClient(cc grpc.ClientConnInterface) ImmuServiceClient {
	return &immuServiceClient{cc}
}

func (c *immuServiceClient) ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) UpdateAuthConfig(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UpdateAuthConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) UpdateMTLSConfig(ctx context.Context, in *MTLSConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UpdateMTLSConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) PrintTree(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tree, error) {
	out := new(Tree)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/PrintTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeSet(ctx context.Context, in *SafeSetOptions, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeGet(ctx context.Context, in *SafeGetOptions, opts ...grpc.CallOption) (*SafeItem, error) {
	out := new(SafeItem)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SetBatch(ctx context.Context, in *KVList, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) GetBatch(ctx context.Context, in *KeyList, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ExecAllOps(ctx context.Context, in *Ops, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ExecAllOps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Scan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Count(ctx context.Context, in *KeyPrefix, opts ...grpc.CallOption) (*ItemsCount, error) {
	out := new(ItemsCount)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CountAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ItemsCount, error) {
	out := new(ItemsCount)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) CurrentRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Root, error) {
	out := new(Root)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CurrentRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Inclusion(ctx context.Context, in *Index, opts ...grpc.CallOption) (*InclusionProof, error) {
	out := new(InclusionProof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Inclusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Consistency(ctx context.Context, in *Index, opts ...grpc.CallOption) (*ConsistencyProof, error) {
	out := new(ConsistencyProof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Consistency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ByIndex(ctx context.Context, in *Index, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) BySafeIndex(ctx context.Context, in *SafeIndexOptions, opts ...grpc.CallOption) (*SafeItem, error) {
	out := new(SafeItem)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/BySafeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) History(ctx context.Context, in *HistoryOptions, opts ...grpc.CallOption) (*ItemList, error) {
	out := new(ItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Reference(ctx context.Context, in *ReferenceOptions, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/Reference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) GetReference(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/GetReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeReference(ctx context.Context, in *SafeReferenceOptions, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ZAdd(ctx context.Context, in *ZAddOptions, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ZScan(ctx context.Context, in *ZScanOptions, opts ...grpc.CallOption) (*ZItemList, error) {
	out := new(ZItemList)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ZScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SafeZAdd(ctx context.Context, in *SafeZAddOptions, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SafeZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) IScan(ctx context.Context, in *IScanOptions, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/IScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) Dump(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ImmuService_DumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImmuService_serviceDesc.Streams[0], "/immudb.schema.ImmuService/Dump", opts...)
	if err != nil {
		return nil, err
	}
	x := &immuServiceDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImmuService_DumpClient interface {
	Recv() (*pb.KVList, error)
	grpc.ClientStream
}

type immuServiceDumpClient struct {
	grpc.ClientStream
}

func (x *immuServiceDumpClient) Recv() (*pb.KVList, error) {
	m := new(pb.KVList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *immuServiceClient) CreateDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) UseDatabase(ctx context.Context, in *Database, opts ...grpc.CallOption) (*UseDatabaseReply, error) {
	out := new(UseDatabaseReply)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/UseDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) ChangePermission(ctx context.Context, in *ChangePermissionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/ChangePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) SetActiveUser(ctx context.Context, in *SetActiveUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/SetActiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immuServiceClient) DatabaseList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DatabaseListResponse, error) {
	out := new(DatabaseListResponse)
	err := c.cc.Invoke(ctx, "/immudb.schema.ImmuService/DatabaseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImmuServiceServer is the server API for ImmuService service.
type ImmuServiceServer interface {
	ListUsers(context.Context, *empty.Empty) (*UserList, error)
	CreateUser(context.Context, *CreateUserRequest) (*empty.Empty, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error)
	UpdateAuthConfig(context.Context, *AuthConfig) (*empty.Empty, error)
	UpdateMTLSConfig(context.Context, *MTLSConfig) (*empty.Empty, error)
	PrintTree(context.Context, *empty.Empty) (*Tree, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *empty.Empty) (*empty.Empty, error)
	Set(context.Context, *KeyValue) (*Index, error)
	SafeSet(context.Context, *SafeSetOptions) (*Proof, error)
	Get(context.Context, *Key) (*Item, error)
	SafeGet(context.Context, *SafeGetOptions) (*SafeItem, error)
	SetBatch(context.Context, *KVList) (*Index, error)
	GetBatch(context.Context, *KeyList) (*ItemList, error)
	ExecAllOps(context.Context, *Ops) (*Index, error)
	Scan(context.Context, *ScanOptions) (*ItemList, error)
	Count(context.Context, *KeyPrefix) (*ItemsCount, error)
	CountAll(context.Context, *empty.Empty) (*ItemsCount, error)
	CurrentRoot(context.Context, *empty.Empty) (*Root, error)
	Inclusion(context.Context, *Index) (*InclusionProof, error)
	Consistency(context.Context, *Index) (*ConsistencyProof, error)
	ByIndex(context.Context, *Index) (*Item, error)
	BySafeIndex(context.Context, *SafeIndexOptions) (*SafeItem, error)
	History(context.Context, *HistoryOptions) (*ItemList, error)
	Health(context.Context, *empty.Empty) (*HealthResponse, error)
	Reference(context.Context, *ReferenceOptions) (*Index, error)
	GetReference(context.Context, *Key) (*Item, error)
	SafeReference(context.Context, *SafeReferenceOptions) (*Proof, error)
	ZAdd(context.Context, *ZAddOptions) (*Index, error)
	ZScan(context.Context, *ZScanOptions) (*ZItemList, error)
	SafeZAdd(context.Context, *SafeZAddOptions) (*Proof, error)
	IScan(context.Context, *IScanOptions) (*Page, error)
	Dump(*empty.Empty, ImmuService_DumpServer) error
	// todo(joe-dz): Enable restore when the feature is required again
	//	rpc Restore(stream pb.KVList) returns (ItemsCount) {
	//		option (google.api.http) = {
	//			post: "/v1/immurestproxy/restore"
	//			body: "*"
	//		};
	//	}
	CreateDatabase(context.Context, *Database) (*empty.Empty, error)
	UseDatabase(context.Context, *Database) (*UseDatabaseReply, error)
	ChangePermission(context.Context, *ChangePermissionRequest) (*empty.Empty, error)
	SetActiveUser(context.Context, *SetActiveUserRequest) (*empty.Empty, error)
	DatabaseList(context.Context, *empty.Empty) (*DatabaseListResponse, error)
}

// UnimplementedImmuServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImmuServiceServer struct {
}

func (*UnimplementedImmuServiceServer) ListUsers(context.Context, *empty.Empty) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedImmuServiceServer) CreateUser(context.Context, *CreateUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedImmuServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedImmuServiceServer) UpdateAuthConfig(context.Context, *AuthConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthConfig not implemented")
}
func (*UnimplementedImmuServiceServer) UpdateMTLSConfig(context.Context, *MTLSConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMTLSConfig not implemented")
}
func (*UnimplementedImmuServiceServer) PrintTree(context.Context, *empty.Empty) (*Tree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintTree not implemented")
}
func (*UnimplementedImmuServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedImmuServiceServer) Logout(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedImmuServiceServer) Set(context.Context, *KeyValue) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedImmuServiceServer) SafeSet(context.Context, *SafeSetOptions) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeSet not implemented")
}
func (*UnimplementedImmuServiceServer) Get(context.Context, *Key) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedImmuServiceServer) SafeGet(context.Context, *SafeGetOptions) (*SafeItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeGet not implemented")
}
func (*UnimplementedImmuServiceServer) SetBatch(context.Context, *KVList) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBatch not implemented")
}
func (*UnimplementedImmuServiceServer) GetBatch(context.Context, *KeyList) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (*UnimplementedImmuServiceServer) ExecAllOps(context.Context, *Ops) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecAllOps not implemented")
}
func (*UnimplementedImmuServiceServer) Scan(context.Context, *ScanOptions) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (*UnimplementedImmuServiceServer) Count(context.Context, *KeyPrefix) (*ItemsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedImmuServiceServer) CountAll(context.Context, *empty.Empty) (*ItemsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAll not implemented")
}
func (*UnimplementedImmuServiceServer) CurrentRoot(context.Context, *empty.Empty) (*Root, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentRoot not implemented")
}
func (*UnimplementedImmuServiceServer) Inclusion(context.Context, *Index) (*InclusionProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inclusion not implemented")
}
func (*UnimplementedImmuServiceServer) Consistency(context.Context, *Index) (*ConsistencyProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consistency not implemented")
}
func (*UnimplementedImmuServiceServer) ByIndex(context.Context, *Index) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByIndex not implemented")
}
func (*UnimplementedImmuServiceServer) BySafeIndex(context.Context, *SafeIndexOptions) (*SafeItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BySafeIndex not implemented")
}
func (*UnimplementedImmuServiceServer) History(context.Context, *HistoryOptions) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (*UnimplementedImmuServiceServer) Health(context.Context, *empty.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedImmuServiceServer) Reference(context.Context, *ReferenceOptions) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reference not implemented")
}
func (*UnimplementedImmuServiceServer) GetReference(context.Context, *Key) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReference not implemented")
}
func (*UnimplementedImmuServiceServer) SafeReference(context.Context, *SafeReferenceOptions) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeReference not implemented")
}
func (*UnimplementedImmuServiceServer) ZAdd(context.Context, *ZAddOptions) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (*UnimplementedImmuServiceServer) ZScan(context.Context, *ZScanOptions) (*ZItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScan not implemented")
}
func (*UnimplementedImmuServiceServer) SafeZAdd(context.Context, *SafeZAddOptions) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeZAdd not implemented")
}
func (*UnimplementedImmuServiceServer) IScan(context.Context, *IScanOptions) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IScan not implemented")
}
func (*UnimplementedImmuServiceServer) Dump(*empty.Empty, ImmuService_DumpServer) error {
	return status.Errorf(codes.Unimplemented, "method Dump not implemented")
}
func (*UnimplementedImmuServiceServer) CreateDatabase(context.Context, *Database) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (*UnimplementedImmuServiceServer) UseDatabase(context.Context, *Database) (*UseDatabaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseDatabase not implemented")
}
func (*UnimplementedImmuServiceServer) ChangePermission(context.Context, *ChangePermissionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePermission not implemented")
}
func (*UnimplementedImmuServiceServer) SetActiveUser(context.Context, *SetActiveUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveUser not implemented")
}
func (*UnimplementedImmuServiceServer) DatabaseList(context.Context, *empty.Empty) (*DatabaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseList not implemented")
}

func RegisterImmuServiceServer(s *grpc.Server, srv ImmuServiceServer) {
	s.RegisterService(&_ImmuService_serviceDesc, srv)
}

func _ImmuService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ListUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UpdateAuthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UpdateAuthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UpdateAuthConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UpdateAuthConfig(ctx, req.(*AuthConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UpdateMTLSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTLSConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UpdateMTLSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UpdateMTLSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UpdateMTLSConfig(ctx, req.(*MTLSConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_PrintTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).PrintTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/PrintTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).PrintTree(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Logout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Set(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeSetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeSet(ctx, req.(*SafeSetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeGetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeGet(ctx, req.(*SafeGetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SetBatch(ctx, req.(*KVList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetBatch(ctx, req.(*KeyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ExecAllOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ops)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ExecAllOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ExecAllOps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ExecAllOps(ctx, req.(*Ops))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Scan(ctx, req.(*ScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Count(ctx, req.(*KeyPrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CountAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_CurrentRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CurrentRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CurrentRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CurrentRoot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Inclusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Inclusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Inclusion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Inclusion(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Consistency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Consistency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Consistency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Consistency(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ByIndex(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_BySafeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeIndexOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).BySafeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/BySafeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).BySafeIndex(ctx, req.(*SafeIndexOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).History(ctx, req.(*HistoryOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Reference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).Reference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/Reference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).Reference(ctx, req.(*ReferenceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_GetReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).GetReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/GetReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).GetReference(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeReferenceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeReference(ctx, req.(*SafeReferenceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZAddOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ZAdd(ctx, req.(*ZAddOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ZScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ZScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ZScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ZScan(ctx, req.(*ZScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SafeZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeZAddOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SafeZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SafeZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SafeZAdd(ctx, req.(*SafeZAddOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_IScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).IScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/IScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).IScan(ctx, req.(*IScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_Dump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImmuServiceServer).Dump(m, &immuServiceDumpServer{stream})
}

type ImmuService_DumpServer interface {
	Send(*pb.KVList) error
	grpc.ServerStream
}

type immuServiceDumpServer struct {
	grpc.ServerStream
}

func (x *immuServiceDumpServer) Send(m *pb.KVList) error {
	return x.ServerStream.SendMsg(m)
}

func _ImmuService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).CreateDatabase(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_UseDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).UseDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/UseDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).UseDatabase(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_ChangePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).ChangePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/ChangePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).ChangePermission(ctx, req.(*ChangePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_SetActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).SetActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/SetActiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).SetActiveUser(ctx, req.(*SetActiveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmuService_DatabaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmuServiceServer).DatabaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immudb.schema.ImmuService/DatabaseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmuServiceServer).DatabaseList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImmuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "immudb.schema.ImmuService",
	HandlerType: (*ImmuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _ImmuService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ImmuService_CreateUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _ImmuService_ChangePassword_Handler,
		},
		{
			MethodName: "UpdateAuthConfig",
			Handler:    _ImmuService_UpdateAuthConfig_Handler,
		},
		{
			MethodName: "UpdateMTLSConfig",
			Handler:    _ImmuService_UpdateMTLSConfig_Handler,
		},
		{
			MethodName: "PrintTree",
			Handler:    _ImmuService_PrintTree_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ImmuService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ImmuService_Logout_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ImmuService_Set_Handler,
		},
		{
			MethodName: "SafeSet",
			Handler:    _ImmuService_SafeSet_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ImmuService_Get_Handler,
		},
		{
			MethodName: "SafeGet",
			Handler:    _ImmuService_SafeGet_Handler,
		},
		{
			MethodName: "SetBatch",
			Handler:    _ImmuService_SetBatch_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _ImmuService_GetBatch_Handler,
		},
		{
			MethodName: "ExecAllOps",
			Handler:    _ImmuService_ExecAllOps_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _ImmuService_Scan_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _ImmuService_Count_Handler,
		},
		{
			MethodName: "CountAll",
			Handler:    _ImmuService_CountAll_Handler,
		},
		{
			MethodName: "CurrentRoot",
			Handler:    _ImmuService_CurrentRoot_Handler,
		},
		{
			MethodName: "Inclusion",
			Handler:    _ImmuService_Inclusion_Handler,
		},
		{
			MethodName: "Consistency",
			Handler:    _ImmuService_Consistency_Handler,
		},
		{
			MethodName: "ByIndex",
			Handler:    _ImmuService_ByIndex_Handler,
		},
		{
			MethodName: "BySafeIndex",
			Handler:    _ImmuService_BySafeIndex_Handler,
		},
		{
			MethodName: "History",
			Handler:    _ImmuService_History_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ImmuService_Health_Handler,
		},
		{
			MethodName: "Reference",
			Handler:    _ImmuService_Reference_Handler,
		},
		{
			MethodName: "GetReference",
			Handler:    _ImmuService_GetReference_Handler,
		},
		{
			MethodName: "SafeReference",
			Handler:    _ImmuService_SafeReference_Handler,
		},
		{
			MethodName: "ZAdd",
			Handler:    _ImmuService_ZAdd_Handler,
		},
		{
			MethodName: "ZScan",
			Handler:    _ImmuService_ZScan_Handler,
		},
		{
			MethodName: "SafeZAdd",
			Handler:    _ImmuService_SafeZAdd_Handler,
		},
		{
			MethodName: "IScan",
			Handler:    _ImmuService_IScan_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _ImmuService_CreateDatabase_Handler,
		},
		{
			MethodName: "UseDatabase",
			Handler:    _ImmuService_UseDatabase_Handler,
		},
		{
			MethodName: "ChangePermission",
			Handler:    _ImmuService_ChangePermission_Handler,
		},
		{
			MethodName: "SetActiveUser",
			Handler:    _ImmuService_SetActiveUser_Handler,
		},
		{
			MethodName: "DatabaseList",
			Handler:    _ImmuService_DatabaseList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dump",
			Handler:       _ImmuService_Dump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema.proto",
}
