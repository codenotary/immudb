{
  "swagger": "2.0",
  "info": {
    "title": "immudb REST API v2",
    "description": "Authorization API",
    "version": "version not set"
  },
  "basePath": "/api/v2",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/authorization/session/close": {
      "post": {
        "operationId": "CloseSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCloseSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelCloseSessionRequest"
            }
          }
        ],
        "tags": [
          "authorization"
        ]
      }
    },
    "/authorization/session/keepalive": {
      "post": {
        "operationId": "KeepAlive",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelKeepAliveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelKeepAliveRequest"
            }
          }
        ],
        "tags": [
          "authorization"
        ]
      }
    },
    "/authorization/session/open": {
      "post": {
        "operationId": "OpenSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/immudbmodelOpenSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/immudbmodelOpenSessionRequest"
            }
          }
        ],
        "tags": [
          "authorization"
        ],
        "security": []
      }
    },
    "/collections/create": {
      "put": {
        "operationId": "CollectionCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCollectionCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelCollectionCreateRequest"
            }
          }
        ],
        "tags": [
          "collections"
        ]
      }
    },
    "/collections/delete": {
      "delete": {
        "operationId": "CollectionDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCollectionDeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "collections"
        ]
      }
    },
    "/collections/get": {
      "get": {
        "operationId": "CollectionGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCollectionGetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "collections"
        ]
      }
    },
    "/collections/list": {
      "post": {
        "operationId": "CollectionList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCollectionListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelCollectionListRequest"
            }
          }
        ],
        "tags": [
          "collections"
        ]
      }
    },
    "/collections/update": {
      "put": {
        "operationId": "CollectionUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelCollectionUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelCollectionUpdateRequest"
            }
          }
        ],
        "tags": [
          "collections"
        ]
      }
    },
    "/documents/audit": {
      "post": {
        "operationId": "DocumentAudit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelDocumentAuditResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelDocumentAuditRequest"
            }
          }
        ],
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/delete": {
      "put": {
        "operationId": "DocumentDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelDocumentDeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelDocumentDeleteRequest"
            }
          }
        ],
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/insert": {
      "put": {
        "operationId": "DocumentInsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelDocumentInsertResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelDocumentInsertRequest"
            }
          }
        ],
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/insertmany": {
      "put": {
        "operationId": "DocumentInsertMany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelDocumentInsertManyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelDocumentInsertManyRequest"
            }
          }
        ],
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/proof": {
      "post": {
        "operationId": "DocumentProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelDocumentProofResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelDocumentProofRequest"
            }
          }
        ],
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/search": {
      "post": {
        "operationId": "DocumentSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelDocumentSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelDocumentSearchRequest"
            }
          }
        ],
        "tags": [
          "documents"
        ]
      }
    },
    "/documents/update": {
      "post": {
        "operationId": "DocumentUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelDocumentUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelDocumentUpdateRequest"
            }
          }
        ],
        "tags": [
          "documents"
        ]
      }
    },
    "/indexes/create": {
      "put": {
        "operationId": "IndexCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelIndexCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelIndexCreateRequest"
            }
          }
        ],
        "tags": [
          "indexes"
        ]
      }
    },
    "/indexes/delete": {
      "put": {
        "operationId": "IndexDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelIndexDeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelIndexDeleteRequest"
            }
          }
        ],
        "tags": [
          "indexes"
        ]
      }
    }
  },
  "definitions": {
    "immudbmodelOpenSessionRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "database": {
          "type": "string"
        }
      }
    },
    "immudbmodelOpenSessionResponse": {
      "type": "object",
      "properties": {
        "sessionID": {
          "type": "string"
        },
        "serverUUID": {
          "type": "string"
        },
        "expirationTimestamp": {
          "type": "integer",
          "format": "int32"
        },
        "inactivityTimestamp": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "modelCloseSessionRequest": {
      "type": "object"
    },
    "modelCloseSessionResponse": {
      "type": "object"
    },
    "modelCollection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "idFieldName": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelField"
          }
        },
        "indexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelIndex"
          }
        }
      }
    },
    "modelCollectionCreateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "idFieldName": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelField"
          }
        },
        "indexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelIndex"
          }
        }
      }
    },
    "modelCollectionCreateResponse": {
      "type": "object"
    },
    "modelCollectionDeleteResponse": {
      "type": "object"
    },
    "modelCollectionGetResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/modelCollection"
        }
      }
    },
    "modelCollectionListRequest": {
      "type": "object"
    },
    "modelCollectionListResponse": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelCollection"
          }
        }
      }
    },
    "modelCollectionUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "idFieldName": {
          "type": "string"
        }
      }
    },
    "modelCollectionUpdateResponse": {
      "type": "object"
    },
    "modelComparisonOperator": {
      "type": "string",
      "enum": [
        "EQ",
        "NE",
        "LT",
        "LE",
        "GT",
        "GE",
        "LIKE"
      ],
      "default": "EQ"
    },
    "modelDocumentAtRevision": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "format": "uint64"
        },
        "revision": {
          "type": "string",
          "format": "uint64"
        },
        "document": {
          "type": "object"
        }
      }
    },
    "modelDocumentAuditRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "documentId": {
          "type": "string"
        },
        "desc": {
          "type": "boolean"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "perPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "modelDocumentAuditResponse": {
      "type": "object",
      "properties": {
        "revisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelDocumentAtRevision"
          }
        }
      }
    },
    "modelDocumentDeleteRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "query": {
          "$ref": "#/definitions/modelQuery"
        }
      }
    },
    "modelDocumentDeleteResponse": {
      "type": "object"
    },
    "modelDocumentInsertManyRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "documents": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "modelDocumentInsertManyResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "format": "uint64"
        },
        "documentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "modelDocumentInsertRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "document": {
          "type": "object"
        }
      }
    },
    "modelDocumentInsertResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "format": "uint64"
        },
        "documentId": {
          "type": "string"
        }
      }
    },
    "modelDocumentProofRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "documentId": {
          "type": "string"
        },
        "transactionId": {
          "type": "string",
          "format": "uint64"
        },
        "proofSinceTransactionId": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "modelDocumentProofResponse": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string"
        },
        "collectionId": {
          "type": "integer",
          "format": "int64"
        },
        "idFieldName": {
          "type": "string"
        },
        "encodedDocument": {
          "type": "string",
          "format": "byte"
        },
        "verifiableTx": {
          "$ref": "#/definitions/schemaVerifiableTxV2"
        }
      }
    },
    "modelDocumentSearchRequest": {
      "type": "object",
      "properties": {
        "searchID": {
          "type": "string"
        },
        "collection": {
          "type": "string"
        },
        "query": {
          "$ref": "#/definitions/modelQuery"
        },
        "desc": {
          "type": "boolean"
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "perPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "modelDocumentSearchResponse": {
      "type": "object",
      "properties": {
        "searchID": {
          "type": "string"
        },
        "revisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelDocumentAtRevision"
          }
        }
      }
    },
    "modelDocumentUpdateRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "query": {
          "$ref": "#/definitions/modelQuery"
        },
        "document": {
          "type": "object"
        }
      }
    },
    "modelDocumentUpdateResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "format": "uint64"
        },
        "documentId": {
          "type": "string"
        },
        "revision": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "modelField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/modelFieldType"
        }
      }
    },
    "modelFieldComparison": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/modelComparisonOperator"
        },
        "value": {}
      }
    },
    "modelFieldType": {
      "type": "string",
      "enum": [
        "STRING",
        "BOOLEAN",
        "INTEGER",
        "DOUBLE"
      ],
      "default": "STRING"
    },
    "modelIndex": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isUnique": {
          "type": "boolean"
        }
      }
    },
    "modelIndexCreateRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isUnique": {
          "type": "boolean"
        }
      }
    },
    "modelIndexCreateResponse": {
      "type": "object"
    },
    "modelIndexDeleteRequest": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "modelIndexDeleteResponse": {
      "type": "object"
    },
    "modelKeepAliveRequest": {
      "type": "object"
    },
    "modelKeepAliveResponse": {
      "type": "object"
    },
    "modelQuery": {
      "type": "object",
      "properties": {
        "expressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelQueryExpression"
          }
        }
      }
    },
    "modelQueryExpression": {
      "type": "object",
      "properties": {
        "fieldComparisons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelFieldComparison"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "schemaDualProofV2": {
      "type": "object",
      "properties": {
        "sourceTxHeader": {
          "$ref": "#/definitions/schemaTxHeader",
          "title": "Header of the source (earlier) transaction"
        },
        "targetTxHeader": {
          "$ref": "#/definitions/schemaTxHeader",
          "title": "Header of the target (latter) transaction"
        },
        "inclusionProof": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "Inclusion proof of the source transaction hash in the main Merkle Tree"
        },
        "consistencyProof": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "Consistency proof between Merkle Trees in the source and target transactions"
        }
      },
      "title": "DualProofV2 contains inclusion and consistency proofs"
    },
    "schemaEntry": {
      "type": "object",
      "properties": {
        "tx": {
          "type": "string",
          "format": "uint64",
          "title": "Transaction id at which the target value was set (i.e. not the reference transaction id)"
        },
        "key": {
          "type": "string",
          "format": "byte",
          "title": "Key of the target value (i.e. not the reference entry)"
        },
        "value": {
          "type": "string",
          "format": "byte",
          "title": "Value"
        },
        "referencedBy": {
          "$ref": "#/definitions/schemaReference",
          "title": "If the request was for a reference, this field will keep information about the reference entry"
        },
        "metadata": {
          "$ref": "#/definitions/schemaKVMetadata",
          "title": "Metadata of the target entry (i.e. not the reference entry)"
        },
        "expired": {
          "type": "boolean",
          "title": "If set to true, this entry has expired and the value is not retrieved"
        },
        "revision": {
          "type": "string",
          "format": "uint64",
          "title": "Key's revision, in case of GetAt it will be 0"
        }
      }
    },
    "schemaExpiration": {
      "type": "object",
      "properties": {
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Entry expiration time (unix timestamp in seconds)"
        }
      }
    },
    "schemaKVMetadata": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "title": "True if this entry denotes a logical deletion"
        },
        "expiration": {
          "$ref": "#/definitions/schemaExpiration",
          "title": "Entry expiration information"
        },
        "nonIndexable": {
          "type": "boolean",
          "title": "If set to true, this entry will not be indexed and will only be accessed through GetAt calls"
        }
      }
    },
    "schemaReference": {
      "type": "object",
      "properties": {
        "tx": {
          "type": "string",
          "format": "uint64",
          "title": "Transaction if when the reference key was set"
        },
        "key": {
          "type": "string",
          "format": "byte",
          "title": "Reference key"
        },
        "atTx": {
          "type": "string",
          "format": "uint64",
          "title": "At which transaction the key is bound, 0 if reference is not bound and should read the most recent reference"
        },
        "metadata": {
          "$ref": "#/definitions/schemaKVMetadata",
          "title": "Metadata of the reference entry"
        },
        "revision": {
          "type": "string",
          "format": "uint64",
          "title": "Revision of the reference entry"
        }
      }
    },
    "schemaSignature": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "format": "byte"
        },
        "signature": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "schemaTx": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/schemaTxHeader",
          "title": "Transaction header"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemaTxEntry"
          },
          "title": "Raw entry values"
        },
        "kvEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemaEntry"
          },
          "title": "KV entries in the transaction (parsed)"
        },
        "zEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemaZEntry"
          },
          "title": "Sorted Set entries in the transaction (parsed)"
        }
      }
    },
    "schemaTxEntry": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "title": "Raw key value (contains 1-byte prefix for kind of the key)"
        },
        "hValue": {
          "type": "string",
          "format": "byte",
          "title": "Value hash"
        },
        "vLen": {
          "type": "integer",
          "format": "int32",
          "title": "Value length"
        },
        "metadata": {
          "$ref": "#/definitions/schemaKVMetadata",
          "title": "Entry metadata"
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "value, must be ignored when len(value) == 0 and vLen \u003e 0.\nOtherwise sha256(value) must be equal to hValue."
        }
      }
    },
    "schemaTxHeader": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "Transaction ID"
        },
        "prevAlh": {
          "type": "string",
          "format": "byte",
          "title": "State value (Accumulative Hash - Alh) of the previous transaction"
        },
        "ts": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp of the transaction (in seconds)"
        },
        "nentries": {
          "type": "integer",
          "format": "int32",
          "title": "Number of entries in a transaction"
        },
        "eH": {
          "type": "string",
          "format": "byte",
          "title": "Entries Hash - cumulative hash of all entries in the transaction"
        },
        "blTxId": {
          "type": "string",
          "format": "uint64",
          "title": "Binary linking tree transaction ID\n(ID of last transaction already in the main Merkle Tree)"
        },
        "blRoot": {
          "type": "string",
          "format": "byte",
          "title": "Binary linking tree root (Root hash of the Merkle Tree)"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "title": "Header version"
        },
        "metadata": {
          "$ref": "#/definitions/schemaTxMetadata",
          "title": "Transaction metadata"
        }
      }
    },
    "schemaTxMetadata": {
      "type": "object",
      "properties": {
        "truncatedTxID": {
          "type": "string",
          "format": "uint64",
          "title": "Entry expiration information"
        }
      },
      "title": "TxMetadata contains metadata set to whole transaction"
    },
    "schemaVerifiableTxV2": {
      "type": "object",
      "properties": {
        "tx": {
          "$ref": "#/definitions/schemaTx",
          "title": "Transaction to verify"
        },
        "dualProof": {
          "$ref": "#/definitions/schemaDualProofV2",
          "title": "Proof for the transaction"
        },
        "signature": {
          "$ref": "#/definitions/schemaSignature",
          "title": "Signature for the new state value"
        }
      }
    },
    "schemaZEntry": {
      "type": "object",
      "properties": {
        "set": {
          "type": "string",
          "format": "byte",
          "title": "Name of the sorted set"
        },
        "key": {
          "type": "string",
          "format": "byte",
          "title": "Referenced key"
        },
        "entry": {
          "$ref": "#/definitions/schemaEntry",
          "title": "Referenced entry"
        },
        "score": {
          "type": "number",
          "format": "double",
          "title": "Sorted set element's score"
        },
        "atTx": {
          "type": "string",
          "format": "uint64",
          "title": "At which transaction the key is bound,\n0 if reference is not bound and should read the most recent reference"
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "description": "Session Identifier",
      "name": "sessionid",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
