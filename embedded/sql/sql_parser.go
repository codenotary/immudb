// Code generated by goyacc -l -o sql_parser.go sql_grammar.y. DO NOT EDIT.
package sql

import __yyfmt__ "fmt"

import "fmt"

func setResult(l yyLexer, stmts []SQLStmt) {
	l.(*lexer).result = stmts
}

type yySymType struct {
	yys             int
	stmts           []SQLStmt
	stmt            SQLStmt
	datasource      DataSource
	colSpec         *ColSpec
	cols            []*ColSelector
	rows            []*RowSpec
	row             *RowSpec
	values          []ValueExp
	value           ValueExp
	id              string
	integer         uint64
	float           float64
	str             string
	boolean         bool
	blob            []byte
	keyword         string
	sqlType         SQLValueType
	aggFn           AggregateFn
	colNames        []string
	col             *ColSelector
	sel             Selector
	targets         []TargetEntry
	jsonFields      []string
	distinct        bool
	ds              DataSource
	tableRef        *tableRef
	period          period
	openPeriod      *openPeriod
	periodInstant   periodInstant
	joins           []*JoinSpec
	join            *JoinSpec
	joinType        JoinType
	check           CheckConstraint
	exp             ValueExp
	binExp          ValueExp
	err             error
	ordexps         []*OrdExp
	opt_ord         bool
	logicOp         LogicOperator
	cmpOp           CmpOperator
	pparam          int
	update          *colUpdate
	updates         []*colUpdate
	onConflict      *OnConflictDo
	permission      Permission
	sqlPrivilege    SQLPrivilege
	sqlPrivileges   []SQLPrivilege
	whenThenClauses []whenThenClause
	tableElem       TableElem
	tableElems      []TableElem
	timestampField  TimestampFieldType
}

const CREATE = 57346
const DROP = 57347
const USE = 57348
const DATABASE = 57349
const USER = 57350
const WITH = 57351
const PASSWORD = 57352
const READ = 57353
const READWRITE = 57354
const ADMIN = 57355
const SNAPSHOT = 57356
const HISTORY = 57357
const SINCE = 57358
const AFTER = 57359
const BEFORE = 57360
const UNTIL = 57361
const TX = 57362
const OF = 57363
const INTEGER_TYPE = 57364
const BOOLEAN_TYPE = 57365
const VARCHAR_TYPE = 57366
const UUID_TYPE = 57367
const BLOB_TYPE = 57368
const TIMESTAMP_TYPE = 57369
const FLOAT_TYPE = 57370
const JSON_TYPE = 57371
const TABLE = 57372
const UNIQUE = 57373
const INDEX = 57374
const ON = 57375
const ALTER = 57376
const ADD = 57377
const RENAME = 57378
const TO = 57379
const COLUMN = 57380
const CONSTRAINT = 57381
const PRIMARY = 57382
const KEY = 57383
const CHECK = 57384
const GRANT = 57385
const REVOKE = 57386
const GRANTS = 57387
const FOR = 57388
const PRIVILEGES = 57389
const BEGIN = 57390
const TRANSACTION = 57391
const COMMIT = 57392
const ROLLBACK = 57393
const INSERT = 57394
const UPSERT = 57395
const INTO = 57396
const VALUES = 57397
const DELETE = 57398
const UPDATE = 57399
const SET = 57400
const CONFLICT = 57401
const DO = 57402
const NOTHING = 57403
const RETURNING = 57404
const SELECT = 57405
const DISTINCT = 57406
const FROM = 57407
const JOIN = 57408
const HAVING = 57409
const WHERE = 57410
const GROUP = 57411
const BY = 57412
const LIMIT = 57413
const OFFSET = 57414
const ORDER = 57415
const ASC = 57416
const DESC = 57417
const AS = 57418
const UNION = 57419
const ALL = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const NOT = 57426
const LIKE = 57427
const IF = 57428
const EXISTS = 57429
const IN = 57430
const IS = 57431
const AUTO_INCREMENT = 57432
const NULL = 57433
const CAST = 57434
const SCAST = 57435
const SHOW = 57436
const DATABASES = 57437
const TABLES = 57438
const USERS = 57439
const BETWEEN = 57440
const EXTRACT = 57441
const YEAR = 57442
const MONTH = 57443
const DAY = 57444
const HOUR = 57445
const MINUTE = 57446
const SECOND = 57447
const NPARAM = 57448
const PPARAM = 57449
const JOINTYPE = 57450
const AND = 57451
const OR = 57452
const CMPOP = 57453
const NOT_MATCHES_OP = 57454
const IDENTIFIER = 57455
const INTEGER_LIT = 57456
const FLOAT_LIT = 57457
const VARCHAR_LIT = 57458
const BOOLEAN_LIT = 57459
const BLOB_LIT = 57460
const AGGREGATE_FUNC = 57461
const ERROR = 57462
const DOT = 57463
const ARROW = 57464
const STMT_SEPARATOR = 57465

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CREATE",
	"DROP",
	"USE",
	"DATABASE",
	"USER",
	"WITH",
	"PASSWORD",
	"READ",
	"READWRITE",
	"ADMIN",
	"SNAPSHOT",
	"HISTORY",
	"SINCE",
	"AFTER",
	"BEFORE",
	"UNTIL",
	"TX",
	"OF",
	"INTEGER_TYPE",
	"BOOLEAN_TYPE",
	"VARCHAR_TYPE",
	"UUID_TYPE",
	"BLOB_TYPE",
	"TIMESTAMP_TYPE",
	"FLOAT_TYPE",
	"JSON_TYPE",
	"TABLE",
	"UNIQUE",
	"INDEX",
	"ON",
	"ALTER",
	"ADD",
	"RENAME",
	"TO",
	"COLUMN",
	"CONSTRAINT",
	"PRIMARY",
	"KEY",
	"CHECK",
	"GRANT",
	"REVOKE",
	"GRANTS",
	"FOR",
	"PRIVILEGES",
	"BEGIN",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"INSERT",
	"UPSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"CONFLICT",
	"DO",
	"NOTHING",
	"RETURNING",
	"SELECT",
	"DISTINCT",
	"FROM",
	"JOIN",
	"HAVING",
	"WHERE",
	"GROUP",
	"BY",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"AS",
	"UNION",
	"ALL",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"NOT",
	"LIKE",
	"IF",
	"EXISTS",
	"IN",
	"IS",
	"AUTO_INCREMENT",
	"NULL",
	"CAST",
	"SCAST",
	"SHOW",
	"DATABASES",
	"TABLES",
	"USERS",
	"BETWEEN",
	"EXTRACT",
	"YEAR",
	"MONTH",
	"DAY",
	"HOUR",
	"MINUTE",
	"SECOND",
	"NPARAM",
	"PPARAM",
	"JOINTYPE",
	"AND",
	"OR",
	"CMPOP",
	"NOT_MATCHES_OP",
	"IDENTIFIER",
	"INTEGER_LIT",
	"FLOAT_LIT",
	"VARCHAR_LIT",
	"BOOLEAN_LIT",
	"BLOB_LIT",
	"AGGREGATE_FUNC",
	"ERROR",
	"DOT",
	"ARROW",
	"','",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'.'",
	"STMT_SEPARATOR",
	"'('",
	"')'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 139,
	85, 277,
	88, 277,
	-2, 261,
	-1, 370,
	66, 210,
	-2, 205,
	-1, 428,
	66, 210,
	-2, 207,
}

const yyPrivate = 57344

const yyLast = 1864

var yyAct = [...]int16{
	190, 522, 167, 421, 153, 278, 213, 161, 364, 284,
	204, 360, 275, 246, 312, 427, 335, 359, 6, 334,
	408, 399, 54, 247, 108, 207, 248, 101, 136, 272,
	102, 490, 497, 135, 139, 144, 188, 112, 102, 404,
	102, 403, 362, 362, 141, 491, 484, 340, 396, 483,
	418, 492, 486, 54, 54, 54, 485, 480, 165, 472,
	362, 362, 362, 114, 340, 116, 479, 477, 465, 458,
	412, 363, 438, 339, 436, 435, 433, 395, 393, 392,
	385, 59, 311, 60, 361, 407, 397, 384, 378, 57,
	61, 377, 376, 375, 345, 262, 133, 58, 173, 171,
	177, 243, 170, 175, 172, 174, 241, 240, 62, 237,
	63, 64, 65, 230, 202, 66, 102, 67, 180, 68,
	69, 24, 521, 70, 71, 72, 73, 74, 75, 224,
	225, 176, 76, 77, 328, 78, 214, 227, 228, 229,
	382, 192, 205, 201, 515, 209, 232, 418, 191, 235,
	396, 212, 120, 39, 239, 224, 225, 242, 193, 391,
	354, 347, 79, 234, 329, 456, 218, 455, 98, 49,
	80, 474, 81, 88, 169, 254, 82, 83, 84, 85,
	86, 87, 233, 462, 102, 461, 437, 216, 226, 55,
	261, 32, 208, 220, 353, 99, 344, 282, 33, 337,
	210, 270, 221, 271, 128, 117, 280, 401, 115, 255,
	107, 106, 283, 292, 54, 219, 223, 281, 293, 291,
	274, 217, 274, 259, 260, 430, 22, 103, 224, 225,
	236, 454, 273, 277, 298, 489, 381, 104, 453, 251,
	22, 297, 332, 488, 336, 331, 295, 92, 102, 308,
	294, 256, 263, 343, 296, 245, 299, 21, 302, 244,
	102, 276, 94, 305, 306, 307, 342, 203, 102, 303,
	304, 21, 182, 338, 199, 348, 322, 323, 324, 325,
	326, 327, 443, 300, 369, 346, 301, 367, 374, 179,
	370, 349, 178, 350, 214, 214, 481, 31, 379, 380,
	446, 333, 10, 12, 11, 373, 310, 387, 368, 388,
	371, 389, 90, 91, 93, 127, 89, 523, 524, 508,
	394, 276, 422, 251, 365, 351, 352, 514, 372, 503,
	495, 205, 13, 183, 502, 383, 22, 471, 493, 390,
	211, 14, 15, 52, 96, 463, 7, 417, 8, 9,
	16, 17, 125, 51, 18, 19, 50, 25, 406, 119,
	129, 22, 336, 405, 398, 506, 423, 21, 341, 500,
	267, 268, 265, 266, 214, 414, 425, 264, 431, 413,
	356, 419, 285, 355, 512, 336, 36, 424, 444, 445,
	432, 447, 21, 358, 257, 181, 121, 449, 118, 251,
	400, 441, 53, 440, 276, 366, 457, 105, 34, 448,
	35, 450, 434, 269, 451, 187, 186, 439, 196, 258,
	459, 420, 416, 466, 197, 43, 47, 26, 30, 468,
	464, 38, 2, 122, 123, 124, 214, 469, 214, 214,
	473, 214, 475, 476, 470, 478, 467, 482, 194, 195,
	27, 29, 28, 37, 184, 48, 251, 97, 110, 111,
	276, 409, 410, 411, 415, 200, 276, 198, 279, 23,
	168, 56, 460, 44, 54, 321, 309, 46, 45, 291,
	41, 496, 498, 400, 42, 313, 314, 315, 316, 317,
	318, 319, 320, 357, 206, 499, 222, 452, 487, 40,
	214, 507, 504, 509, 505, 518, 402, 132, 511, 130,
	143, 494, 147, 516, 140, 519, 513, 517, 138, 134,
	520, 59, 525, 60, 386, 149, 501, 526, 231, 57,
	61, 249, 429, 428, 426, 185, 109, 58, 173, 171,
	177, 126, 170, 175, 172, 174, 95, 238, 62, 150,
	63, 64, 65, 151, 510, 66, 20, 67, 5, 68,
	69, 4, 3, 70, 71, 72, 73, 74, 75, 1,
	0, 176, 76, 77, 0, 78, 0, 0, 0, 22,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 0, 0,
	137, 0, 79, 142, 0, 0, 0, 164, 160, 0,
	442, 0, 81, 88, 169, 152, 82, 83, 84, 85,
	86, 87, 162, 163, 0, 0, 0, 0, 0, 166,
	155, 156, 157, 158, 159, 154, 59, 0, 60, 0,
	0, 146, 0, 0, 57, 61, 0, 148, 0, 0,
	0, 189, 58, 173, 171, 177, 0, 170, 175, 172,
	174, 0, 0, 62, 0, 63, 64, 65, 0, 0,
	66, 0, 67, 0, 68, 69, 0, 0, 70, 71,
	72, 73, 74, 75, 0, 0, 176, 76, 77, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 0, 0, 0, 137, 0, 79, 142, 0,
	0, 0, 164, 160, 0, 80, 0, 81, 88, 169,
	152, 82, 83, 84, 85, 86, 87, 162, 163, 0,
	0, 0, 0, 0, 166, 155, 156, 157, 158, 159,
	154, 59, 0, 60, 0, 0, 146, 0, 0, 57,
	61, 0, 148, 0, 0, 0, 0, 58, 173, 171,
	177, 0, 170, 175, 172, 174, 0, 0, 62, 0,
	63, 64, 65, 0, 0, 66, 0, 67, 0, 68,
	69, 0, 0, 70, 71, 72, 73, 74, 75, 0,
	0, 176, 76, 77, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 0, 0,
	137, 0, 79, 142, 0, 0, 0, 164, 160, 0,
	80, 0, 81, 88, 169, 152, 82, 83, 84, 85,
	86, 87, 162, 163, 0, 0, 0, 0, 0, 166,
	155, 156, 157, 158, 159, 154, 59, 0, 60, 0,
	0, 146, 131, 0, 57, 61, 0, 148, 0, 0,
	0, 0, 58, 173, 171, 177, 0, 170, 175, 172,
	174, 0, 0, 62, 0, 63, 64, 65, 0, 0,
	66, 0, 67, 0, 68, 69, 0, 0, 70, 71,
	72, 73, 74, 75, 0, 0, 176, 76, 77, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 0, 0, 0, 137, 0, 79, 142, 0,
	0, 0, 164, 160, 0, 80, 0, 81, 88, 169,
	152, 82, 83, 84, 85, 86, 87, 162, 163, 0,
	0, 0, 0, 0, 166, 155, 156, 157, 158, 159,
	154, 59, 0, 60, 0, 0, 146, 0, 0, 57,
	61, 0, 148, 0, 0, 0, 0, 58, 173, 171,
	177, 0, 170, 175, 172, 174, 0, 0, 62, 0,
	63, 64, 65, 0, 0, 66, 0, 67, 0, 68,
	69, 0, 0, 70, 71, 72, 73, 74, 75, 0,
	0, 176, 76, 77, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 234, 0, 0, 0, 164, 160, 0,
	80, 0, 81, 88, 169, 152, 82, 83, 84, 85,
	86, 87, 162, 163, 0, 0, 0, 0, 0, 166,
	155, 156, 157, 158, 159, 154, 59, 0, 60, 0,
	0, 146, 0, 0, 57, 61, 0, 148, 0, 0,
	0, 0, 58, 173, 171, 177, 0, 170, 175, 172,
	174, 0, 0, 62, 0, 63, 64, 65, 0, 0,
	66, 0, 67, 0, 68, 69, 0, 0, 70, 71,
	72, 73, 74, 75, 0, 0, 176, 76, 77, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 234, 0,
	0, 0, 0, 0, 0, 80, 0, 81, 88, 169,
	254, 82, 83, 84, 85, 86, 87, 59, 0, 60,
	0, 0, 0, 0, 55, 57, 61, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 330, 0, 0,
	0, 0, 289, 0, 62, 0, 63, 64, 65, 0,
	0, 66, 0, 67, 0, 68, 69, 0, 0, 70,
	71, 72, 73, 74, 75, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 80, 287, 288, 290,
	0, 0, 82, 83, 84, 85, 86, 87, 59, 0,
	60, 0, 0, 0, 0, 166, 57, 61, 0, 0,
	0, 0, 0, 0, 58, 173, 171, 177, 0, 170,
	175, 172, 174, 286, 0, 62, 0, 63, 64, 65,
	0, 0, 253, 250, 67, 252, 68, 69, 0, 0,
	70, 71, 72, 73, 74, 75, 0, 0, 176, 76,
	77, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	234, 0, 0, 0, 0, 0, 0, 80, 0, 81,
	88, 169, 254, 82, 83, 84, 85, 86, 87, 59,
	0, 60, 0, 0, 0, 0, 55, 57, 61, 0,
	0, 0, 0, 0, 0, 58, 173, 171, 177, 0,
	170, 175, 172, 174, 0, 0, 62, 0, 63, 64,
	65, 0, 0, 66, 0, 67, 0, 68, 69, 0,
	0, 70, 71, 72, 73, 74, 75, 0, 0, 176,
	76, 77, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 234, 0, 0, 0, 0, 0, 0, 80, 0,
	81, 88, 169, 254, 82, 83, 84, 85, 86, 87,
	59, 0, 60, 0, 0, 0, 0, 55, 57, 61,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 63,
	64, 65, 0, 0, 66, 0, 67, 0, 68, 69,
	0, 0, 70, 71, 72, 73, 74, 75, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 59, 0, 60, 0, 80,
	0, 81, 88, 57, 61, 82, 83, 84, 85, 86,
	87, 58, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 62, 113, 63, 64, 65, 0, 0, 66,
	0, 67, 0, 68, 69, 0, 0, 70, 71, 72,
	73, 74, 75, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	59, 0, 60, 0, 80, 0, 81, 88, 57, 61,
	82, 83, 84, 85, 86, 87, 58, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 62, 0, 63,
	64, 65, 0, 0, 66, 0, 67, 0, 68, 69,
	0, 0, 70, 71, 72, 73, 74, 75, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 59, 0, 60, 0, 80,
	0, 81, 88, 57, 61, 82, 83, 84, 85, 86,
	87, 58, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 62, 0, 63, 64, 65, 0, 0, 66,
	0, 67, 0, 68, 69, 0, 0, 70, 71, 72,
	73, 74, 75, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 81, 88, 0, 0,
	82, 83, 84, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 0, 55,
}

var yyPact = [...]int16{
	298, -1000, -1000, -9, -1000, -1000, -1000, 308, -1000, -1000,
	420, 184, 378, 423, 421, 421, 302, 299, 278, 1665,
	239, 217, 280, -1000, 298, -1000, 82, 1750, 151, 375,
	98, -1000, 97, 442, 1665, 1580, 95, 1665, 92, 365,
	312, 29, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 363,
	1665, 1665, 1665, 294, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 237,
	-1000, -1000, 91, -1000, 314, 746, -1000, -1000, 208, -1000,
	205, -13, -1000, 362, 188, 151, 445, -1000, -1000, 397,
	631, 631, -1000, 1665, 37, -1000, 413, 415, 460, -1000,
	421, 458, -17, -17, 263, 79, 163, -1000, -1000, 87,
	275, -1000, 28, 1495, 77, 112, -1000, 861, -1000, 104,
	-1000, 11, -18, -1000, -1000, 861, 976, -1000, 861, 137,
	-1000, -1000, -22, 32, -24, -1000, -1000, -1000, -1000, -1000,
	-25, -1000, -1000, -1000, -1000, 36, -30, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 172, 168,
	1293, 1665, 164, 361, 409, -1000, 631, 631, -1000, 861,
	-1000, -1000, -36, 1394, 339, 335, 332, 403, 1665, -1000,
	1665, 177, 1394, 177, 462, 861, 74, -1000, 101, -1000,
	-1000, 1192, 861, -1000, -1000, 1665, 861, 861, -1000, 976,
	150, 976, 198, 976, 976, 976, -1000, 976, 976, 976,
	163, 226, -1000, -1000, -1000, -50, 463, 176, 12, 48,
	1091, 861, 1394, 861, 86, 1665, -59, -1000, -1000, -1000,
	327, 463, 861, 83, -1000, -37, -1000, 1665, 45, -1000,
	-1000, -1000, 1394, -1000, 1394, 1665, 1394, 1394, 81, 44,
	346, 343, 360, -47, -1000, -61, -1000, -1000, 253, 373,
	-1000, 462, 79, 861, 462, 442, 273, -38, -39, -40,
	-43, 1495, 1495, -1000, 112, -1000, 5, -1000, 145, 31,
	976, -44, 5, 11, 11, -1000, -1000, -1000, -52, 227,
	861, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 274, -1000, -1000, -1000, -1000, -1000, -1000, 43, -1000,
	-53, -54, 244, -1000, -55, 27, -1000, -1000, -45, -1000,
	1293, 76, -92, -1000, 321, 1394, -46, 450, -62, -1000,
	-1000, 342, -1000, -1000, 450, 456, 414, -1000, 288, 24,
	-1000, 861, 1394, -1000, 250, 861, 354, 253, -1000, -1000,
	117, 1495, -47, -56, 391, -57, -58, 73, -60, -1000,
	-1000, -1000, 976, 5, 516, -1000, 199, 861, 861, 219,
	861, -1000, -1000, -1000, 463, -1000, 861, 1293, -1000, -1000,
	-1000, 1394, 147, 53, 51, 861, -63, 1394, -1000, -1000,
	-1000, -1000, -1000, 1394, -1000, 72, 70, 285, -47, -64,
	-1000, -1000, 861, -1000, 76, 250, 263, -1000, 117, 271,
	-1000, -1000, -73, 1495, 58, 1495, 1495, -65, 1495, 5,
	-66, -75, 217, -1000, 215, -1000, 861, -83, -86, -1000,
	-76, -80, 153, -1000, 144, -103, -87, -1000, -1000, -81,
	-1000, -1000, -1000, 277, -1000, -1000, -1000, -1000, -1000, 261,
	-1000, 1192, -1000, -1000, -100, -1000, -1000, -1000, -1000, -1000,
	-1000, 861, -1000, -1000, -1000, -1000, -1000, 329, -1000, -1000,
	-1000, -1000, -1000, -1000, 267, 259, 462, 1495, -1000, -1000,
	324, 246, 861, 1394, 351, -1000, -1000, 253, 257, -1000,
	21, -1000, 861, 250, 861, 1394, -1000, -1000, -1, 243,
	-1000, 861, -1000, -1000, -1000, 243, -1000,
}

var yyPgo = [...]int16{
	0, 569, 432, 562, 561, 558, 18, 556, 26, 12,
	143, 21, 554, 17, 11, 16, 19, 553, 7, 549,
	547, 4, 546, 541, 9, 29, 382, 24, 536, 535,
	36, 534, 15, 533, 532, 531, 23, 13, 0, 528,
	10, 526, 525, 524, 519, 33, 518, 514, 34, 28,
	44, 35, 512, 511, 8, 3, 510, 509, 507, 506,
	6, 505, 501, 1, 5, 227, 498, 497, 496, 495,
	25, 494, 493, 20, 480, 153, 476, 475, 14, 471,
	470, 2, 27, 58, 469,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 84, 84, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 75, 75, 75, 74, 74,
	74, 74, 74, 74, 74, 73, 73, 73, 73, 65,
	65, 5, 5, 5, 5, 25, 25, 72, 72, 71,
	71, 70, 13, 13, 14, 12, 12, 16, 16, 15,
	15, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 78, 78, 78, 78, 78, 78, 78, 78, 18,
	37, 37, 36, 36, 36, 8, 69, 69, 59, 59,
	59, 66, 66, 67, 67, 67, 6, 6, 6, 6,
	6, 6, 6, 6, 7, 7, 23, 23, 22, 22,
	57, 57, 58, 58, 19, 19, 19, 19, 20, 20,
	21, 21, 82, 83, 83, 9, 9, 11, 11, 10,
	10, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 81, 81, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 26, 27, 28, 28, 28,
	29, 29, 29, 30, 30, 31, 31, 32, 32, 33,
	34, 34, 40, 40, 53, 53, 41, 41, 54, 54,
	55, 55, 62, 62, 64, 64, 61, 61, 63, 63,
	63, 60, 60, 60, 35, 35, 39, 39, 56, 76,
	76, 43, 43, 38, 44, 44, 45, 45, 49, 49,
	46, 46, 46, 46, 46, 46, 46, 47, 47, 47,
	47, 47, 48, 48, 48, 50, 50, 50, 50, 51,
	51, 52, 52, 42, 42, 42, 42, 68, 68, 77,
	77, 77, 77, 77, 77,
}

var yyR2 = [...]int8{
	0, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	1, 1, 1, 6, 3, 2, 3, 3, 9, 6,
	3, 8, 9, 7, 5, 6, 6, 8, 6, 6,
	7, 7, 3, 8, 8, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
	3, 6, 5, 7, 8, 2, 1, 0, 4, 1,
	3, 3, 1, 3, 3, 1, 3, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 3, 1, 1, 3, 6, 0, 2, 0, 3,
	3, 0, 1, 0, 1, 2, 1, 4, 2, 2,
	3, 2, 2, 4, 13, 3, 0, 1, 0, 1,
	1, 1, 2, 4, 1, 2, 4, 4, 2, 3,
	1, 3, 1, 1, 1, 1, 3, 1, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 4,
	4, 4, 4, 2, 6, 1, 2, 0, 2, 2,
	0, 2, 2, 2, 1, 0, 1, 1, 2, 6,
	0, 1, 0, 2, 0, 3, 0, 2, 0, 2,
	0, 2, 0, 3, 0, 4, 2, 4, 0, 1,
	1, 0, 1, 2, 2, 4, 0, 1, 5, 4,
	5, 0, 2, 1, 3, 1, 3, 1, 2, 1,
	3, 3, 4, 5, 4, 3, 1, 4, 6, 6,
	1, 1, 3, 3, 1, 3, 3, 3, 1, 2,
	1, 3, 1, 1, 1, 3, 6, 0, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, 48, 50, 51,
	4, 6, 5, 34, 43, 44, 52, 53, 56, 57,
	-7, 94, 63, -84, 130, 49, 7, 30, 32, 31,
	8, 113, 7, 14, 30, 32, 8, 30, 8, -75,
	78, -74, 63, 4, 52, 57, 56, 5, 34, -75,
	54, 54, 65, -26, -81, 113, -79, 13, 21, 5,
	7, 14, 32, 34, 35, 36, 39, 41, 43, 44,
	47, 48, 49, 50, 51, 52, 56, 57, 59, 86,
	94, 96, 100, 101, 102, 103, 104, 105, 97, 77,
	95, 96, 30, 97, 45, -22, 64, -2, 86, 113,
	86, -82, -81, -65, 86, 32, 113, 113, -27, -28,
	16, 17, -81, 33, -82, 113, -82, 113, 33, 47,
	123, 33, -26, -26, -26, 58, -23, 78, 113, 46,
	-57, 126, -58, -38, -44, -45, -49, 84, -46, -48,
	-47, -50, 87, -56, -51, 79, 125, -52, 131, -42,
	-19, -17, 99, -21, 119, 114, 115, 116, 117, 118,
	92, -18, 106, 107, 91, -83, 113, -81, -80, 98,
	26, 23, 28, 22, 29, 27, 55, 24, 84, 84,
	131, 33, 84, -65, 9, -29, 19, 18, -30, 20,
	-38, -30, -82, 121, 35, 36, 5, 9, 7, -75,
	7, -10, 131, -10, -40, 68, -71, -70, 113, -6,
	113, 65, 123, -60, -81, 76, 110, 109, -49, 111,
	89, 98, -68, 112, 124, 125, 84, 126, 127, 128,
	131, -39, -38, -51, 87, -38, 93, 131, -20, 122,
	131, 131, 121, 131, 87, 87, -37, -36, -8, -35,
	40, -83, 42, 39, 99, -82, 87, 33, 10, -30,
	-30, -38, 131, -83, 38, 37, 38, 38, 39, 10,
	-81, -81, -25, 55, -6, -9, -83, -25, -64, 6,
	-38, -40, 123, 111, -24, -26, 131, 95, 96, 30,
	97, -18, -38, -81, -45, -49, -48, 91, 84, -48,
	85, 88, -48, -50, -50, -51, -51, -51, -6, -76,
	80, 132, -78, 22, 23, 24, 25, 26, 27, 28,
	29, -77, 100, 101, 102, 103, 104, 105, 122, 116,
	126, -21, -38, -83, -16, -15, -38, 113, -82, 132,
	123, 41, -78, -38, 113, 131, -82, 116, -9, -8,
	-82, -83, -83, 113, 116, 37, 37, -72, 33, -13,
	-14, 131, 123, 132, -54, 71, 32, -64, -70, -38,
	-64, -27, 55, -6, 15, 131, 131, 131, 131, -60,
	-60, 91, 109, -48, 131, 132, -43, 80, 82, -38,
	65, 116, 132, 132, 76, 132, 123, 131, -36, -11,
	-83, 131, -59, 133, 131, 42, -9, 131, -73, 11,
	12, 13, 132, 37, -73, 8, 8, 59, 123, -16,
	-83, -55, 72, -38, 33, -54, -31, -32, -33, -34,
	108, -60, -13, 132, 21, 132, 132, 113, 132, -48,
	-6, -15, 94, 83, -38, -38, 81, -38, -78, -38,
	-37, -9, -67, 91, 84, 114, 114, -38, 132, -9,
	-83, 113, 113, 60, -14, 132, -38, -11, -55, -40,
	-32, 66, 132, -60, 113, -60, -60, 132, -60, 132,
	132, 81, -38, 132, 132, 132, 132, -66, 90, 91,
	134, 132, 132, 61, -53, 69, -24, 132, -38, -69,
	40, -41, 67, 70, -64, -60, 41, -62, 73, -38,
	-12, -21, 33, -54, 70, 123, -38, -55, -61, -38,
	-21, 123, -63, 74, 75, -38, -63,
}

var yyDef = [...]int16{
	0, -2, 1, 4, 6, 7, 8, 10, 11, 12,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 118, 2, 5, 9, 0, 0, 49, 0,
	0, 15, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 36, 38, 39, 40, 41, 42, 43, 44, 0,
	0, 0, 0, 0, 195, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 116,
	108, 109, 0, 111, 112, 0, 119, 3, 0, 14,
	176, 0, 132, 0, 0, 49, 0, 16, 17, 200,
	0, 0, 20, 0, 0, 32, 0, 0, 0, 35,
	0, 0, 139, 139, 212, 0, 0, 117, 110, 0,
	115, 120, 121, 231, 243, 245, 247, 0, 249, -2,
	256, 264, 144, 260, 268, 236, 0, 270, 0, 272,
	273, 274, 145, 124, 0, 71, 72, 73, 74, 75,
	0, 77, 78, 79, 80, 130, 152, 133, 134, 141,
	142, 143, 146, 147, 148, 149, 150, 151, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 198, 0,
	204, 199, 0, 0, 0, 0, 0, 0, 0, 37,
	0, 0, 0, 0, 224, 0, 212, 59, 0, 107,
	113, 0, 0, 122, 232, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 237, 269, 144, 0, 0, 0, 125, 0,
	0, 0, 0, 67, 0, 0, 0, 90, 92, 93,
	0, 0, 0, 163, 145, 0, 50, 0, 0, 201,
	202, 203, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 56, 0, 135, 52, 218, 0,
	213, 224, 0, 0, 224, 197, 0, 0, 178, 0,
	185, 231, 231, 233, 244, 246, 250, 251, 0, 0,
	0, 0, 255, 262, 263, 265, 266, 267, 0, 241,
	0, 271, 275, 81, 82, 83, 84, 85, 86, 87,
	88, 0, 279, 280, 281, 282, 283, 284, 0, 128,
	0, 0, 0, 131, 0, 68, 69, 13, 0, 19,
	0, 0, 98, 234, 0, 0, 0, 45, 0, 25,
	26, 0, 28, 29, 45, 0, 0, 51, 0, 55,
	62, 67, 0, 140, 220, 0, 0, 218, 60, 61,
	-2, 231, 0, 0, 0, 0, 0, 0, 0, 193,
	123, 252, 0, 254, 0, 257, 0, 0, 0, 0,
	0, 129, 126, 127, 0, 89, 0, 0, 91, 94,
	137, 0, 103, 0, 0, 0, 0, 0, 30, 46,
	47, 48, 23, 0, 31, 0, 0, 0, 0, 0,
	136, 53, 0, 219, 0, 220, 212, 206, -2, 0,
	211, 186, 0, 231, 0, 231, 231, 0, 231, 253,
	0, 0, 177, 238, 0, 242, 0, 0, 0, 70,
	0, 0, 101, 104, 0, 0, 0, 235, 21, 0,
	27, 33, 34, 0, 63, 64, 221, 225, 54, 214,
	208, 0, 187, 188, 0, 189, 190, 191, 192, 258,
	259, 0, 239, 276, 76, 18, 138, 96, 102, 105,
	99, 100, 22, 58, 216, 0, 224, 231, 240, 95,
	0, 222, 0, 0, 0, 194, 97, 218, 0, 217,
	215, 65, 0, 220, 0, 0, 209, 114, 223, 228,
	66, 0, 226, 229, 230, 228, 227,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 128, 3, 3,
	131, 132, 126, 124, 123, 125, 129, 127, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 133, 3, 134,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 130,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmts = yyDollar[1].stmts
			setResult(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = []SQLStmt{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmts = append([]SQLStmt{yyDollar[1].stmt}, yyDollar[3].stmts...)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &BeginTransactionStmt{}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &BeginTransactionStmt{}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &CommitStmt{}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &RollbackStmt{}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &CreateDatabaseStmt{ifNotExists: true, DB: yyDollar[6].id}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &CreateDatabaseStmt{ifNotExists: false, DB: yyDollar[3].id}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &UseDatabaseStmt{DB: yyDollar[2].id}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &UseDatabaseStmt{DB: yyDollar[3].id}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &UseSnapshotStmt{period: yyDollar[3].period}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.stmt = newCreateTableStmt(yyDollar[6].str, yyDollar[8].tableElems, true)
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = newCreateTableStmt(yyDollar[3].str, yyDollar[5].tableElems, false)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &DropTableStmt{table: yyDollar[3].str}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &CreateIndexStmt{ifNotExists: yyDollar[3].boolean, table: yyDollar[5].str, cols: yyDollar[7].colNames}
		}
	case 22:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.stmt = &CreateIndexStmt{unique: true, ifNotExists: yyDollar[4].boolean, table: yyDollar[6].str, cols: yyDollar[8].colNames}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &DropIndexStmt{table: yyDollar[4].str, cols: yyDollar[6].colNames}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.stmt = &DropIndexStmt{table: yyDollar[3].str, cols: []string{yyDollar[5].str}}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &AddColumnStmt{table: yyDollar[3].str, colSpec: yyDollar[6].colSpec}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &RenameTableStmt{oldName: yyDollar[3].str, newName: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &RenameColumnStmt{table: yyDollar[3].str, oldName: yyDollar[6].str, newName: yyDollar[8].str}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &DropColumnStmt{table: yyDollar[3].str, colName: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &DropConstraintStmt{table: yyDollar[3].str, constraintName: yyDollar[6].id}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &CreateUserStmt{username: yyDollar[3].id, password: yyDollar[6].str, permission: yyDollar[7].permission}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &AlterUserStmt{username: yyDollar[3].id, password: yyDollar[6].str, permission: yyDollar[7].permission}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &DropUserStmt{username: yyDollar[3].id}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &AlterPrivilegesStmt{database: yyDollar[5].str, user: yyDollar[8].id, privileges: yyDollar[2].sqlPrivileges, isGrant: true}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &AlterPrivilegesStmt{database: yyDollar[5].str, user: yyDollar[8].id, privileges: yyDollar[2].sqlPrivileges}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.sqlPrivileges = allPrivileges
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivileges = []SQLPrivilege{yyDollar[1].sqlPrivilege}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.sqlPrivileges = append(yyDollar[3].sqlPrivileges, yyDollar[1].sqlPrivilege)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivilege = SQLPrivilegeSelect
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivilege = SQLPrivilegeCreate
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivilege = SQLPrivilegeInsert
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivilege = SQLPrivilegeUpdate
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivilege = SQLPrivilegeDelete
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivilege = SQLPrivilegeDrop
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlPrivilege = SQLPrivilegeAlter
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.permission = PermissionReadWrite
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.permission = PermissionReadOnly
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.permission = PermissionReadWrite
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.permission = PermissionAdmin
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &UpsertIntoStmt{isInsert: true, tableRef: yyDollar[3].tableRef, cols: yyDollar[4].colNames, ds: yyDollar[5].ds, onConflict: yyDollar[6].onConflict}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.stmt = &UpsertIntoStmt{tableRef: yyDollar[3].tableRef, cols: yyDollar[4].colNames, ds: yyDollar[5].ds}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &DeleteFromStmt{tableRef: yyDollar[3].tableRef, where: yyDollar[4].exp, indexOn: yyDollar[5].colNames, limit: yyDollar[6].exp, offset: yyDollar[7].exp}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &UpdateStmt{tableRef: yyDollar[2].tableRef, updates: yyDollar[4].updates, where: yyDollar[5].exp, indexOn: yyDollar[6].colNames, limit: yyDollar[7].exp, offset: yyDollar[8].exp}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.ds = &valuesDataSource{rows: yyDollar[2].rows}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ds = yyDollar[1].stmt.(DataSource)
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.onConflict = nil
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.onConflict = &OnConflictDo{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updates = []*colUpdate{yyDollar[1].update}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updates = append(yyDollar[1].updates, yyDollar[3].update)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.update = &colUpdate{col: yyDollar[1].id, op: yyDollar[2].cmpOp, val: yyDollar[3].exp}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.rows = []*RowSpec{yyDollar[1].row}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.rows = append(yyDollar[1].rows, yyDollar[3].row)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.row = &RowSpec{Values: yyDollar[2].values}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.cols = []*ColSelector{yyDollar[1].col}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.cols = append(yyDollar[1].cols, yyDollar[3].col)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.values = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.values = yyDollar[1].values
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.values = []ValueExp{yyDollar[1].exp}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].exp)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Integer{val: int64(yyDollar[1].integer)}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Float64{val: float64(yyDollar[1].float)}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Varchar{val: yyDollar[1].str}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Bool{val: yyDollar[1].boolean}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Blob{val: yyDollar[1].blob}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.value = &Cast{val: yyDollar[3].exp, t: yyDollar[5].sqlType}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = yyDollar[1].value
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Param{id: yyDollar[1].id}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Param{id: fmt.Sprintf("param%d", yyDollar[1].pparam), pos: yyDollar[1].pparam}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &NullValue{t: AnyType}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = IntegerType
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = BooleanType
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = VarcharType
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = UUIDType
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = BLOBType
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = TimestampType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = Float64Type
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sqlType = JSONType
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.value = &FnCall{fn: yyDollar[1].id, params: yyDollar[3].values}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableElems = []TableElem{yyDollar[1].tableElem}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableElems = append(yyDollar[1].tableElems, yyDollar[3].tableElem)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableElem = yyDollar[1].colSpec
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableElem = yyDollar[1].check
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableElem = PrimaryKeyConstraint(yyDollar[3].colNames)
		}
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.colSpec = &ColSpec{
				colName:       yyDollar[1].str,
				colType:       yyDollar[2].sqlType,
				maxLen:        int(yyDollar[3].integer),
				notNull:       yyDollar[4].boolean || yyDollar[6].boolean,
				autoIncrement: yyDollar[5].boolean,
				primaryKey:    yyDollar[6].boolean,
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.integer = 0
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.stmt = &UnionStmt{
				distinct: yyDollar[3].distinct,
				left:     yyDollar[1].stmt.(DataSource),
				right:    yyDollar[4].stmt.(DataSource),
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "databases"}},
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "tables"}},
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "table", params: []ValueExp{&Varchar{val: yyDollar[3].id}}}},
			}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "users"}},
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "grants"}},
			}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "grants", params: []ValueExp{&Varchar{val: yyDollar[4].id}}}},
			}
		}
	case 114:
		yyDollar = yyS[yypt-13 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				distinct: yyDollar[2].distinct,
				targets:  yyDollar[3].targets,
				ds:       yyDollar[5].ds,
				indexOn:  yyDollar[6].colNames,
				joins:    yyDollar[7].joins,
				where:    yyDollar[8].exp,
				groupBy:  yyDollar[9].cols,
				having:   yyDollar[10].exp,
				orderBy:  yyDollar[11].ordexps,
				limit:    yyDollar[12].exp,
				offset:   yyDollar[13].exp,
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				distinct: yyDollar[2].distinct,
				targets:  yyDollar[3].targets,
				ds:       &valuesDataSource{rows: []*RowSpec{{}}},
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.distinct = true
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.distinct = false
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.distinct = false
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.distinct = true
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.targets = nil
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.targets = yyDollar[1].targets
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.targets = []TargetEntry{{Exp: yyDollar[1].exp, As: yyDollar[2].id}}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.targets = append(yyDollar[1].targets, TargetEntry{Exp: yyDollar[3].exp, As: yyDollar[4].id})
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sel = yyDollar[1].col
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.sel = &JSONSelector{ColSelector: yyDollar[1].col, fields: yyDollar[2].jsonFields}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.sel = &AggColSelector{aggFn: yyDollar[1].aggFn, col: "*"}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.sel = &AggColSelector{aggFn: yyDollar[1].aggFn, table: yyDollar[3].col.table, col: yyDollar[3].col.col}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.jsonFields = []string{yyDollar[2].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.jsonFields = append(yyVAL.jsonFields, yyDollar[3].str)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.col = &ColSelector{col: yyDollar[1].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.col = &ColSelector{table: yyDollar[1].str, col: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].keyword
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colNames = []string{yyDollar[1].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colNames = append(yyDollar[1].colNames, yyDollar[3].str)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colNames = []string{yyDollar[1].str}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colNames = yyDollar[2].colNames
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.colNames = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colNames = yyDollar[2].colNames
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].id
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = string(yyDollar[1].keyword)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].tableRef.period = yyDollar[2].period
			yyDollar[1].tableRef.as = yyDollar[3].id
			yyVAL.ds = yyDollar[1].tableRef
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &valuesDataSource{inferTypes: true, rows: yyDollar[3].rows}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[2].stmt.(*SelectStmt).as = yyDollar[4].id
			yyVAL.ds = yyDollar[2].stmt.(DataSource)
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "databases"}, as: yyDollar[4].id}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "tables"}, as: yyDollar[4].id}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "table", params: []ValueExp{&Varchar{val: yyDollar[3].id}}}}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "users"}, as: yyDollar[4].id}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: yyDollar[1].value.(*FnCall), as: yyDollar[2].id}
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.ds = &tableRef{table: yyDollar[4].id, history: true, as: yyDollar[6].id}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableRef = &tableRef{table: yyDollar[1].str}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.period = period{start: yyDollar[1].openPeriod, end: yyDollar[2].openPeriod}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.openPeriod = nil
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{inclusive: true, instant: yyDollar[2].periodInstant}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{instant: yyDollar[2].periodInstant}
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.openPeriod = nil
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{inclusive: true, instant: yyDollar[2].periodInstant}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{instant: yyDollar[2].periodInstant}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.periodInstant = periodInstant{instantType: txInstant, exp: yyDollar[2].exp}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.periodInstant = periodInstant{instantType: timeInstant, exp: yyDollar[1].exp}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joins = nil
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joins = yyDollar[1].joins
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joins = []*JoinSpec{yyDollar[1].join}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joins = append([]*JoinSpec{yyDollar[1].join}, yyDollar[2].joins...)
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.join = &JoinSpec{joinType: yyDollar[1].joinType, ds: yyDollar[3].ds, indexOn: yyDollar[4].colNames, cond: yyDollar[6].exp}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinType = InnerJoin
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joinType = yyDollar[1].joinType
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.cols = nil
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.cols = yyDollar[3].cols
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.ordexps = nil
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ordexps = yyDollar[3].ordexps
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.colNames = nil
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.colNames = yyDollar[4].colNames
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.ordexps = []*OrdExp{{exp: yyDollar[1].exp, descOrder: yyDollar[2].opt_ord}}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ordexps = append(yyDollar[1].ordexps, &OrdExp{exp: yyDollar[3].exp, descOrder: yyDollar[4].opt_ord})
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.opt_ord = false
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.opt_ord = false
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.opt_ord = true
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.id = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.id = yyDollar[1].str
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.id = yyDollar[2].str
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.check = CheckConstraint{exp: yyDollar[2].exp}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.check = CheckConstraint{name: yyDollar[2].id, exp: yyDollar[4].exp}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].exp
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.exp = &CaseWhenExp{
				exp:      yyDollar[2].exp,
				whenThen: yyDollar[3].whenThenClauses,
				elseExp:  yyDollar[4].exp,
			}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.whenThenClauses = []whenThenClause{{when: yyDollar[2].exp, then: yyDollar[4].exp}}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.whenThenClauses = append(yyDollar[1].whenThenClauses, whenThenClause{when: yyDollar[3].exp, then: yyDollar[5].exp})
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].exp
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &BinBoolExp{left: yyDollar[1].exp, op: Or, right: yyDollar[3].exp}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &BinBoolExp{left: yyDollar[1].exp, op: And, right: yyDollar[3].exp}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = &NotBoolExp{exp: yyDollar[2].exp}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &CmpBoolExp{left: yyDollar[1].exp, op: yyDollar[2].cmpOp, right: yyDollar[3].exp}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &CmpBoolExp{left: yyDollar[1].exp, op: EQ, right: &NullValue{t: AnyType}}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.exp = &CmpBoolExp{left: yyDollar[1].exp, op: NE, right: &NullValue{t: AnyType}}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.exp = &BinBoolExp{
				left: &CmpBoolExp{
					left:  yyDollar[1].exp,
					op:    GE,
					right: yyDollar[3].exp,
				},
				op: And,
				right: &CmpBoolExp{
					left:  yyDollar[1].exp,
					op:    LE,
					right: yyDollar[5].exp,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.exp = &LikeBoolExp{val: yyDollar[1].exp, notLike: yyDollar[2].boolean, pattern: yyDollar[4].exp}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &LikeBoolExp{val: yyDollar[1].exp, notLike: true, pattern: yyDollar[3].exp}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.exp = &ExistsBoolExp{q: (yyDollar[3].stmt).(DataSource)}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.exp = &InSubQueryExp{val: yyDollar[1].exp, notIn: yyDollar[2].boolean, q: yyDollar[5].stmt.(*SelectStmt)}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.exp = &InListExp{val: yyDollar[1].exp, notIn: yyDollar[2].boolean, values: yyDollar[5].values}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].exp
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &NumExp{left: yyDollar[1].exp, op: ADDOP, right: yyDollar[3].exp}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &NumExp{left: yyDollar[1].exp, op: SUBSOP, right: yyDollar[3].exp}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &NumExp{left: yyDollar[1].exp, op: MULTOP, right: yyDollar[3].exp}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &NumExp{left: yyDollar[1].exp, op: DIVOP, right: yyDollar[3].exp}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &NumExp{left: yyDollar[1].exp, op: MODOP, right: yyDollar[3].exp}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			i, isInt := yyDollar[2].exp.(*Integer)
			if isInt {
				i.val = -i.val
				yyVAL.exp = i
			} else {
				yyVAL.exp = &NumExp{left: &Integer{val: 0}, op: SUBSOP, right: yyDollar[2].exp}
			}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].sel
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].value
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &Cast{val: yyDollar[1].exp, t: yyDollar[3].sqlType}
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.exp = &ExtractFromTimestampExp{Field: yyDollar[3].timestampField, Exp: yyDollar[5].exp}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.timestampField = TimestampFieldTypeYear
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.timestampField = TimestampFieldTypeMonth
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.timestampField = TimestampFieldTypeDay
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.timestampField = TimestampFieldTypeHour
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.timestampField = TimestampFieldTypeMinute
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.timestampField = TimestampFieldTypeSecond
		}
	}
	goto yystack /* stack new state and value */
}
