// Code generated by goyacc -l -o sql_parser.go sql_grammar.y. DO NOT EDIT.
package sql

import __yyfmt__ "fmt"

import "fmt"

func setResult(l yyLexer, stmts []SQLStmt) {
	l.(*lexer).result = stmts
}

type yySymType struct {
	yys           int
	stmts         []SQLStmt
	stmt          SQLStmt
	datasource    DataSource
	colsSpec      []*ColSpec
	colSpec       *ColSpec
	cols          []*ColSelector
	rows          []*RowSpec
	row           *RowSpec
	values        []ValueExp
	value         ValueExp
	id            string
	integer       uint64
	float         float64
	str           string
	boolean       bool
	blob          []byte
	sqlType       SQLValueType
	aggFn         AggregateFn
	ids           []string
	col           *ColSelector
	sel           Selector
	sels          []Selector
	jsonFields    []string
	distinct      bool
	ds            DataSource
	tableRef      *tableRef
	period        period
	openPeriod    *openPeriod
	periodInstant periodInstant
	joins         []*JoinSpec
	join          *JoinSpec
	joinType      JoinType
	exp           ValueExp
	binExp        ValueExp
	err           error
	ordcols       []*OrdCol
	opt_ord       bool
	logicOp       LogicOperator
	cmpOp         CmpOperator
	pparam        int
	update        *colUpdate
	updates       []*colUpdate
	onConflict    *OnConflictDo
	permission    Permission
}

const CREATE = 57346
const DROP = 57347
const USE = 57348
const DATABASE = 57349
const USER = 57350
const WITH = 57351
const PASSWORD = 57352
const READ = 57353
const READWRITE = 57354
const ADMIN = 57355
const SNAPSHOT = 57356
const HISTORY = 57357
const SINCE = 57358
const AFTER = 57359
const BEFORE = 57360
const UNTIL = 57361
const TX = 57362
const OF = 57363
const TIMESTAMP = 57364
const TABLE = 57365
const UNIQUE = 57366
const INDEX = 57367
const ON = 57368
const ALTER = 57369
const ADD = 57370
const RENAME = 57371
const TO = 57372
const COLUMN = 57373
const PRIMARY = 57374
const KEY = 57375
const BEGIN = 57376
const TRANSACTION = 57377
const COMMIT = 57378
const ROLLBACK = 57379
const INSERT = 57380
const UPSERT = 57381
const INTO = 57382
const VALUES = 57383
const DELETE = 57384
const UPDATE = 57385
const SET = 57386
const CONFLICT = 57387
const DO = 57388
const NOTHING = 57389
const SELECT = 57390
const DISTINCT = 57391
const FROM = 57392
const JOIN = 57393
const HAVING = 57394
const WHERE = 57395
const GROUP = 57396
const BY = 57397
const LIMIT = 57398
const OFFSET = 57399
const ORDER = 57400
const ASC = 57401
const DESC = 57402
const AS = 57403
const UNION = 57404
const ALL = 57405
const NOT = 57406
const LIKE = 57407
const IF = 57408
const EXISTS = 57409
const IN = 57410
const IS = 57411
const AUTO_INCREMENT = 57412
const NULL = 57413
const CAST = 57414
const SCAST = 57415
const SHOW = 57416
const DATABASES = 57417
const TABLES = 57418
const USERS = 57419
const NPARAM = 57420
const PPARAM = 57421
const JOINTYPE = 57422
const LOP = 57423
const CMPOP = 57424
const IDENTIFIER = 57425
const TYPE = 57426
const INTEGER = 57427
const FLOAT = 57428
const VARCHAR = 57429
const BOOLEAN = 57430
const BLOB = 57431
const AGGREGATE_FUNC = 57432
const ERROR = 57433
const DOT = 57434
const ARROW = 57435
const STMT_SEPARATOR = 57436

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CREATE",
	"DROP",
	"USE",
	"DATABASE",
	"USER",
	"WITH",
	"PASSWORD",
	"READ",
	"READWRITE",
	"ADMIN",
	"SNAPSHOT",
	"HISTORY",
	"SINCE",
	"AFTER",
	"BEFORE",
	"UNTIL",
	"TX",
	"OF",
	"TIMESTAMP",
	"TABLE",
	"UNIQUE",
	"INDEX",
	"ON",
	"ALTER",
	"ADD",
	"RENAME",
	"TO",
	"COLUMN",
	"PRIMARY",
	"KEY",
	"BEGIN",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"INSERT",
	"UPSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"CONFLICT",
	"DO",
	"NOTHING",
	"SELECT",
	"DISTINCT",
	"FROM",
	"JOIN",
	"HAVING",
	"WHERE",
	"GROUP",
	"BY",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"AS",
	"UNION",
	"ALL",
	"NOT",
	"LIKE",
	"IF",
	"EXISTS",
	"IN",
	"IS",
	"AUTO_INCREMENT",
	"NULL",
	"CAST",
	"SCAST",
	"SHOW",
	"DATABASES",
	"TABLES",
	"USERS",
	"NPARAM",
	"PPARAM",
	"JOINTYPE",
	"LOP",
	"CMPOP",
	"IDENTIFIER",
	"TYPE",
	"INTEGER",
	"FLOAT",
	"VARCHAR",
	"BOOLEAN",
	"BLOB",
	"AGGREGATE_FUNC",
	"ERROR",
	"DOT",
	"ARROW",
	"','",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'.'",
	"STMT_SEPARATOR",
	"'('",
	"')'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 93,
	65, 164,
	68, 164,
	-2, 152,
	-1, 231,
	51, 128,
	-2, 123,
	-1, 272,
	51, 128,
	-2, 125,
}

const yyPrivate = 57344

const yyLast = 452

var yyAct = [...]int16{
	92, 364, 98, 78, 265, 129, 225, 171, 295, 299,
	177, 107, 168, 213, 294, 271, 214, 6, 121, 248,
	194, 57, 124, 20, 335, 286, 182, 285, 223, 258,
	223, 346, 223, 223, 339, 223, 340, 320, 318, 95,
	287, 259, 97, 224, 336, 330, 110, 106, 300, 19,
	77, 91, 321, 108, 109, 150, 319, 310, 111, 281,
	101, 102, 103, 104, 105, 79, 301, 148, 149, 279,
	278, 96, 276, 257, 255, 243, 100, 296, 180, 181,
	183, 144, 145, 147, 146, 242, 185, 222, 211, 126,
	135, 254, 143, 247, 159, 95, 154, 155, 97, 159,
	238, 157, 110, 106, 179, 237, 236, 235, 196, 108,
	109, 160, 158, 156, 111, 137, 101, 102, 103, 104,
	105, 79, 134, 173, 120, 119, 22, 96, 363, 150,
	80, 186, 100, 170, 324, 256, 357, 79, 191, 184,
	80, 188, 174, 150, 75, 199, 200, 201, 202, 203,
	204, 133, 150, 122, 190, 148, 149, 147, 146, 212,
	215, 323, 258, 244, 148, 149, 223, 128, 135, 144,
	145, 147, 146, 216, 210, 241, 114, 230, 144, 145,
	147, 146, 228, 217, 80, 231, 90, 80, 317, 221,
	239, 79, 240, 198, 175, 316, 95, 233, 229, 97,
	232, 189, 323, 110, 106, 30, 291, 282, 253, 246,
	108, 109, 31, 245, 131, 111, 150, 101, 102, 103,
	104, 105, 79, 150, 209, 169, 62, 267, 96, 149,
	274, 307, 293, 100, 280, 269, 130, 176, 275, 263,
	125, 261, 144, 145, 147, 146, 220, 112, 219, 144,
	145, 147, 146, 218, 195, 215, 197, 192, 195, 292,
	288, 187, 161, 138, 113, 283, 83, 298, 10, 12,
	11, 290, 289, 81, 302, 141, 142, 73, 41, 297,
	66, 29, 306, 63, 308, 309, 65, 311, 304, 303,
	64, 13, 61, 56, 55, 20, 45, 215, 7, 334,
	8, 9, 14, 15, 153, 252, 16, 17, 234, 333,
	325, 150, 20, 152, 326, 136, 329, 184, 315, 206,
	82, 19, 331, 51, 207, 314, 205, 208, 72, 42,
	365, 366, 337, 349, 266, 226, 345, 344, 19, 356,
	343, 20, 328, 350, 50, 122, 342, 352, 43, 44,
	46, 305, 127, 39, 358, 355, 48, 354, 347, 361,
	359, 362, 338, 70, 178, 264, 367, 19, 262, 368,
	52, 53, 38, 37, 23, 312, 163, 164, 165, 162,
	260, 34, 40, 117, 353, 268, 139, 84, 227, 54,
	36, 2, 24, 28, 172, 277, 32, 166, 33, 85,
	59, 60, 67, 68, 69, 35, 115, 116, 25, 27,
	26, 89, 88, 140, 49, 249, 250, 251, 118, 86,
	21, 322, 123, 151, 313, 332, 348, 360, 284, 327,
	94, 93, 341, 273, 272, 270, 87, 58, 71, 47,
	132, 76, 74, 99, 351, 167, 193, 18, 5, 4,
	3, 1,
}

var yyPact = [...]int16{
	264, -1000, -1000, 26, -1000, -1000, -1000, 339, -1000, -1000,
	385, 198, 373, 382, 333, 332, 303, 195, 267, 273,
	307, -1000, 264, -1000, 257, 257, 257, 364, 211, -1000,
	210, 384, 209, 200, 207, 203, 197, 195, 195, 195,
	319, -1000, 265, -1000, -1000, 194, -1000, 47, -1000, -1000,
	190, 256, 183, 361, 257, 410, -1000, -1000, 393, 31,
	31, -1000, 181, 84, -1000, 378, 409, 24, 23, 292,
	157, 247, -1000, -1000, 302, -1000, 73, 153, 58, 21,
	76, -1000, 248, 14, 180, 360, 403, -1000, 31, 31,
	-1000, 132, 83, 240, -1000, 132, 132, 12, -1000, -1000,
	132, -1000, -1000, -1000, -1000, -1000, 11, -1000, -1000, -1000,
	-1000, -2, -1000, 10, 179, 348, 346, 347, 387, 142,
	142, 388, 132, 100, -1000, 155, -1000, 3, 101, -1000,
	-1000, 178, 48, 114, 57, 174, -1000, 171, 7, 173,
	106, -1000, -1000, 83, 132, 132, 132, 132, 132, 132,
	255, 259, 140, -1000, 147, 60, 247, -14, 132, 132,
	142, -1000, 171, 170, 165, 163, 102, -15, 72, -1000,
	-59, 279, 363, 83, 388, 157, 132, 388, 384, 293,
	6, 5, 4, -1, 153, -7, 153, -1000, 88, -1000,
	-17, -27, -1000, 69, -1000, 129, 142, -8, 404, 60,
	60, 242, 242, 147, 154, -1000, 234, 132, -10, -1000,
	-28, -1000, 74, -29, 68, 83, -61, -1000, -1000, 350,
	-1000, 404, 327, 156, 324, 277, 132, 359, 279, -1000,
	83, 150, 153, -30, 374, -32, -33, 151, -43, -1000,
	-1000, -1000, -1000, -1000, 175, -76, -62, 142, -1000, -1000,
	-1000, -1000, -1000, 147, -25, -1000, 122, -1000, 132, -1000,
	149, -1000, -24, -1000, -24, -1000, 132, 83, -35, 277,
	292, -1000, 150, 300, -1000, -1000, 153, 148, 153, 153,
	-45, 153, 342, -1000, 254, 110, 103, -1000, -64, -46,
	-65, -50, 83, -1000, 108, -1000, 132, 67, 83, -1000,
	-1000, 142, -1000, 288, -1000, 3, -1000, -57, -1000, -1000,
	-1000, -1000, -35, 239, -1000, 228, -80, -58, -1000, -1000,
	-1000, -1000, -1000, -24, 317, -68, -66, 294, 285, 388,
	153, -71, -1000, -1000, -1000, -1000, -1000, -1000, 312, -1000,
	-1000, 275, 132, 104, 358, -1000, -1000, 310, 279, 284,
	83, 42, -1000, 132, -1000, 277, 101, 104, 83, -1000,
	34, 271, -1000, 101, -1000, -1000, -1000, 271, -1000,
}

var yyPgo = [...]int16{
	0, 451, 391, 450, 449, 448, 17, 447, 446, 20,
	12, 9, 445, 444, 14, 8, 16, 13, 443, 11,
	2, 442, 441, 440, 3, 439, 438, 10, 364, 21,
	437, 436, 186, 435, 15, 434, 433, 0, 18, 432,
	431, 430, 429, 6, 4, 428, 5, 427, 426, 1,
	7, 344, 425, 424, 423, 22, 422, 421, 19, 420,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 59, 59, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	58, 58, 58, 58, 51, 51, 11, 11, 5, 5,
	5, 5, 57, 57, 56, 56, 55, 12, 12, 14,
	14, 15, 10, 10, 13, 13, 17, 17, 16, 16,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	19, 8, 8, 9, 45, 45, 45, 52, 52, 53,
	53, 53, 6, 6, 6, 6, 6, 6, 7, 26,
	26, 25, 25, 21, 21, 22, 22, 20, 20, 20,
	20, 23, 23, 24, 24, 27, 27, 27, 27, 27,
	27, 27, 27, 28, 29, 30, 30, 30, 31, 31,
	31, 32, 32, 33, 33, 34, 34, 35, 36, 36,
	38, 38, 42, 42, 39, 39, 43, 43, 44, 44,
	48, 48, 50, 50, 47, 47, 49, 49, 49, 46,
	46, 46, 37, 37, 37, 37, 37, 37, 37, 37,
	40, 40, 40, 40, 54, 54, 41, 41, 41, 41,
	41, 41, 41, 41,
}

var yyR2 = [...]int8{
	0, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	1, 1, 1, 4, 2, 3, 3, 11, 3, 8,
	9, 7, 5, 6, 6, 8, 6, 7, 7, 3,
	0, 1, 1, 1, 0, 3, 1, 3, 9, 8,
	7, 8, 0, 4, 1, 3, 3, 0, 1, 1,
	3, 3, 1, 3, 1, 3, 0, 1, 1, 3,
	1, 1, 1, 1, 1, 6, 1, 1, 1, 1,
	4, 1, 3, 5, 0, 3, 3, 0, 1, 0,
	1, 2, 1, 4, 2, 2, 3, 2, 13, 0,
	1, 0, 1, 1, 1, 2, 4, 1, 2, 4,
	4, 2, 3, 1, 3, 3, 4, 4, 4, 4,
	4, 2, 6, 1, 2, 0, 2, 2, 0, 2,
	2, 2, 1, 0, 1, 1, 2, 6, 0, 1,
	0, 2, 0, 3, 0, 2, 0, 2, 0, 2,
	0, 3, 0, 4, 2, 4, 0, 1, 1, 0,
	1, 2, 1, 1, 2, 2, 4, 4, 6, 6,
	1, 1, 3, 3, 0, 1, 3, 3, 3, 3,
	3, 3, 3, 4,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, 34, 36, 37,
	4, 6, 5, 27, 38, 39, 42, 43, -7, 74,
	48, -59, 100, 35, 7, 23, 25, 24, 8, 83,
	7, 14, 23, 25, 8, 23, 8, 40, 40, 50,
	-28, 83, 62, 75, 76, 23, 77, -25, 49, -2,
	-51, 66, -51, -51, 25, 83, 83, -29, -30, 16,
	17, 83, 26, 83, 83, 83, 83, -28, -28, -28,
	44, -26, 63, 83, -21, 97, -22, -20, -24, 90,
	83, 83, 64, 83, 26, -51, 9, -31, 19, 18,
	-32, 20, -37, -40, -41, 64, 96, 67, -20, -18,
	101, 85, 86, 87, 88, 89, 72, -19, 78, 79,
	71, 83, -32, 83, 92, 28, 29, 5, 9, 101,
	101, -38, 53, -56, -55, 83, -6, 50, 94, -46,
	83, 61, -23, 93, 101, 92, 67, 101, 83, 26,
	10, -32, -32, -37, 95, 96, 98, 97, 81, 82,
	69, -54, 73, 64, -37, -37, 101, -37, 101, 101,
	101, 83, 31, 30, 31, 31, 10, -12, -10, 83,
	-10, -50, 6, -37, -38, 94, 82, -27, -28, 101,
	75, 76, 23, 77, -19, 83, -20, 83, 93, 87,
	97, -24, 83, -8, -9, 83, 101, 83, 87, -37,
	-37, -37, -37, -37, -37, 71, 64, 65, 68, 84,
	-6, 102, -37, -17, -16, -37, -10, -9, 83, 83,
	83, 87, 102, 94, 102, -43, 56, 25, -50, -55,
	-37, -50, -29, -6, 15, 101, 101, 101, 101, -46,
	-46, 87, 102, 102, 94, 84, -10, 101, -58, 11,
	12, 13, 71, -37, 101, 102, 61, 102, 94, 102,
	30, -58, 41, 83, 41, -44, 57, -37, 26, -43,
	-33, -34, -35, -36, 80, -46, 102, 21, 102, 102,
	83, 102, 32, -9, -45, 103, 101, 102, -10, -6,
	-16, 84, -37, 83, -14, -15, 101, -14, -37, -11,
	83, 101, -44, -38, -34, 51, -46, 83, -46, -46,
	102, -46, 33, -53, 71, 64, 85, 85, 102, 102,
	102, 102, -57, 94, 26, -17, -10, -42, 54, -27,
	102, -11, -52, 70, 71, 104, 102, -15, 45, 102,
	102, -39, 52, 55, -50, -46, 102, 46, -48, 58,
	-37, -13, -24, 26, 47, -43, 55, 94, -37, -44,
	-47, -20, -24, 94, -49, 59, 60, -20, -49,
}

var yyDef = [...]int16{
	0, -2, 1, 4, 6, 7, 8, 10, 11, 12,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	91, 2, 5, 9, 34, 34, 34, 0, 0, 14,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 89, 84, 85, 0, 87, 0, 92, 3,
	0, 0, 0, 0, 34, 0, 15, 16, 118, 0,
	0, 18, 0, 0, 29, 0, 0, 0, 0, 130,
	0, 0, 90, 86, 0, 93, 94, 149, 97, 0,
	103, 13, 0, 0, 0, 0, 0, 114, 0, 0,
	116, 0, 122, -2, 153, 0, 0, 0, 160, 161,
	0, 60, 61, 62, 63, 64, 0, 66, 67, 68,
	69, 103, 117, 0, 0, 0, 0, 0, 0, 47,
	0, 142, 0, 130, 44, 0, 83, 0, 0, 95,
	150, 0, 98, 0, 0, 0, 35, 0, 0, 0,
	0, 119, 120, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 154, 155, 0, 0, 0, 56,
	0, 22, 0, 0, 0, 0, 0, 0, 48, 52,
	0, 136, 0, 131, 142, 0, 0, 142, 115, 0,
	0, 0, 0, 0, 149, 113, 149, 151, 0, 101,
	0, 0, 104, 0, 71, 0, 0, 0, 30, 166,
	167, 168, 169, 170, 171, 172, 0, 0, 0, 163,
	0, 162, 0, 0, 57, 58, 0, 23, 24, 0,
	26, 30, 0, 0, 0, 138, 0, 0, 136, 45,
	46, -2, 149, 0, 0, 0, 0, 0, 0, 111,
	96, 102, 99, 100, 0, 74, 0, 0, 27, 31,
	32, 33, 173, 156, 0, 157, 0, 70, 0, 21,
	0, 28, 0, 53, 0, 40, 0, 137, 0, 138,
	130, 124, -2, 0, 129, 105, 149, 0, 149, 149,
	0, 149, 0, 72, 79, 0, 0, 19, 0, 0,
	0, 0, 59, 25, 42, 49, 56, 39, 139, 143,
	36, 0, 41, 132, 126, 0, 106, 0, 107, 108,
	109, 110, 0, 77, 80, 0, 0, 0, 20, 158,
	159, 65, 38, 0, 0, 0, 0, 134, 0, 142,
	149, 0, 73, 78, 81, 75, 76, 50, 0, 51,
	37, 140, 0, 0, 0, 112, 17, 0, 136, 0,
	135, 133, 54, 0, 43, 138, 0, 0, 127, 88,
	141, 146, 55, 0, 144, 147, 148, 146, 145,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	101, 102, 97, 95, 94, 96, 99, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 103, 3, 104,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 100,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmts = yyDollar[1].stmts
			setResult(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = []SQLStmt{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmts = append([]SQLStmt{yyDollar[1].stmt}, yyDollar[3].stmts...)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &BeginTransactionStmt{}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &BeginTransactionStmt{}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &CommitStmt{}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &RollbackStmt{}
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.stmt = &CreateDatabaseStmt{ifNotExists: yyDollar[3].boolean, DB: yyDollar[4].id}
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &UseDatabaseStmt{DB: yyDollar[2].id}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &UseDatabaseStmt{DB: yyDollar[3].id}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &UseSnapshotStmt{period: yyDollar[3].period}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			yyVAL.stmt = &CreateTableStmt{ifNotExists: yyDollar[3].boolean, table: yyDollar[4].id, colsSpec: yyDollar[6].colsSpec, pkColNames: yyDollar[10].ids}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &DropTableStmt{table: yyDollar[3].id}
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &CreateIndexStmt{ifNotExists: yyDollar[3].boolean, table: yyDollar[5].id, cols: yyDollar[7].ids}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.stmt = &CreateIndexStmt{unique: true, ifNotExists: yyDollar[4].boolean, table: yyDollar[6].id, cols: yyDollar[8].ids}
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &DropIndexStmt{table: yyDollar[4].id, cols: yyDollar[6].ids}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.stmt = &DropIndexStmt{table: yyDollar[3].id, cols: []string{yyDollar[5].id}}
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &AddColumnStmt{table: yyDollar[3].id, colSpec: yyDollar[6].colSpec}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &RenameTableStmt{oldName: yyDollar[3].id, newName: yyDollar[6].id}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &RenameColumnStmt{table: yyDollar[3].id, oldName: yyDollar[6].id, newName: yyDollar[8].id}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &DropColumnStmt{table: yyDollar[3].id, colName: yyDollar[6].id}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &CreateUserStmt{username: yyDollar[3].id, password: yyDollar[6].str, permission: yyDollar[7].permission}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &AlterUserStmt{username: yyDollar[3].id, password: yyDollar[6].str, permission: yyDollar[7].permission}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &DropUserStmt{username: yyDollar[3].id}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.permission = PermissionReadWrite
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.permission = PermissionReadOnly
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.permission = PermissionReadWrite
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.permission = PermissionAdmin
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ids = []string{yyDollar[1].id}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ids = yyDollar[2].ids
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.stmt = &UpsertIntoStmt{isInsert: true, tableRef: yyDollar[3].tableRef, cols: yyDollar[5].ids, rows: yyDollar[8].rows, onConflict: yyDollar[9].onConflict}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &UpsertIntoStmt{tableRef: yyDollar[3].tableRef, cols: yyDollar[5].ids, rows: yyDollar[8].rows}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &DeleteFromStmt{tableRef: yyDollar[3].tableRef, where: yyDollar[4].exp, indexOn: yyDollar[5].ids, limit: yyDollar[6].exp, offset: yyDollar[7].exp}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &UpdateStmt{tableRef: yyDollar[2].tableRef, updates: yyDollar[4].updates, where: yyDollar[5].exp, indexOn: yyDollar[6].ids, limit: yyDollar[7].exp, offset: yyDollar[8].exp}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.onConflict = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.onConflict = &OnConflictDo{}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updates = []*colUpdate{yyDollar[1].update}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updates = append(yyDollar[1].updates, yyDollar[3].update)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.update = &colUpdate{col: yyDollar[1].id, op: yyDollar[2].cmpOp, val: yyDollar[3].exp}
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.ids = nil
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ids = yyDollar[1].ids
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.rows = []*RowSpec{yyDollar[1].row}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.rows = append(yyDollar[1].rows, yyDollar[3].row)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.row = &RowSpec{Values: yyDollar[2].values}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ids = []string{yyDollar[1].id}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ids = append(yyDollar[1].ids, yyDollar[3].id)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.cols = []*ColSelector{yyDollar[1].col}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.cols = append(yyDollar[1].cols, yyDollar[3].col)
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.values = nil
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.values = yyDollar[1].values
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.values = []ValueExp{yyDollar[1].exp}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].exp)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Integer{val: int64(yyDollar[1].integer)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Float64{val: float64(yyDollar[1].float)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Varchar{val: yyDollar[1].str}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Bool{val: yyDollar[1].boolean}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Blob{val: yyDollar[1].blob}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.value = &Cast{val: yyDollar[3].exp, t: yyDollar[5].sqlType}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = yyDollar[1].value
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Param{id: yyDollar[1].id}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Param{id: fmt.Sprintf("param%d", yyDollar[1].pparam), pos: yyDollar[1].pparam}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &NullValue{t: AnyType}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.value = &FnCall{fn: yyDollar[1].id, params: yyDollar[3].values}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colsSpec = []*ColSpec{yyDollar[1].colSpec}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colsSpec = append(yyDollar[1].colsSpec, yyDollar[3].colSpec)
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.colSpec = &ColSpec{colName: yyDollar[1].id, colType: yyDollar[2].sqlType, maxLen: int(yyDollar[3].integer), notNull: yyDollar[4].boolean, autoIncrement: yyDollar[5].boolean}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.integer = 0
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.stmt = &UnionStmt{
				distinct: yyDollar[3].distinct,
				left:     yyDollar[1].stmt.(DataSource),
				right:    yyDollar[4].stmt.(DataSource),
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "databases"}},
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "tables"}},
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "table", params: []ValueExp{&Varchar{val: yyDollar[3].id}}}},
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "users"}},
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				distinct:  yyDollar[2].distinct,
				selectors: yyDollar[3].sels,
				ds:        yyDollar[5].ds,
				indexOn:   yyDollar[6].ids,
				joins:     yyDollar[7].joins,
				where:     yyDollar[8].exp,
				groupBy:   yyDollar[9].cols,
				having:    yyDollar[10].exp,
				orderBy:   yyDollar[11].ordcols,
				limit:     yyDollar[12].exp,
				offset:    yyDollar[13].exp,
			}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.distinct = true
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.distinct = false
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.distinct = false
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.distinct = true
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sels = nil
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sels = yyDollar[1].sels
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].sel.setAlias(yyDollar[2].id)
			yyVAL.sels = []Selector{yyDollar[1].sel}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[3].sel.setAlias(yyDollar[4].id)
			yyVAL.sels = append(yyDollar[1].sels, yyDollar[3].sel)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sel = yyDollar[1].col
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.sel = &JSONSelector{ColSelector: yyDollar[1].col, fields: yyDollar[2].jsonFields}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.sel = &AggColSelector{aggFn: yyDollar[1].aggFn, col: "*"}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.sel = &AggColSelector{aggFn: yyDollar[1].aggFn, table: yyDollar[3].col.table, col: yyDollar[3].col.col}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.jsonFields = []string{yyDollar[2].str}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.jsonFields = append(yyVAL.jsonFields, yyDollar[3].str)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.col = &ColSelector{col: yyDollar[1].id}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.col = &ColSelector{table: yyDollar[1].id, col: yyDollar[3].id}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].tableRef.period = yyDollar[2].period
			yyDollar[1].tableRef.as = yyDollar[3].id
			yyVAL.ds = yyDollar[1].tableRef
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[2].stmt.(*SelectStmt).as = yyDollar[4].id
			yyVAL.ds = yyDollar[2].stmt.(DataSource)
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "databases"}, as: yyDollar[4].id}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "tables"}, as: yyDollar[4].id}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "table", params: []ValueExp{&Varchar{val: yyDollar[3].id}}}}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "users"}, as: yyDollar[4].id}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: yyDollar[1].value.(*FnCall), as: yyDollar[2].id}
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.ds = &tableRef{table: yyDollar[4].id, history: true, as: yyDollar[6].id}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableRef = &tableRef{table: yyDollar[1].id}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.period = period{start: yyDollar[1].openPeriod, end: yyDollar[2].openPeriod}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.openPeriod = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{inclusive: true, instant: yyDollar[2].periodInstant}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{instant: yyDollar[2].periodInstant}
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.openPeriod = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{inclusive: true, instant: yyDollar[2].periodInstant}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{instant: yyDollar[2].periodInstant}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.periodInstant = periodInstant{instantType: txInstant, exp: yyDollar[2].exp}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.periodInstant = periodInstant{instantType: timeInstant, exp: yyDollar[1].exp}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joins = nil
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joins = yyDollar[1].joins
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joins = []*JoinSpec{yyDollar[1].join}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joins = append([]*JoinSpec{yyDollar[1].join}, yyDollar[2].joins...)
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.join = &JoinSpec{joinType: yyDollar[1].joinType, ds: yyDollar[3].ds, indexOn: yyDollar[4].ids, cond: yyDollar[6].exp}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinType = InnerJoin
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joinType = yyDollar[1].joinType
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.cols = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.cols = yyDollar[3].cols
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.ordcols = nil
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ordcols = yyDollar[3].ordcols
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.ids = nil
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ids = yyDollar[4].ids
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.ordcols = []*OrdCol{{sel: yyDollar[1].sel, descOrder: yyDollar[2].opt_ord}}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ordcols = append(yyDollar[1].ordcols, &OrdCol{sel: yyDollar[3].sel, descOrder: yyDollar[4].opt_ord})
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.opt_ord = false
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.opt_ord = false
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.opt_ord = true
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.id = ""
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.id = yyDollar[1].id
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.id = yyDollar[2].id
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].exp
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].binExp
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = &NotBoolExp{exp: yyDollar[2].exp}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = &NumExp{left: &Integer{val: 0}, op: SUBSOP, right: yyDollar[2].exp}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.exp = &LikeBoolExp{val: yyDollar[1].exp, notLike: yyDollar[2].boolean, pattern: yyDollar[4].exp}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.exp = &ExistsBoolExp{q: (yyDollar[3].stmt).(DataSource)}
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.exp = &InSubQueryExp{val: yyDollar[1].exp, notIn: yyDollar[2].boolean, q: yyDollar[5].stmt.(*SelectStmt)}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.exp = &InListExp{val: yyDollar[1].exp, notIn: yyDollar[2].boolean, values: yyDollar[5].values}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].sel
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].value
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &Cast{val: yyDollar[1].exp, t: yyDollar[3].sqlType}
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: ADDOP, right: yyDollar[3].exp}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: SUBSOP, right: yyDollar[3].exp}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: DIVOP, right: yyDollar[3].exp}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: MULTOP, right: yyDollar[3].exp}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &BinBoolExp{left: yyDollar[1].exp, op: yyDollar[2].logicOp, right: yyDollar[3].exp}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &CmpBoolExp{left: yyDollar[1].exp, op: yyDollar[2].cmpOp, right: yyDollar[3].exp}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &CmpBoolExp{left: yyDollar[1].exp, op: EQ, right: &NullValue{t: AnyType}}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.binExp = &CmpBoolExp{left: yyDollar[1].exp, op: NE, right: &NullValue{t: AnyType}}
		}
	}
	goto yystack /* stack new state and value */
}
