// Code generated by goyacc -l -o sql_parser.go sql_grammar.y. DO NOT EDIT.
package sql

import __yyfmt__ "fmt"

import "fmt"

func setResult(l yyLexer, stmts []SQLStmt) {
	l.(*lexer).result = stmts
}

type yySymType struct {
	yys           int
	stmts         []SQLStmt
	stmt          SQLStmt
	datasource    DataSource
	colsSpec      []*ColSpec
	colSpec       *ColSpec
	cols          []*ColSelector
	rows          []*RowSpec
	row           *RowSpec
	values        []ValueExp
	value         ValueExp
	id            string
	integer       uint64
	float         float64
	str           string
	boolean       bool
	blob          []byte
	sqlType       SQLValueType
	aggFn         AggregateFn
	ids           []string
	col           *ColSelector
	sel           Selector
	sels          []Selector
	distinct      bool
	ds            DataSource
	tableRef      *tableRef
	period        period
	openPeriod    *openPeriod
	periodInstant periodInstant
	joins         []*JoinSpec
	join          *JoinSpec
	joinType      JoinType
	exp           ValueExp
	binExp        ValueExp
	err           error
	ordcols       []*OrdCol
	opt_ord       bool
	logicOp       LogicOperator
	cmpOp         CmpOperator
	pparam        int
	update        *colUpdate
	updates       []*colUpdate
	onConflict    *OnConflictDo
}

const CREATE = 57346
const DROP = 57347
const USE = 57348
const DATABASE = 57349
const SNAPSHOT = 57350
const HISTORY = 57351
const SINCE = 57352
const AFTER = 57353
const BEFORE = 57354
const UNTIL = 57355
const TX = 57356
const OF = 57357
const TIMESTAMP = 57358
const TABLE = 57359
const UNIQUE = 57360
const INDEX = 57361
const ON = 57362
const ALTER = 57363
const ADD = 57364
const RENAME = 57365
const TO = 57366
const COLUMN = 57367
const PRIMARY = 57368
const KEY = 57369
const BEGIN = 57370
const TRANSACTION = 57371
const COMMIT = 57372
const ROLLBACK = 57373
const INSERT = 57374
const UPSERT = 57375
const INTO = 57376
const VALUES = 57377
const DELETE = 57378
const UPDATE = 57379
const SET = 57380
const CONFLICT = 57381
const DO = 57382
const NOTHING = 57383
const SELECT = 57384
const DISTINCT = 57385
const FROM = 57386
const JOIN = 57387
const HAVING = 57388
const WHERE = 57389
const GROUP = 57390
const BY = 57391
const LIMIT = 57392
const OFFSET = 57393
const ORDER = 57394
const ASC = 57395
const DESC = 57396
const AS = 57397
const UNION = 57398
const ALL = 57399
const NOT = 57400
const LIKE = 57401
const IF = 57402
const EXISTS = 57403
const IN = 57404
const IS = 57405
const AUTO_INCREMENT = 57406
const NULL = 57407
const CAST = 57408
const SCAST = 57409
const SHOW = 57410
const DATABASES = 57411
const TABLES = 57412
const USERS = 57413
const NPARAM = 57414
const PPARAM = 57415
const JOINTYPE = 57416
const LOP = 57417
const CMPOP = 57418
const IDENTIFIER = 57419
const TYPE = 57420
const INTEGER = 57421
const FLOAT = 57422
const VARCHAR = 57423
const BOOLEAN = 57424
const BLOB = 57425
const AGGREGATE_FUNC = 57426
const ERROR = 57427
const DOT = 57428
const STMT_SEPARATOR = 57429

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CREATE",
	"DROP",
	"USE",
	"DATABASE",
	"SNAPSHOT",
	"HISTORY",
	"SINCE",
	"AFTER",
	"BEFORE",
	"UNTIL",
	"TX",
	"OF",
	"TIMESTAMP",
	"TABLE",
	"UNIQUE",
	"INDEX",
	"ON",
	"ALTER",
	"ADD",
	"RENAME",
	"TO",
	"COLUMN",
	"PRIMARY",
	"KEY",
	"BEGIN",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"INSERT",
	"UPSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"UPDATE",
	"SET",
	"CONFLICT",
	"DO",
	"NOTHING",
	"SELECT",
	"DISTINCT",
	"FROM",
	"JOIN",
	"HAVING",
	"WHERE",
	"GROUP",
	"BY",
	"LIMIT",
	"OFFSET",
	"ORDER",
	"ASC",
	"DESC",
	"AS",
	"UNION",
	"ALL",
	"NOT",
	"LIKE",
	"IF",
	"EXISTS",
	"IN",
	"IS",
	"AUTO_INCREMENT",
	"NULL",
	"CAST",
	"SCAST",
	"SHOW",
	"DATABASES",
	"TABLES",
	"USERS",
	"NPARAM",
	"PPARAM",
	"JOINTYPE",
	"LOP",
	"CMPOP",
	"IDENTIFIER",
	"TYPE",
	"INTEGER",
	"FLOAT",
	"VARCHAR",
	"BOOLEAN",
	"BLOB",
	"AGGREGATE_FUNC",
	"ERROR",
	"DOT",
	"','",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'.'",
	"STMT_SEPARATOR",
	"'('",
	"')'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 84,
	59, 152,
	62, 152,
	-2, 140,
	-1, 212,
	45, 116,
	-2, 111,
	-1, 246,
	45, 116,
	-2, 113,
}

const yyPrivate = 57344

const yyLast = 424

var yyAct = [...]int16{
	83, 336, 70, 206, 119, 239, 157, 268, 272, 98,
	163, 154, 195, 245, 267, 196, 111, 6, 177, 52,
	114, 89, 20, 307, 204, 166, 167, 168, 259, 233,
	258, 204, 312, 170, 204, 204, 204, 292, 86, 290,
	318, 88, 260, 234, 205, 101, 97, 311, 19, 82,
	165, 273, 99, 100, 308, 302, 293, 102, 291, 92,
	93, 94, 95, 96, 71, 69, 254, 253, 274, 87,
	252, 250, 232, 230, 91, 22, 222, 137, 221, 203,
	269, 229, 116, 130, 226, 146, 123, 141, 142, 135,
	136, 218, 144, 86, 146, 217, 88, 216, 179, 147,
	101, 97, 131, 132, 134, 133, 145, 99, 100, 193,
	143, 125, 102, 159, 92, 93, 94, 95, 96, 71,
	122, 110, 156, 109, 87, 174, 137, 169, 137, 91,
	160, 72, 181, 182, 183, 184, 185, 186, 135, 136,
	171, 248, 335, 296, 173, 329, 194, 197, 112, 295,
	123, 131, 132, 134, 133, 134, 133, 233, 72, 198,
	223, 192, 204, 211, 118, 71, 105, 209, 199, 289,
	212, 67, 72, 288, 219, 264, 220, 255, 86, 71,
	224, 88, 210, 214, 213, 101, 97, 191, 161, 57,
	228, 225, 99, 100, 137, 121, 72, 102, 137, 92,
	93, 94, 95, 96, 71, 155, 280, 136, 241, 87,
	295, 29, 30, 243, 91, 81, 266, 120, 249, 131,
	132, 134, 133, 131, 132, 134, 133, 237, 178, 115,
	197, 231, 202, 201, 265, 200, 178, 180, 261, 137,
	175, 271, 256, 172, 148, 263, 58, 262, 126, 275,
	104, 135, 136, 270, 75, 279, 73, 281, 282, 283,
	277, 276, 38, 59, 131, 132, 134, 133, 56, 51,
	197, 103, 162, 10, 12, 11, 40, 41, 42, 306,
	215, 28, 297, 20, 287, 140, 298, 227, 169, 301,
	13, 286, 305, 303, 139, 128, 129, 7, 137, 8,
	9, 14, 15, 309, 124, 16, 17, 317, 316, 19,
	188, 20, 65, 20, 47, 322, 189, 187, 324, 190,
	74, 39, 46, 240, 327, 321, 330, 337, 338, 207,
	328, 333, 334, 331, 315, 300, 112, 19, 339, 19,
	314, 340, 278, 117, 36, 44, 326, 319, 48, 49,
	164, 310, 63, 238, 236, 35, 34, 23, 284, 150,
	151, 152, 149, 108, 235, 2, 24, 325, 37, 242,
	127, 76, 31, 77, 32, 208, 25, 27, 26, 50,
	106, 107, 33, 251, 158, 60, 61, 62, 45, 80,
	79, 54, 55, 21, 294, 113, 138, 285, 304, 320,
	332, 257, 299, 85, 84, 313, 247, 246, 244, 78,
	53, 64, 43, 68, 66, 90, 323, 153, 176, 18,
	5, 4, 3, 1,
}

var yyPact = [...]int16{
	269, -1000, -1000, -18, -1000, -1000, -1000, 328, -1000, -1000,
	359, 204, 355, 365, 322, 321, 300, 185, 265, 207,
	302, -1000, 269, -1000, 254, 254, 254, 360, -1000, 192,
	381, 191, 169, 186, 185, 185, 185, 314, -1000, 255,
	-1000, -1000, -1000, 81, -1000, -1000, 179, 262, 177, 351,
	254, -1000, -1000, 377, 35, 35, -1000, 173, 80, 358,
	29, 27, 289, 152, 241, -1000, 299, -1000, 77, 140,
	-1000, 26, 64, -1000, 243, 17, 171, 350, -1000, 35,
	35, -1000, 120, 63, 227, -1000, 120, 120, 16, -1000,
	-1000, 120, -1000, -1000, -1000, -1000, -1000, 12, -1000, -1000,
	-1000, -1000, 0, -1000, 5, 167, 337, 335, 336, 128,
	128, 378, 120, 101, -1000, 196, -1000, -44, 95, -1000,
	-1000, 166, 54, 163, -1000, 159, 4, 160, -1000, -1000,
	63, 120, 120, 120, 120, 120, 120, 252, 257, 109,
	-1000, 131, 65, 241, 14, 120, 120, 128, -1000, 159,
	158, 156, 155, -16, 75, -1000, -51, 279, 356, 63,
	378, 152, 120, 378, 381, 271, 3, 1, -3, 140,
	-9, 140, -1000, -17, -19, -1000, 73, -1000, 102, 128,
	-10, 65, 65, 235, 235, 131, 135, -1000, 222, 120,
	-13, -1000, -22, -1000, 176, -23, 70, 63, -52, -1000,
	-1000, 340, -1000, 319, 150, 318, 272, 120, 349, 279,
	-1000, 63, 67, 140, -24, 368, -25, -28, -29, -1000,
	-1000, -1000, -1000, 151, -66, -53, 128, -1000, 131, -20,
	-1000, 97, -1000, 120, -1000, 139, -14, -1000, -14, -1000,
	120, 63, -26, 272, 289, -1000, 67, 297, -1000, -1000,
	140, 129, 140, 140, 140, 331, -1000, 226, 94, 90,
	-1000, -56, -37, -58, -39, 63, -1000, 123, -1000, 120,
	62, 63, -1000, -1000, 128, -1000, 287, -1000, -44, -1000,
	-40, -1000, -1000, -1000, -26, 228, -1000, 214, -74, -41,
	-1000, -1000, -1000, -1000, -1000, -14, 312, -48, -63, 294,
	285, 378, 140, -55, -1000, -1000, -1000, -1000, -1000, -1000,
	307, -1000, -1000, 273, 120, 119, 347, -1000, -1000, 305,
	279, 281, 63, 58, -1000, 120, -1000, 272, 119, 119,
	63, -1000, 55, 274, -1000, 119, -1000, -1000, -1000, 274,
	-1000,
}

var yyPgo = [...]int16{
	0, 423, 365, 422, 421, 420, 17, 419, 418, 18,
	11, 8, 417, 416, 14, 7, 15, 12, 415, 9,
	21, 414, 413, 2, 412, 411, 10, 350, 19, 410,
	409, 215, 408, 13, 407, 406, 0, 16, 405, 404,
	403, 402, 3, 5, 401, 4, 400, 399, 1, 6,
	322, 398, 397, 396, 20, 395, 394, 393,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 57, 57, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 50, 50, 11,
	11, 5, 5, 5, 5, 56, 56, 55, 55, 54,
	12, 12, 14, 14, 15, 10, 10, 13, 13, 17,
	17, 16, 16, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 8, 8, 9, 44, 44, 44,
	51, 51, 52, 52, 52, 6, 6, 6, 6, 6,
	7, 25, 25, 24, 24, 21, 21, 22, 22, 20,
	20, 20, 23, 23, 26, 26, 26, 26, 26, 26,
	26, 27, 28, 29, 29, 29, 30, 30, 30, 31,
	31, 32, 32, 33, 33, 34, 35, 35, 37, 37,
	41, 41, 38, 38, 42, 42, 43, 43, 47, 47,
	49, 49, 46, 46, 48, 48, 48, 45, 45, 45,
	36, 36, 36, 36, 36, 36, 36, 36, 39, 39,
	39, 39, 53, 53, 40, 40, 40, 40, 40, 40,
	40, 40,
}

var yyR2 = [...]int8{
	0, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	1, 1, 1, 4, 2, 3, 3, 11, 3, 8,
	9, 7, 5, 6, 6, 8, 6, 0, 3, 1,
	3, 9, 8, 7, 8, 0, 4, 1, 3, 3,
	0, 1, 1, 3, 3, 1, 3, 1, 3, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 6, 1,
	1, 1, 1, 4, 1, 3, 5, 0, 3, 3,
	0, 1, 0, 1, 2, 1, 4, 2, 2, 2,
	13, 0, 1, 0, 1, 1, 1, 2, 4, 1,
	4, 4, 1, 3, 3, 4, 4, 4, 4, 2,
	6, 1, 2, 0, 2, 2, 0, 2, 2, 2,
	1, 0, 1, 1, 2, 6, 0, 1, 0, 2,
	0, 3, 0, 2, 0, 2, 0, 2, 0, 3,
	0, 4, 2, 4, 0, 1, 1, 0, 1, 2,
	1, 1, 2, 2, 4, 4, 6, 6, 1, 1,
	3, 3, 0, 1, 3, 3, 3, 3, 3, 3,
	3, 4,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, 28, 30, 31,
	4, 6, 5, 21, 32, 33, 36, 37, -7, 68,
	42, -57, 93, 29, 7, 17, 19, 18, 77, 7,
	8, 17, 19, 17, 34, 34, 44, -27, 77, 56,
	69, 70, 71, -24, 43, -2, -50, 60, -50, -50,
	19, 77, -28, -29, 10, 11, 77, 20, 77, 77,
	-27, -27, -27, 38, -25, 57, -21, 90, -22, -20,
	-23, 84, 77, 77, 58, 77, 20, -50, -30, 13,
	12, -31, 14, -36, -39, -40, 58, 89, 61, -20,
	-18, 94, 79, 80, 81, 82, 83, 66, -19, 72,
	73, 65, 77, -31, 77, 86, 22, 23, 5, 94,
	94, -37, 47, -55, -54, 77, -6, 44, 87, -45,
	77, 55, 94, 86, 61, 94, 77, 20, -31, -31,
	-36, 88, 89, 91, 90, 75, 76, 63, -53, 67,
	58, -36, -36, 94, -36, 94, 94, 94, 77, 25,
	24, 25, 25, -12, -10, 77, -10, -49, 6, -36,
	-37, 87, 76, -26, -27, 94, 69, 70, 71, -19,
	77, -20, 77, 90, -23, 77, -8, -9, 77, 94,
	77, -36, -36, -36, -36, -36, -36, 65, 58, 59,
	62, 78, -6, 95, -36, -17, -16, -36, -10, -9,
	77, 77, 77, 95, 87, 95, -42, 50, 19, -49,
	-54, -36, -49, -28, -6, 9, 94, 94, 94, -45,
	-45, 95, 95, 87, 78, -10, 94, 65, -36, 94,
	95, 55, 95, 87, 95, 24, 35, 77, 35, -43,
	51, -36, 20, -42, -32, -33, -34, -35, 74, -45,
	95, 15, 95, 95, 95, 26, -9, -44, 96, 94,
	95, -10, -6, -16, 78, -36, 77, -14, -15, 94,
	-14, -36, -11, 77, 94, -43, -37, -33, 45, -45,
	77, -45, -45, -45, 27, -52, 65, 58, 79, 79,
	95, 95, 95, 95, -56, 87, 20, -17, -10, -41,
	48, -26, 95, -11, -51, 64, 65, 97, 95, -15,
	39, 95, 95, -38, 46, 49, -49, -45, 95, 40,
	-47, 52, -36, -13, -23, 20, 41, -42, 49, 87,
	-36, -43, -46, -23, -23, 87, -48, 53, 54, -23,
	-48,
}

var yyDef = [...]int16{
	0, -2, 1, 4, 6, 7, 8, 10, 11, 12,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	83, 2, 5, 9, 27, 27, 27, 0, 14, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 101, 81,
	77, 78, 79, 0, 84, 3, 0, 0, 0, 0,
	27, 15, 16, 106, 0, 0, 18, 0, 0, 0,
	0, 0, 118, 0, 0, 82, 0, 85, 86, 137,
	89, 0, 92, 13, 0, 0, 0, 0, 102, 0,
	0, 104, 0, 110, -2, 141, 0, 0, 0, 148,
	149, 0, 53, 54, 55, 56, 57, 0, 59, 60,
	61, 62, 92, 105, 0, 0, 0, 0, 0, 40,
	0, 130, 0, 118, 37, 0, 76, 0, 0, 87,
	138, 0, 0, 0, 28, 0, 0, 0, 107, 108,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 142, 143, 0, 0, 0, 49, 0, 22, 0,
	0, 0, 0, 0, 41, 45, 0, 124, 0, 119,
	130, 0, 0, 130, 103, 0, 0, 0, 0, 137,
	101, 137, 139, 0, 0, 93, 0, 64, 0, 0,
	0, 154, 155, 156, 157, 158, 159, 160, 0, 0,
	0, 151, 0, 150, 0, 0, 50, 51, 0, 23,
	24, 0, 26, 0, 0, 0, 126, 0, 0, 124,
	38, 39, -2, 137, 0, 0, 0, 0, 0, 99,
	88, 90, 91, 0, 67, 0, 0, 161, 144, 0,
	145, 0, 63, 0, 21, 0, 0, 46, 0, 33,
	0, 125, 0, 126, 118, 112, -2, 0, 117, 94,
	137, 0, 137, 137, 137, 0, 65, 72, 0, 0,
	19, 0, 0, 0, 0, 52, 25, 35, 42, 49,
	32, 127, 131, 29, 0, 34, 120, 114, 0, 95,
	0, 96, 97, 98, 0, 70, 73, 0, 0, 0,
	20, 146, 147, 58, 31, 0, 0, 0, 0, 122,
	0, 130, 137, 0, 66, 71, 74, 68, 69, 43,
	0, 44, 30, 128, 0, 0, 0, 100, 17, 0,
	124, 0, 123, 121, 47, 0, 36, 126, 0, 0,
	115, 80, 129, 134, 48, 0, 132, 135, 136, 134,
	133,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	94, 95, 90, 88, 87, 89, 92, 91, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 96, 3, 97,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 93,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmts = yyDollar[1].stmts
			setResult(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmts = []SQLStmt{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmts = append([]SQLStmt{yyDollar[1].stmt}, yyDollar[3].stmts...)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &BeginTransactionStmt{}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &BeginTransactionStmt{}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &CommitStmt{}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = &RollbackStmt{}
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.stmt = &CreateDatabaseStmt{ifNotExists: yyDollar[3].boolean, DB: yyDollar[4].id}
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &UseDatabaseStmt{DB: yyDollar[2].id}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &UseDatabaseStmt{DB: yyDollar[3].id}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &UseSnapshotStmt{period: yyDollar[3].period}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			yyVAL.stmt = &CreateTableStmt{ifNotExists: yyDollar[3].boolean, table: yyDollar[4].id, colsSpec: yyDollar[6].colsSpec, pkColNames: yyDollar[10].ids}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.stmt = &DropTableStmt{table: yyDollar[3].id}
		}
	case 19:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &CreateIndexStmt{ifNotExists: yyDollar[3].boolean, table: yyDollar[5].id, cols: yyDollar[7].ids}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.stmt = &CreateIndexStmt{unique: true, ifNotExists: yyDollar[4].boolean, table: yyDollar[6].id, cols: yyDollar[8].ids}
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &DropIndexStmt{table: yyDollar[4].id, cols: yyDollar[6].ids}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.stmt = &DropIndexStmt{table: yyDollar[3].id, cols: []string{yyDollar[5].id}}
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &AddColumnStmt{table: yyDollar[3].id, colSpec: yyDollar[6].colSpec}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &RenameTableStmt{oldName: yyDollar[3].id, newName: yyDollar[6].id}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &RenameColumnStmt{table: yyDollar[3].id, oldName: yyDollar[6].id, newName: yyDollar[8].id}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.stmt = &DropColumnStmt{table: yyDollar[3].id, colName: yyDollar[6].id}
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ids = []string{yyDollar[1].id}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ids = yyDollar[2].ids
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.stmt = &UpsertIntoStmt{isInsert: true, tableRef: yyDollar[3].tableRef, cols: yyDollar[5].ids, rows: yyDollar[8].rows, onConflict: yyDollar[9].onConflict}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &UpsertIntoStmt{tableRef: yyDollar[3].tableRef, cols: yyDollar[5].ids, rows: yyDollar[8].rows}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.stmt = &DeleteFromStmt{tableRef: yyDollar[3].tableRef, where: yyDollar[4].exp, indexOn: yyDollar[5].ids, limit: yyDollar[6].exp, offset: yyDollar[7].exp}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.stmt = &UpdateStmt{tableRef: yyDollar[2].tableRef, updates: yyDollar[4].updates, where: yyDollar[5].exp, indexOn: yyDollar[6].ids, limit: yyDollar[7].exp, offset: yyDollar[8].exp}
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.onConflict = nil
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.onConflict = &OnConflictDo{}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.updates = []*colUpdate{yyDollar[1].update}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.updates = append(yyDollar[1].updates, yyDollar[3].update)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.update = &colUpdate{col: yyDollar[1].id, op: yyDollar[2].cmpOp, val: yyDollar[3].exp}
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.ids = nil
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ids = yyDollar[1].ids
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.rows = []*RowSpec{yyDollar[1].row}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.rows = append(yyDollar[1].rows, yyDollar[3].row)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.row = &RowSpec{Values: yyDollar[2].values}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ids = []string{yyDollar[1].id}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ids = append(yyDollar[1].ids, yyDollar[3].id)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.cols = []*ColSelector{yyDollar[1].col}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.cols = append(yyDollar[1].cols, yyDollar[3].col)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.values = nil
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.values = yyDollar[1].values
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.values = []ValueExp{yyDollar[1].exp}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].exp)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Integer{val: int64(yyDollar[1].integer)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Float64{val: float64(yyDollar[1].float)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Varchar{val: yyDollar[1].str}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Bool{val: yyDollar[1].boolean}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Blob{val: yyDollar[1].blob}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.value = &Cast{val: yyDollar[3].exp, t: yyDollar[5].sqlType}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = yyDollar[1].value
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Param{id: yyDollar[1].id}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &Param{id: fmt.Sprintf("param%d", yyDollar[1].pparam), pos: yyDollar[1].pparam}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.value = &NullValue{t: AnyType}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.value = &FnCall{fn: yyDollar[1].id, params: yyDollar[3].values}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colsSpec = []*ColSpec{yyDollar[1].colSpec}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colsSpec = append(yyDollar[1].colsSpec, yyDollar[3].colSpec)
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.colSpec = &ColSpec{colName: yyDollar[1].id, colType: yyDollar[2].sqlType, maxLen: int(yyDollar[3].integer), notNull: yyDollar[4].boolean, autoIncrement: yyDollar[5].boolean}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.integer = 0
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.stmt = &UnionStmt{
				distinct: yyDollar[3].distinct,
				left:     yyDollar[1].stmt.(DataSource),
				right:    yyDollar[4].stmt.(DataSource),
			}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "databases"}},
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "tables"}},
			}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				ds: &FnDataSourceStmt{fnCall: &FnCall{fn: "users"}},
			}
		}
	case 80:
		yyDollar = yyS[yypt-13 : yypt+1]
		{
			yyVAL.stmt = &SelectStmt{
				distinct:  yyDollar[2].distinct,
				selectors: yyDollar[3].sels,
				ds:        yyDollar[5].ds,
				indexOn:   yyDollar[6].ids,
				joins:     yyDollar[7].joins,
				where:     yyDollar[8].exp,
				groupBy:   yyDollar[9].cols,
				having:    yyDollar[10].exp,
				orderBy:   yyDollar[11].ordcols,
				limit:     yyDollar[12].exp,
				offset:    yyDollar[13].exp,
			}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.distinct = true
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.distinct = false
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.distinct = false
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.distinct = true
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sels = nil
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sels = yyDollar[1].sels
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].sel.setAlias(yyDollar[2].id)
			yyVAL.sels = []Selector{yyDollar[1].sel}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[3].sel.setAlias(yyDollar[4].id)
			yyVAL.sels = append(yyDollar[1].sels, yyDollar[3].sel)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.sel = yyDollar[1].col
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.sel = &AggColSelector{aggFn: yyDollar[1].aggFn, col: "*"}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.sel = &AggColSelector{aggFn: yyDollar[1].aggFn, table: yyDollar[3].col.table, col: yyDollar[3].col.col}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.col = &ColSelector{col: yyDollar[1].id}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.col = &ColSelector{table: yyDollar[1].id, col: yyDollar[3].id}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].tableRef.period = yyDollar[2].period
			yyDollar[1].tableRef.as = yyDollar[3].id
			yyVAL.ds = yyDollar[1].tableRef
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[2].stmt.(*SelectStmt).as = yyDollar[4].id
			yyVAL.ds = yyDollar[2].stmt.(DataSource)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "databases"}, as: yyDollar[4].id}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "tables"}, as: yyDollar[4].id}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: &FnCall{fn: "users"}, as: yyDollar[4].id}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.ds = &FnDataSourceStmt{fnCall: yyDollar[1].value.(*FnCall), as: yyDollar[2].id}
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.ds = &tableRef{table: yyDollar[4].id, history: true, as: yyDollar[6].id}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableRef = &tableRef{table: yyDollar[1].id}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.period = period{start: yyDollar[1].openPeriod, end: yyDollar[2].openPeriod}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.openPeriod = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{inclusive: true, instant: yyDollar[2].periodInstant}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{instant: yyDollar[2].periodInstant}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.openPeriod = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{inclusive: true, instant: yyDollar[2].periodInstant}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.openPeriod = &openPeriod{instant: yyDollar[2].periodInstant}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.periodInstant = periodInstant{instantType: txInstant, exp: yyDollar[2].exp}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.periodInstant = periodInstant{instantType: timeInstant, exp: yyDollar[1].exp}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joins = nil
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joins = yyDollar[1].joins
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joins = []*JoinSpec{yyDollar[1].join}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.joins = append([]*JoinSpec{yyDollar[1].join}, yyDollar[2].joins...)
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.join = &JoinSpec{joinType: yyDollar[1].joinType, ds: yyDollar[3].ds, indexOn: yyDollar[4].ids, cond: yyDollar[6].exp}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.joinType = InnerJoin
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.joinType = yyDollar[1].joinType
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.cols = nil
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.cols = yyDollar[3].cols
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.exp = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.ordcols = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ordcols = yyDollar[3].ordcols
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.ids = nil
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ids = yyDollar[4].ids
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.ordcols = []*OrdCol{{sel: yyDollar[1].col, descOrder: yyDollar[2].opt_ord}}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ordcols = append(yyDollar[1].ordcols, &OrdCol{sel: yyDollar[3].col, descOrder: yyDollar[4].opt_ord})
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.opt_ord = false
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.opt_ord = false
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.opt_ord = true
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.id = ""
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.id = yyDollar[1].id
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.id = yyDollar[2].id
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].exp
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].binExp
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = &NotBoolExp{exp: yyDollar[2].exp}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.exp = &NumExp{left: &Integer{val: 0}, op: SUBSOP, right: yyDollar[2].exp}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.exp = &LikeBoolExp{val: yyDollar[1].exp, notLike: yyDollar[2].boolean, pattern: yyDollar[4].exp}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.exp = &ExistsBoolExp{q: (yyDollar[3].stmt).(DataSource)}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.exp = &InSubQueryExp{val: yyDollar[1].exp, notIn: yyDollar[2].boolean, q: yyDollar[5].stmt.(*SelectStmt)}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.exp = &InListExp{val: yyDollar[1].exp, notIn: yyDollar[2].boolean, values: yyDollar[5].values}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].sel
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.exp = yyDollar[1].value
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = yyDollar[2].exp
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.exp = &Cast{val: yyDollar[1].exp, t: yyDollar[3].sqlType}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolean = false
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolean = true
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: ADDOP, right: yyDollar[3].exp}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: SUBSOP, right: yyDollar[3].exp}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: DIVOP, right: yyDollar[3].exp}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &NumExp{left: yyDollar[1].exp, op: MULTOP, right: yyDollar[3].exp}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &BinBoolExp{left: yyDollar[1].exp, op: yyDollar[2].logicOp, right: yyDollar[3].exp}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &CmpBoolExp{left: yyDollar[1].exp, op: yyDollar[2].cmpOp, right: yyDollar[3].exp}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.binExp = &CmpBoolExp{left: yyDollar[1].exp, op: EQ, right: &NullValue{t: AnyType}}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.binExp = &CmpBoolExp{left: yyDollar[1].exp, op: NE, right: &NullValue{t: AnyType}}
		}
	}
	goto yystack /* stack new state and value */
}
