package tbtree

import (
	"bytes"
	"encoding/json"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
)

func consistencyCheck(t *testing.T, tbtree *TBtree, n node) {
	switch n := n.(type) {
	case *innerNode:
		// All nodes must be within the range of this node
		for _, sub := range n.nodes {
			require.True(t, bytes.Compare(n.minKey(), sub.minKey()) <= 0)
		}

		// All nodes must have sorted non-verlapping ranges
		for i := 1; i < len(n.nodes); i++ {
			require.True(t, bytes.Compare(n.nodes[i-1].minKey(), n.nodes[i].minKey()) < 0)
		}

		// Consistency for child nodes
		for _, sub := range n.nodes {
			consistencyCheck(t, tbtree, sub)
		}

	case *leafNode:
		// All values must be within the range of this node
		for _, v := range n.values {
			require.True(t, bytes.Compare(n.minKey(), v.key) <= 0)
		}

		// All values must be sorted by keys
		for i := 1; i < len(n.values); i++ {
			require.True(t, bytes.Compare(n.values[i-1].key, n.values[i].key) < 0)
		}

	case *nodeRef:
		// check if reference is consistent with the node
		sub, err := tbtree.nodeAt(n.off, true)
		require.NoError(t, err)
		require.True(t, bytes.Equal(n._minKey, sub.minKey()))

		consistencyCheck(t, tbtree, sub)

	default:
		require.Fail(t, "unknown node type")
	}
}

func TestConsistencyFailure(t *testing.T) {

	dataset := []string{
		`[{"K":"AkNUTC5EQVRBQkFTRS4AAAAB","V":"AAAACgEAAAAAAAAAmKw+rNqZUNaZOr1kBNPS74JCKQ2US/6sA8G3QTmDMiEAAAAA"}]`,
		`[{"K":"AGttZDp2Y24uZGVtby5iNDAzNDIzYzYyNWUyMzA3ODhkOGZmYzBkNTVlN2RhYTdmNjU0ZDU2ZTEwZjA1NDVjZTZiMmVkNWNjNTM4MTI5","V":"AAAAwwEAAAAAAAAKgKSu85ddamKe4wtau/U03ail/ti4c09Zz/ausId1UYEAAAAA"},
		  {"K":"AHZjbi5kZW1vLmI0MDM0MjNjNjI1ZTIzMDc4OGQ4ZmZjMGQ1NWU3ZGFhN2Y2NTRkNTZlMTBmMDU0NWNlNmIyZWQ1Y2M1MzgxMjk=","V":"AAABAgEAAAAAAADN1tHauhzewtb6s+/13U4LJq2Jp2KcyHmB80MKyoQC6BQAAAAA"},
		  {"K":"AF9JVEVNLklOU0VSVElPTi1EQVRFLhbFiWfkuRZ6","V":"AAAAEAEAAAAAAAHPZYDfYL/AWu898rrPxsThBlMSQwUcPiA4IGbLZI3zt2oAAAAA"},
		  {"K":"AQAAAAAAAABAYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOUO2xYln5LkWAAAAAAAAAEoAdmNuLmRlbW8uYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOQAAAAAAAAAC","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABbX0lOREVYLklURU0uSU5TRVJUSU9OLURBVEUuYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOUO2xYln5LkWAAAAAAAAAEoAdmNuLmRlbW8uYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOQAAAAAAAAAC","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABJdmNuLmRlbW8uYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOUO2xYln5LkWAAAAAAAAAEoAdmNuLmRlbW8uYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOQAAAAAAAAAC","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkFQSS1LRVkuYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOQ==","V":"AAAABQEAAAAAAAHf8Neff7t52x3vQgBpyzVHQTuoQLBI8YWiaTPZ5GPI9ZoAAAAA"},
		  {"K":"AQAAAAAAAABDX0lURU0uQVBJLUtFWS1GVUxMLmRlbW8uckJPbXFPam1zMzVZUFBoaE1abENrdnF6UkZJanhhYy1PMGg0R2dsNkRqY0O2xYln5LkWAAAAAAAAAEoAdmNuLmRlbW8uYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOQAAAAAAAAAC","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAAAcZ2l0aHViLmNvbS9jb2Rlbm90YXJ5L2ltbXVkYgAAAAAAAAAAAAAAAAAAAEoAdmNuLmRlbW8uYjQwMzQyM2M2MjVlMjMwNzg4ZDhmZmMwZDU1ZTdkYWE3ZjY1NGQ1NmUxMGYwNTQ1Y2U2YjJlZDVjYzUzODEyOQAAAAAAAAAA","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkxFREdFUi1OQU1FLnZjbi5kZW1vLmI0MDM0MjNjNjI1ZTIzMDc4OGQ4ZmZjMGQ1NWU3ZGFhN2Y2NTRkNTZlMTBmMDU0NWNlNmIyZWQ1Y2M1MzgxMjk=","V":"AAAADAEAAAAAAAHk8HpkwEmpRXStn2PtPpvaG5L3vSc9FFmYLNIVcPnWG2YAAAAA"}]`,
		`[{"K":"AGttZDp2Y24uZGVtby4zZDJkM2Q4YWEwNWY5MDM1ZjZjOWIzNzhkN2ZhN2ZiYjNlMDRhZGQ0NzM1Njc0M2YyMzc4OGI3Y2EyZDc4MTYw","V":"AAAAwwEAAAAAAAHwgKSu85ddamKe4wtau/U03ail/ti4c09Zz/ausId1UYEAAAAA"},
		  {"K":"AHZjbi5kZW1vLjNkMmQzZDhhYTA1ZjkwMzVmNmM5YjM3OGQ3ZmE3ZmJiM2UwNGFkZDQ3MzU2NzQzZjIzNzg4YjdjYTJkNzgxNjA=","V":"AAABBgEAAAAAAAKzAUzqzPAwyduD2gFty/hdWdWJxxC9ddFDBQGNz0lha00AAAAA"},
		  {"K":"AF9JVEVNLklOU0VSVElPTi1EQVRFLhbFiWfmq+LO","V":"AAAAEAEAAAAAAAO5Qz99OohSnocbVG0Jn1fGI2UJI8wLeThvjci/7A4dEsIAAAAA"},
		  {"K":"AQAAAAAAAABAM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MEO2xYln5qvjAAAAAAAAAEoAdmNuLmRlbW8uM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MAAAAAAAAAAD","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABbX0lOREVYLklURU0uSU5TRVJUSU9OLURBVEUuM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MEO2xYln5qvjAAAAAAAAAEoAdmNuLmRlbW8uM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MAAAAAAAAAAD","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABJdmNuLmRlbW8uM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MEO2xYln5qvjAAAAAAAAAEoAdmNuLmRlbW8uM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MAAAAAAAAAAD","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkFQSS1LRVkuM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MA==","V":"AAAABQEAAAAAAAPJ8Neff7t52x3vQgBpyzVHQTuoQLBI8YWiaTPZ5GPI9ZoAAAAA"},
		  {"K":"AQAAAAAAAABDX0lURU0uQVBJLUtFWS1GVUxMLmRlbW8uckJPbXFPam1zMzVZUFBoaE1abENrdnF6UkZJanhhYy1PMGg0R2dsNkRqY0O2xYln5qvjAAAAAAAAAEoAdmNuLmRlbW8uM2QyZDNkOGFhMDVmOTAzNWY2YzliMzc4ZDdmYTdmYmIzZTA0YWRkNDczNTY3NDNmMjM3ODhiN2NhMmQ3ODE2MAAAAAAAAAAD","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAAAgZ2l0aHViLmNvbS9kb2NrZXIvZ28tY29ubmVjdGlvbnMAAAAAAAAAAAAAAAAAAABKAHZjbi5kZW1vLjNkMmQzZDhhYTA1ZjkwMzVmNmM5YjM3OGQ3ZmE3ZmJiM2UwNGFkZDQ3MzU2NzQzZjIzNzg4YjdjYTJkNzgxNjAAAAAAAAAAAA==","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkxFREdFUi1OQU1FLnZjbi5kZW1vLjNkMmQzZDhhYTA1ZjkwMzVmNmM5YjM3OGQ3ZmE3ZmJiM2UwNGFkZDQ3MzU2NzQzZjIzNzg4YjdjYTJkNzgxNjA=","V":"AAAADAEAAAAAAAPO8HpkwEmpRXStn2PtPpvaG5L3vSc9FFmYLNIVcPnWG2YAAAAA"}]`,
		`[{"K":"AGttZDp2Y24uZGVtby5jN2IzYjA3YTZmMmUwYjA5YzJmZjAyMjUyMmNmZjEyZTU4Y2IyZjY2ZTc2YzQ5NDc5Mjg5ZjgzYjU0OWJkMGEx","V":"AAAAwwEAAAAAAAPagKSu85ddamKe4wtau/U03ail/ti4c09Zz/ausId1UYEAAAAA"},
		  {"K":"AHZjbi5kZW1vLmM3YjNiMDdhNmYyZTBiMDljMmZmMDIyNTIyY2ZmMTJlNThjYjJmNjZlNzZjNDk0NzkyODlmODNiNTQ5YmQwYTE=","V":"AAAA/gEAAAAAAASd6IM9NeaVPp+8zqYJRByNtS7mOy6b0FlUu3l4XRXxnqEAAAAA"},
		  {"K":"AF9JVEVNLklOU0VSVElPTi1EQVRFLhbFiWfoqPxK","V":"AAAAEAEAAAAAAAWbu5gmphoDTne4y4O6aoKT03KmqqqZQqOhP00SrhHQD50AAAAA"},
		  {"K":"AQAAAAAAAABAYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMUO2xYln6Kj8AAAAAAAAAEoAdmNuLmRlbW8uYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMQAAAAAAAAAE","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABbX0lOREVYLklURU0uSU5TRVJUSU9OLURBVEUuYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMUO2xYln6Kj8AAAAAAAAAEoAdmNuLmRlbW8uYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMQAAAAAAAAAE","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABJdmNuLmRlbW8uYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMUO2xYln6Kj8AAAAAAAAAEoAdmNuLmRlbW8uYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMQAAAAAAAAAE","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkFQSS1LRVkuYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMQ==","V":"AAAABQEAAAAAAAWr8Neff7t52x3vQgBpyzVHQTuoQLBI8YWiaTPZ5GPI9ZoAAAAA"},
		  {"K":"AQAAAAAAAABDX0lURU0uQVBJLUtFWS1GVUxMLmRlbW8uckJPbXFPam1zMzVZUFBoaE1abENrdnF6UkZJanhhYy1PMGg0R2dsNkRqY0O2xYln6Kj8AAAAAAAAAEoAdmNuLmRlbW8uYzdiM2IwN2E2ZjJlMGIwOWMyZmYwMjI1MjJjZmYxMmU1OGNiMmY2NmU3NmM0OTQ3OTI4OWY4M2I1NDliZDBhMQAAAAAAAAAE","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAAAYZ2l0aHViLmNvbS9kb2NrZXIvZG9ja2VyAAAAAAAAAAAAAAAAAAAASgB2Y24uZGVtby5jN2IzYjA3YTZmMmUwYjA5YzJmZjAyMjUyMmNmZjEyZTU4Y2IyZjY2ZTc2YzQ5NDc5Mjg5ZjgzYjU0OWJkMGExAAAAAAAAAAA=","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkxFREdFUi1OQU1FLnZjbi5kZW1vLmM3YjNiMDdhNmYyZTBiMDljMmZmMDIyNTIyY2ZmMTJlNThjYjJmNjZlNzZjNDk0NzkyODlmODNiNTQ5YmQwYTE=","V":"AAAADAEAAAAAAAWw8HpkwEmpRXStn2PtPpvaG5L3vSc9FFmYLNIVcPnWG2YAAAAA"}]`,
		`[{"K":"AGttZDp2Y24uZGVtby5mNzE4MmViNGNmOTE2NDVjNWVmM2VjYzU4MTQyYWRlNzRmYmNmZGI3N2I1YTZlNmIzZjc2YWZlN2M4YTZiZmM5","V":"AAAAwwEAAAAAAAW8gKSu85ddamKe4wtau/U03ail/ti4c09Zz/ausId1UYEAAAAA"},
		  {"K":"AHZjbi5kZW1vLmY3MTgyZWI0Y2Y5MTY0NWM1ZWYzZWNjNTgxNDJhZGU3NGZiY2ZkYjc3YjVhNmU2YjNmNzZhZmU3YzhhNmJmYzk=","V":"AAABBAEAAAAAAAZ/bpClOUi+YWwQ8pnC4BS39Mn4VAVy0pbLiWMj1AIP/T8AAAAA"},
		  {"K":"AF9JVEVNLklOU0VSVElPTi1EQVRFLhbFiWfqsJRO","V":"AAAAEAEAAAAAAAeDxh3Ja+ECHcmdYXCyw81rrKoFv8cAJF6NiyI9MpCRCoMAAAAA"},
		  {"K":"AQAAAAAAAABAZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOUO2xYln6rCUAAAAAAAAAEoAdmNuLmRlbW8uZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOQAAAAAAAAAF","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABbX0lOREVYLklURU0uSU5TRVJUSU9OLURBVEUuZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOUO2xYln6rCUAAAAAAAAAEoAdmNuLmRlbW8uZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOQAAAAAAAAAF","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABJdmNuLmRlbW8uZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOUO2xYln6rCUAAAAAAAAAEoAdmNuLmRlbW8uZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOQAAAAAAAAAF","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkFQSS1LRVkuZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOQ==","V":"AAAABQEAAAAAAAeT8Neff7t52x3vQgBpyzVHQTuoQLBI8YWiaTPZ5GPI9ZoAAAAA"},
		  {"K":"AQAAAAAAAABDX0lURU0uQVBJLUtFWS1GVUxMLmRlbW8uckJPbXFPam1zMzVZUFBoaE1abENrdnF6UkZJanhhYy1PMGg0R2dsNkRqY0O2xYln6rCUAAAAAAAAAEoAdmNuLmRlbW8uZjcxODJlYjRjZjkxNjQ1YzVlZjNlY2M1ODE0MmFkZTc0ZmJjZmRiNzdiNWE2ZTZiM2Y3NmFmZTdjOGE2YmZjOQAAAAAAAAAF","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAAAeZ2l0aHViLmNvbS9kb2NrZXIvZGlzdHJpYnV0aW9uAAAAAAAAAAAAAAAAAAAASgB2Y24uZGVtby5mNzE4MmViNGNmOTE2NDVjNWVmM2VjYzU4MTQyYWRlNzRmYmNmZGI3N2I1YTZlNmIzZjc2YWZlN2M4YTZiZmM5AAAAAAAAAAA=","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkxFREdFUi1OQU1FLnZjbi5kZW1vLmY3MTgyZWI0Y2Y5MTY0NWM1ZWYzZWNjNTgxNDJhZGU3NGZiY2ZkYjc3YjVhNmU2YjNmNzZhZmU3YzhhNmJmYzk=","V":"AAAADAEAAAAAAAeY8HpkwEmpRXStn2PtPpvaG5L3vSc9FFmYLNIVcPnWG2YAAAAA"}]`,
		`[{"K":"AGttZDp2Y24uZGVtby4wYTYyOGRhNWY1MmQ4NDZlNDhlNjA2NDUxMGJjODU5MGVjYzZmNjM2NTBlZjgzZjRjYjc3MWEyYzA1MTRkY2Zl","V":"AAAAwwEAAAAAAAekgKSu85ddamKe4wtau/U03ail/ti4c09Zz/ausId1UYEAAAAA"},
		  {"K":"AHZjbi5kZW1vLjBhNjI4ZGE1ZjUyZDg0NmU0OGU2MDY0NTEwYmM4NTkwZWNjNmY2MzY1MGVmODNmNGNiNzcxYTJjMDUxNGRjZmU=","V":"AAABAAEAAAAAAAhn6SaKEwL5NZnH6J5CAqI3vYZGhBOxrvvXUah3h8KgfdUAAAAA"},
		  {"K":"AF9JVEVNLklOU0VSVElPTi1EQVRFLhbFiWfsxGYs","V":"AAAAEAEAAAAAAAlnopZEIk8LSBOHvsx/1RDdRw778wFJl4/FwTUNYmCqRAwAAAAA"},
		  {"K":"AQAAAAAAAABAMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZUO2xYln7MRmAAAAAAAAAEoAdmNuLmRlbW8uMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZQAAAAAAAAAG","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABbX0lOREVYLklURU0uSU5TRVJUSU9OLURBVEUuMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZUO2xYln7MRmAAAAAAAAAEoAdmNuLmRlbW8uMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZQAAAAAAAAAG","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAABJdmNuLmRlbW8uMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZUO2xYln7MRmAAAAAAAAAEoAdmNuLmRlbW8uMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZQAAAAAAAAAG","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkFQSS1LRVkuMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZQ==","V":"AAAABQEAAAAAAAl38Neff7t52x3vQgBpyzVHQTuoQLBI8YWiaTPZ5GPI9ZoAAAAA"},
		  {"K":"AQAAAAAAAABDX0lURU0uQVBJLUtFWS1GVUxMLmRlbW8uckJPbXFPam1zMzVZUFBoaE1abENrdnF6UkZJanhhYy1PMGg0R2dsNkRqY0O2xYln7MRmAAAAAAAAAEoAdmNuLmRlbW8uMGE2MjhkYTVmNTJkODQ2ZTQ4ZTYwNjQ1MTBiYzg1OTBlY2M2ZjYzNjUwZWY4M2Y0Y2I3NzFhMmMwNTE0ZGNmZQAAAAAAAAAG","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AQAAAAAAAAAaZ2l0aHViLmNvbS9kb2NrZXIvZ28tdW5pdHMAAAAAAAAAAAAAAAAAAABKAHZjbi5kZW1vLjBhNjI4ZGE1ZjUyZDg0NmU0OGU2MDY0NTEwYmM4NTkwZWNjNmY2MzY1MGVmODNmNGNiNzcxYTJjMDUxNGRjZmUAAAAAAAAAAA==","V":"AAAAAAAAAAAAAAAA47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFUAAAAA"},
		  {"K":"AF9JVEVNLkxFREdFUi1OQU1FLnZjbi5kZW1vLjBhNjI4ZGE1ZjUyZDg0NmU0OGU2MDY0NTEwYmM4NTkwZWNjNmY2MzY1MGVmODNmNGNiNzcxYTJjMDUxNGRjZmU=","V":"AAAADAEAAAAAAAl88HpkwEmpRXStn2PtPpvaG5L3vSc9FFmYLNIVcPnWG2YAAAAA"}]`,
	}

	t.Run("no flush", func(t *testing.T) {
		tbtree, err := Open("test_tree_consistency_error_no_flush", DefaultOptions())
		require.NoError(t, err)
		defer os.RemoveAll("test_tree_consistency_error_no_flush")
		defer tbtree.Close()

		for _, d := range dataset {
			kvs := []*KV{}
			require.NoError(t, json.Unmarshal([]byte(d), &kvs))

			for _, kv := range kvs {
				err := tbtree.BulkInsert([]*KV{kv})
				require.NoError(t, err)

				consistencyCheck(t, tbtree, tbtree.root)
			}
		}
	})

	t.Run("with flush", func(t *testing.T) {
		tbtree, err := Open("test_tree_consistency_error_with_flush", DefaultOptions())
		require.NoError(t, err)
		defer os.RemoveAll("test_tree_consistency_error_with_flush")
		defer tbtree.Close()

		for _, d := range dataset {
			kvs := []*KV{}
			require.NoError(t, json.Unmarshal([]byte(d), &kvs))

			for _, kv := range kvs {
				tbtree.Flush()
				err := tbtree.BulkInsert([]*KV{kv})
				require.NoError(t, err)

				consistencyCheck(t, tbtree, tbtree.root)
			}
		}
	})
}
