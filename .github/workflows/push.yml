name: pushCI

on:
  push:
    branches: master
    tags: 'v*'

jobs:
  install_vcn:
    name: Install VCN
    runs-on: ubuntu-latest
    steps:
      - run: |
          sudo apt update && sudo apt install curl -y
          curl -L -o /tmp/vcn -H "Accept: application/octet-stream" -H "Authorization: token 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" https://api.github.com/repos/codenotary/vcn-enterprise/releases/assets/55117082
          CHECKSUM=$(sha256sum /tmp/vcn | cut -d " " -f 1)
          echo $CHECKSUM
          curl -s https://api.codenotary.io/authenticate/$CHECKSUM?org=vchain.us | grep -q :0
      - name: Upload vcn
        uses: actions/upload-artifact@v2
        with:
          name: vcn
          path: /tmp/vcn
  gosec:
    needs: install_vcn
    runs-on: ubuntu-latest
    env:
      JOB_NAME: ${{ github.job }}
      JOB_ID: ${{ github.run_id }}
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - uses: actions/checkout@v1
      - name: Download vcn
        uses: actions/download-artifact@v2
        with:
          name: vcn
      - run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sudo sh -s -- -b $GOPATH/bin latest
          gosec -fmt=json -out=results-$JOB_ID.json -no-fail ./...
          chmod +x ./vcn
          VCN_USER=${{ secrets.VCN_GOSEC_USER }} VCN_PASSWORD=${{ secrets.VCN_GOSEC_PASS }} ./vcn login
          VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_GOSEC_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --attr  --silent results-$JOB_ID.json
          ./vcn logout

  binaries:
      name: Build and notarize binaries
      needs: gosec
      runs-on: ubuntu-latest
      env:
        JOB_NAME: ${{ github.job }}
        JOB_ID: ${{ github.run_id }}
      steps:
        - uses: actions/setup-go@v1
          with:
            go-version: 1.13
        - uses: actions/checkout@v1
        - name: Download vcn
          uses: actions/download-artifact@v2
          with:
            name: vcn
        - run: |
            GOOS=linux GOARCH=amd64 make immudb-static immuadmin-static immuclient-static
            chmod +x ./vcn
            VCN_USER=${{ secrets.VCN_BUILD_USER }} VCN_PASSWORD=${{ secrets.VCN_BUILD_PASS }} ./vcn login
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_BUILD_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent immudb
            sleep $[ ( $RANDOM % 10 ) + 1 ]s
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_BUILD_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent immuadmin
            sleep $[ ( $RANDOM % 10 ) + 1 ]s
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_BUILD_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent immuclient
            ./vcn logout

  images:
      name: Build and notarize Docker Images
      needs: gosec
      runs-on: ubuntu-latest
      env:
        JOB_NAME: ${{ github.job }}
        JOB_ID: ${{ github.run_id }}
        DOCKER_IMAGE_IMMUDB: "codenotary/immudb"
        DOCKER_IMAGE_IMMUADMIN: "codenotary/immuadmin"
        DOCKER_IMAGE_IMMUCLIENT: "codenotary/immuclient"
        DOCKER_BUILDKIT: "1"
        DEBIAN_VERSION: bullseye-slim
        ALMA_VERSION: almalinux-8-minimal
      steps:
        - uses: actions/setup-go@v1
          with:
            go-version: 1.13
        - uses: actions/checkout@v1
        - name: Download vcn
          uses: actions/download-artifact@v2
          with:
            name: vcn
        - name: Build and notarize docker images
          shell: bash
          run: |
            if [[ "${GITHUB_REF}" =~ refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              VERSION_TAG="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
              VERSION_TAG_SHORT="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            fi

            docker build --tag "${DOCKER_IMAGE_IMMUDB}:dev" --target scratch -f Dockerfile .
            docker build --tag "${DOCKER_IMAGE_IMMUDB}:dev-${DEBIAN_VERSION}" --target ${DEBIAN_VERSION} -f Dockerfile .
            docker build --tag "${DOCKER_IMAGE_IMMUDB}:dev-${ALMA_VERSION}" -f Dockerfile.alma .
            docker build --tag "${DOCKER_IMAGE_IMMUADMIN}:dev" -f Dockerfile.immuadmin .
            docker build --tag "${DOCKER_IMAGE_IMMUCLIENT}:dev" -f Dockerfile.immuclient .

            docker login -u "${{ secrets.REGISTRY_USER }}" -p "${{ secrets.REGISTRY_PASS }}"
            
            docker push "${DOCKER_IMAGE_IMMUDB}:dev"
            docker push "${DOCKER_IMAGE_IMMUDB}:dev-${DEBIAN_VERSION}"
            docker push "${DOCKER_IMAGE_IMMUDB}:dev-${ALMA_VERSION}"
            docker push "${DOCKER_IMAGE_IMMUADMIN}:dev"
            docker push "${DOCKER_IMAGE_IMMUCLIENT}:dev"

            if [[ ! -z "$VERSION_TAG" ]]; then
              for tag in "${VERSION_TAG}" "${VERSION_TAG_SHORT}" "latest"; do
                docker tag "${DOCKER_IMAGE_IMMUDB}:dev" "${DOCKER_IMAGE_IMMUDB}:${tag}"
                docker push "${DOCKER_IMAGE_IMMUDB}:${tag}"

                docker tag "${DOCKER_IMAGE_IMMUDB}:dev-${DEBIAN_VERSION}" "${DOCKER_IMAGE_IMMUDB}:${tag}-${DEBIAN_VERSION}"
                docker push "${DOCKER_IMAGE_IMMUDB}:${tag}-${DEBIAN_VERSION}"

                docker tag "${DOCKER_IMAGE_IMMUDB}:dev-${ALMA_VERSION}" "${DOCKER_IMAGE_IMMUDB}:${tag}-${ALMA_VERSION}"
                docker push "${DOCKER_IMAGE_IMMUDB}:${tag}-${ALMA_VERSION}"

                docker tag "${DOCKER_IMAGE_IMMUADMIN}:dev" "${DOCKER_IMAGE_IMMUADMIN}:${tag}"
                docker push "${DOCKER_IMAGE_IMMUADMIN}:${tag}"

                docker tag "${DOCKER_IMAGE_IMMUCLIENT}:dev" "${DOCKER_IMAGE_IMMUCLIENT}:${tag}"
                docker push "${DOCKER_IMAGE_IMMUCLIENT}:${tag}"
              done
            fi

            docker logout
            
            chmod +x ./vcn
            VCN_USER=${{ secrets.VCN_IMAGE_USER }} VCN_PASSWORD=${{ secrets.VCN_IMAGE_PASS }} ./vcn login
            
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_IMAGE_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent docker://$DOCKER_IMAGE_IMMUDB:dev
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_IMAGE_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent docker://$DOCKER_IMAGE_IMMUDB:dev-${DEBIAN_VERSION}
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_IMAGE_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent docker://$DOCKER_IMAGE_IMMUDB:dev-${ALMA_VERSION}
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_IMAGE_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent docker://$DOCKER_IMAGE_IMMUADMIN:dev
            VCN_NOTARIZATION_PASSWORD=${{ secrets.VCN_IMAGE_PASS }} ./vcn n -p --attr GHJobName=$JOB_NAME --attr GHJobNo=$JOB_ID --silent docker://$DOCKER_IMAGE_IMMUCLIENT:dev
            
            ./vcn logout
            
  coveralls:
    name: Publish coverage
    needs: gosec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - uses: actions/checkout@v1
      - run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          go get golang.org/x/tools/cmd/cover
          go get -u github.com/mattn/goveralls
          go get -u github.com/ory/go-acc
          set -o pipefail
          go-acc ./... --covermode=atomic --ignore test,immuclient,immuadmin,helper,cmdtest,sservice,version || true
          cat coverage.txt | grep -v "schema.pb" | grep -v "immuclient" | grep -v "immuadmin" | grep -v "helper" | grep -v "cmdtest" | grep -v "sservice" | grep -v "version" > coverage.out
          goveralls -coverprofile=coverage.out -service=gh-ci -repotoken ${{ secrets.COVERALLS_TOKEN }}
      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
