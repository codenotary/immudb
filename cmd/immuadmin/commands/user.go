/*
Copyright 2019-2020 vChain, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package commands

import (
	"bytes"
	"context"
	"errors"
	"fmt"

	c "github.com/codenotary/immudb/cmd"
	"github.com/spf13/cobra"
)

func (cl *commandline) user(cmd *cobra.Command) {
	ccmd := &cobra.Command{
		Use:   "user username",
		Short: "Perform various user operations: create, delete, change password",
		Long: `Flags: --create, --delete, --password
Examples:
  - Create a new user 'username' (password will be generated by the server):
    ./immuadmin user username --create
  - Delete user 'username':
    ./immuadmin user username --delete
  - Change password for user 'username' (you will be prompted to confirm the old and the new passwords):
    ./immuadmin user username --password`,
		Aliases:           []string{"u"},
		PersistentPreRunE: cl.connect,
		PersistentPostRun: cl.disconnect,
		RunE: func(cmd *cobra.Command, args []string) error {
			create, err := cmd.Flags().GetBool("create")
			if err != nil {
				c.QuitToStdErr(err)
			}
			delete, err := cmd.Flags().GetBool("delete")
			if err != nil {
				c.QuitToStdErr(err)
			}
			changePass, err := cmd.Flags().GetBool("password")
			if err != nil {
				c.QuitToStdErr(err)
			}
			username := []byte(args[0])
			ctx := context.Background()
			switch {
			case create:
				response, err := cl.immuClient.CreateUser(ctx, username)
				if err != nil {
					c.QuitWithUserError(err)
				}
				fmt.Printf(
					"User %s created with password %s\n",
					string(response.User),
					string(response.Password),
				)
				return nil
			case delete:
				if err := cl.immuClient.DeleteUser(ctx, username); err != nil {
					c.QuitWithUserError(err)
				}
				fmt.Printf("User %s has been deleted\n", string(username))
				return nil
			case changePass:
				oldPass, err := cl.passwordReader.Read("Old password:")
				if err != nil {
					c.QuitWithUserError(err)
				}
				pass, err := cl.passwordReader.Read("New password:")
				if err != nil {
					c.QuitWithUserError(err)
				}
				pass2, err := cl.passwordReader.Read("Confirm new password:")
				if err != nil {
					c.QuitWithUserError(err)
				}
				if !bytes.Equal(pass, pass2) {
					c.QuitWithUserError(errors.New("Passwords don't match"))
				}
				if bytes.Equal(pass, oldPass) {
					c.QuitWithUserError(errors.New("New password is the same as than the old one"))
				}
				if err = cl.immuClient.ChangePassword(ctx, username, oldPass, pass); err != nil {
					c.QuitWithUserError(err)
				}
				fmt.Printf("Password changed for user %s\n", string(username))
				return nil
			}
			c.QuitWithUserError(errors.New("Please specify one of the following flags: --create or --delete or --password"))
			return nil
		},
		Args: cobra.ExactArgs(1),
	}
	ccmd.Flags().Bool("create", false, "create user")
	ccmd.Flags().Bool("delete", false, "delete user")
	ccmd.Flags().Bool("password", false, "change user password")
	cmd.AddCommand(ccmd)
}
