package main

import (
	"github.com/codenotary/immudb/v2/pkg/api/schema"
)

var (
	stateQueryResult = &schema.ImmutableState{
		Db:   "defaultdb",
		TxId: 2,
		TxHash: []byte{
			0xBE, 0x6E, 0xD4, 0xBA, 0xA7, 0xE7, 0xB2, 0x7B, 0xD4, 0x19, 0xFE, 0xA6, 0xD5, 0xBF, 0x52, 0xBF,
			0x76, 0xAA, 0x9A, 0x64, 0xF7, 0xC6, 0xDC, 0xD6, 0xEB, 0x4E, 0x62, 0x52, 0xFC, 0x67, 0x51, 0x95,
		},
	}

	verifiableTxById_2_2 = &schema.VerifiableTx{
		Tx: &schema.Tx{
			Header: &schema.TxHeader{
				Id: 2,
				PrevAlh: []byte{
					0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
					0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x11, 0x1D, 0xAE, 0xBD, 0x4D, 0xF4, 0x7C, 0x54, 0x37, 0xFA, 0x1B, 0x08, 0x35, 0x59, 0x47, 0xD5,
					0x90, 0xA7, 0x18, 0x39, 0x9F, 0x87, 0x40, 0x14, 0xCA, 0x93, 0x0A, 0x49, 0xD4, 0x46, 0x99, 0xA6,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			Entries: []*schema.TxEntry{
				{
					Key: []byte{
						0x00, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x2D, 0x6B, 0x65, 0x79, 0x2D, 0x30,
					},
					HValue: []byte{
						0x94, 0x1E, 0xB6, 0x5D, 0xD1, 0x72, 0xC2, 0x95, 0xFF, 0x50, 0x83, 0xCD, 0x69, 0xE7, 0x6B, 0x00,
						0x1D, 0x50, 0x67, 0x18, 0x71, 0x0F, 0x51, 0xFA, 0x83, 0x26, 0xE6, 0xDC, 0x23, 0x6B, 0x7F, 0xF6,
					},
					VLen: 14,
				},
			},
		},
		DualProof: &schema.DualProof{
			SourceTxHeader: &schema.TxHeader{
				Id: 2,
				PrevAlh: []byte{
					0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
					0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x11, 0x1D, 0xAE, 0xBD, 0x4D, 0xF4, 0x7C, 0x54, 0x37, 0xFA, 0x1B, 0x08, 0x35, 0x59, 0x47, 0xD5,
					0x90, 0xA7, 0x18, 0x39, 0x9F, 0x87, 0x40, 0x14, 0xCA, 0x93, 0x0A, 0x49, 0xD4, 0x46, 0x99, 0xA6,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			TargetTxHeader: &schema.TxHeader{
				Id: 2,
				PrevAlh: []byte{
					0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
					0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x11, 0x1D, 0xAE, 0xBD, 0x4D, 0xF4, 0x7C, 0x54, 0x37, 0xFA, 0x1B, 0x08, 0x35, 0x59, 0x47, 0xD5,
					0x90, 0xA7, 0x18, 0x39, 0x9F, 0x87, 0x40, 0x14, 0xCA, 0x93, 0x0A, 0x49, 0xD4, 0x46, 0x99, 0xA6,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			InclusionProof:   [][]byte{},
			ConsistencyProof: [][]byte{},
			TargetBlTxAlh: []byte{
				0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
				0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
			},
			LastInclusionProof: [][]byte{},
			LinearProof: &schema.LinearProof{
				SourceTxId: 2,
				TargetTxId: 2,
				Terms: [][]byte{
					{
						0xBE, 0x6E, 0xD4, 0xBA, 0xA7, 0xE7, 0xB2, 0x7B, 0xD4, 0x19, 0xFE, 0xA6, 0xD5, 0xBF, 0x52, 0xBF,
						0x76, 0xAA, 0x9A, 0x64, 0xF7, 0xC6, 0xDC, 0xD6, 0xEB, 0x4E, 0x62, 0x52, 0xFC, 0x67, 0x51, 0x95,
					},
				},
			},
		},
	}

	verifiableTxById_3_2 = &schema.VerifiableTx{
		Tx: &schema.Tx{
			Header: &schema.TxHeader{
				Id: 3,
				PrevAlh: []byte{
					0xBE, 0x6E, 0xD4, 0xBA, 0xA7, 0xE7, 0xB2, 0x7B, 0xD4, 0x19, 0xFE, 0xA6, 0xD5, 0xBF, 0x52, 0xBF,
					0x76, 0xAA, 0x9A, 0x64, 0xF7, 0xC6, 0xDC, 0xD6, 0xEB, 0x4E, 0x62, 0x52, 0xFC, 0x67, 0x51, 0x95,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0xB3, 0x8B, 0xA7, 0x86, 0x7A, 0xD8, 0xD6, 0xCB, 0x11, 0x21, 0x14, 0x03, 0x56, 0xD1, 0x83, 0x81,
					0xD4, 0x89, 0x83, 0x55, 0x0D, 0x2D, 0x60, 0x6C, 0xC9, 0x32, 0x3B, 0x6A, 0x41, 0xD3, 0x0C, 0x4C,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			Entries: []*schema.TxEntry{
				{
					Key: []byte{
						0x00, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x2D, 0x6B, 0x65, 0x79, 0x2D, 0x31,
					},
					HValue: []byte{
						0x96, 0xC7, 0xA5, 0x2E, 0x71, 0x77, 0x5F, 0x04, 0x7B, 0x28, 0x47, 0x78, 0x33, 0xF3, 0x96, 0x88,
						0x8C, 0xE6, 0xEC, 0x8E, 0xA6, 0x25, 0xC8, 0x6E, 0x96, 0x25, 0xFE, 0xF8, 0x54, 0xEA, 0x20, 0xC6,
					},
					VLen: 14,
				},
			},
		},
		DualProof: &schema.DualProof{
			SourceTxHeader: &schema.TxHeader{
				Id: 2,
				PrevAlh: []byte{
					0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
					0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x11, 0x1D, 0xAE, 0xBD, 0x4D, 0xF4, 0x7C, 0x54, 0x37, 0xFA, 0x1B, 0x08, 0x35, 0x59, 0x47, 0xD5,
					0x90, 0xA7, 0x18, 0x39, 0x9F, 0x87, 0x40, 0x14, 0xCA, 0x93, 0x0A, 0x49, 0xD4, 0x46, 0x99, 0xA6,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			TargetTxHeader: &schema.TxHeader{
				Id: 3,
				PrevAlh: []byte{
					0xBE, 0x6E, 0xD4, 0xBA, 0xA7, 0xE7, 0xB2, 0x7B, 0xD4, 0x19, 0xFE, 0xA6, 0xD5, 0xBF, 0x52, 0xBF,
					0x76, 0xAA, 0x9A, 0x64, 0xF7, 0xC6, 0xDC, 0xD6, 0xEB, 0x4E, 0x62, 0x52, 0xFC, 0x67, 0x51, 0x95,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0xB3, 0x8B, 0xA7, 0x86, 0x7A, 0xD8, 0xD6, 0xCB, 0x11, 0x21, 0x14, 0x03, 0x56, 0xD1, 0x83, 0x81,
					0xD4, 0x89, 0x83, 0x55, 0x0D, 0x2D, 0x60, 0x6C, 0xC9, 0x32, 0x3B, 0x6A, 0x41, 0xD3, 0x0C, 0x4C,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			InclusionProof:   [][]byte{},
			ConsistencyProof: [][]byte{},
			TargetBlTxAlh: []byte{
				0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
				0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
			},
			LastInclusionProof: [][]byte{},
			LinearProof: &schema.LinearProof{
				SourceTxId: 2,
				TargetTxId: 3,
				Terms: [][]byte{
					{
						0xBE, 0x6E, 0xD4, 0xBA, 0xA7, 0xE7, 0xB2, 0x7B, 0xD4, 0x19, 0xFE, 0xA6, 0xD5, 0xBF, 0x52, 0xBF,
						0x76, 0xAA, 0x9A, 0x64, 0xF7, 0xC6, 0xDC, 0xD6, 0xEB, 0x4E, 0x62, 0x52, 0xFC, 0x67, 0x51, 0x95,
					},

					{
						0xFD, 0xAA, 0x47, 0xAF, 0x1F, 0xBE, 0x2E, 0x0E, 0x57, 0x08, 0xE7, 0x29, 0x00, 0x82, 0x94, 0x3F,
						0x22, 0xB8, 0x9F, 0x97, 0x9A, 0x48, 0xE1, 0x90, 0xC2, 0x37, 0x75, 0xD2, 0xB4, 0xF0, 0xCD, 0x90,
					},
				},
			},
		},
	}

	verifiableTxById_5_3 = &schema.VerifiableTx{
		Tx: &schema.Tx{
			Header: &schema.TxHeader{
				Id: 5,
				PrevAlh: []byte{
					0x15, 0x09, 0x48, 0xAC, 0x8C, 0x92, 0x9E, 0xE8, 0x2C, 0x24, 0xED, 0x30, 0x75, 0xDE, 0x79, 0xCF,
					0xA0, 0x1E, 0xE9, 0xEE, 0x70, 0xF5, 0xB0, 0xEE, 0xC8, 0xEE, 0x50, 0x60, 0xDD, 0x2C, 0x23, 0x11,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x3A, 0x14, 0xB0, 0xD7, 0xC3, 0x8A, 0xC1, 0x8C, 0xE5, 0x14, 0x30, 0x75, 0x90, 0x5D, 0x96, 0xAC,
					0xB7, 0x18, 0x17, 0x6D, 0x19, 0xFE, 0xAE, 0xE1, 0x10, 0x40, 0xBC, 0xD0, 0x9E, 0x2A, 0x35, 0xDA,
				},
				BlTxId: 4,
				BlRoot: []byte{
					0x0C, 0x4E, 0x7C, 0xD0, 0xE9, 0x93, 0x07, 0x96, 0x75, 0x86, 0x65, 0xD8, 0x5C, 0x79, 0xAC, 0x26,
					0xE3, 0xA1, 0x7A, 0x9D, 0x18, 0x1A, 0xF0, 0x5A, 0x01, 0x48, 0x8F, 0x69, 0x52, 0xBB, 0xB7, 0x5C,
				},
			},
			Entries: []*schema.TxEntry{
				{
					Key: []byte{
						0x00, 0x6B, 0x65, 0x79, 0x2D, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2D, 0x31,
					},
					HValue: []byte{
						0x67, 0x5C, 0xD3, 0xBC, 0x14, 0x05, 0xA2, 0xA5, 0x07, 0xE0, 0x03, 0xB1, 0xFA, 0xCC, 0x4D, 0xA4,
						0x73, 0xE1, 0x95, 0x6C, 0x45, 0xD7, 0xC0, 0x6F, 0xBC, 0x01, 0xE3, 0xA8, 0xD9, 0x1F, 0x25, 0x6C,
					},
					VLen: 14,
				},
			},
		},
		DualProof: &schema.DualProof{
			SourceTxHeader: &schema.TxHeader{
				Id: 3,
				PrevAlh: []byte{
					0xBE, 0x6E, 0xD4, 0xBA, 0xA7, 0xE7, 0xB2, 0x7B, 0xD4, 0x19, 0xFE, 0xA6, 0xD5, 0xBF, 0x52, 0xBF,
					0x76, 0xAA, 0x9A, 0x64, 0xF7, 0xC6, 0xDC, 0xD6, 0xEB, 0x4E, 0x62, 0x52, 0xFC, 0x67, 0x51, 0x95,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0xB3, 0x8B, 0xA7, 0x86, 0x7A, 0xD8, 0xD6, 0xCB, 0x11, 0x21, 0x14, 0x03, 0x56, 0xD1, 0x83, 0x81,
					0xD4, 0x89, 0x83, 0x55, 0x0D, 0x2D, 0x60, 0x6C, 0xC9, 0x32, 0x3B, 0x6A, 0x41, 0xD3, 0x0C, 0x4C,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			TargetTxHeader: &schema.TxHeader{
				Id: 5,
				PrevAlh: []byte{
					0x15, 0x09, 0x48, 0xAC, 0x8C, 0x92, 0x9E, 0xE8, 0x2C, 0x24, 0xED, 0x30, 0x75, 0xDE, 0x79, 0xCF,
					0xA0, 0x1E, 0xE9, 0xEE, 0x70, 0xF5, 0xB0, 0xEE, 0xC8, 0xEE, 0x50, 0x60, 0xDD, 0x2C, 0x23, 0x11,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x3A, 0x14, 0xB0, 0xD7, 0xC3, 0x8A, 0xC1, 0x8C, 0xE5, 0x14, 0x30, 0x75, 0x90, 0x5D, 0x96, 0xAC,
					0xB7, 0x18, 0x17, 0x6D, 0x19, 0xFE, 0xAE, 0xE1, 0x10, 0x40, 0xBC, 0xD0, 0x9E, 0x2A, 0x35, 0xDA,
				},
				BlTxId: 4,
				BlRoot: []byte{
					0x0C, 0x4E, 0x7C, 0xD0, 0xE9, 0x93, 0x07, 0x96, 0x75, 0x86, 0x65, 0xD8, 0x5C, 0x79, 0xAC, 0x26,
					0xE3, 0xA1, 0x7A, 0x9D, 0x18, 0x1A, 0xF0, 0x5A, 0x01, 0x48, 0x8F, 0x69, 0x52, 0xBB, 0xB7, 0x5C,
				},
			},
			InclusionProof: [][]byte{
				{
					0xD4, 0xA4, 0x6E, 0x1D, 0x3F, 0x6C, 0xF5, 0xED, 0xFE, 0x7F, 0x4F, 0x8E, 0x68, 0x34, 0x54, 0x4F,
					0xED, 0x83, 0x56, 0x40, 0x88, 0x10, 0x29, 0x0E, 0xC4, 0xA3, 0x8C, 0xE0, 0xA6, 0xC8, 0x44, 0x33,
				},

				{
					0x56, 0x10, 0xDF, 0x2A, 0x78, 0x2B, 0xA3, 0xE6, 0xD7, 0x2C, 0x79, 0x0C, 0xEB, 0x81, 0x26, 0x12,
					0xEA, 0x2D, 0x2D, 0x53, 0x4C, 0x55, 0x4F, 0x92, 0x75, 0x7C, 0x1B, 0xD1, 0xDF, 0xFD, 0xD2, 0x3E,
				},
			},
			ConsistencyProof: [][]byte{
				{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},

				{
					0xEB, 0xA0, 0xC2, 0x62, 0xC4, 0x5F, 0x64, 0xB5, 0x54, 0x29, 0x33, 0x54, 0x37, 0x33, 0x7D, 0x79,
					0x33, 0x43, 0x42, 0xE2, 0xCF, 0x71, 0x87, 0x6E, 0x93, 0x0B, 0x4B, 0x19, 0x90, 0xA5, 0x56, 0x8B,
				},

				{
					0xD8, 0x08, 0xE0, 0x3F, 0xA5, 0x1C, 0xC9, 0xD5, 0xC3, 0xF9, 0x4D, 0x19, 0x12, 0x98, 0x19, 0x53,
					0x68, 0x40, 0x9F, 0xC3, 0x4C, 0x0F, 0x57, 0x76, 0x41, 0x64, 0x81, 0x1F, 0x28, 0xE0, 0xF5, 0xEA,
				},
			},
			TargetBlTxAlh: []byte{
				0x15, 0x09, 0x48, 0xAC, 0x8C, 0x92, 0x9E, 0xE8, 0x2C, 0x24, 0xED, 0x30, 0x75, 0xDE, 0x79, 0xCF,
				0xA0, 0x1E, 0xE9, 0xEE, 0x70, 0xF5, 0xB0, 0xEE, 0xC8, 0xEE, 0x50, 0x60, 0xDD, 0x2C, 0x23, 0x11,
			},
			LastInclusionProof: [][]byte{
				{
					0x9B, 0xE3, 0x2A, 0x61, 0x60, 0xD2, 0x7A, 0x88, 0x4B, 0xA7, 0xCF, 0xB0, 0x20, 0xCE, 0x78, 0x73,
					0x5D, 0xBC, 0xCD, 0x40, 0x65, 0x23, 0xF3, 0x7D, 0x6E, 0x5A, 0xAD, 0x63, 0x39, 0xCD, 0x72, 0x73,
				},

				{
					0x56, 0x10, 0xDF, 0x2A, 0x78, 0x2B, 0xA3, 0xE6, 0xD7, 0x2C, 0x79, 0x0C, 0xEB, 0x81, 0x26, 0x12,
					0xEA, 0x2D, 0x2D, 0x53, 0x4C, 0x55, 0x4F, 0x92, 0x75, 0x7C, 0x1B, 0xD1, 0xDF, 0xFD, 0xD2, 0x3E,
				},
			},
			LinearProof: &schema.LinearProof{
				SourceTxId: 4,
				TargetTxId: 5,
				Terms: [][]byte{
					{
						0x15, 0x09, 0x48, 0xAC, 0x8C, 0x92, 0x9E, 0xE8, 0x2C, 0x24, 0xED, 0x30, 0x75, 0xDE, 0x79, 0xCF,
						0xA0, 0x1E, 0xE9, 0xEE, 0x70, 0xF5, 0xB0, 0xEE, 0xC8, 0xEE, 0x50, 0x60, 0xDD, 0x2C, 0x23, 0x11,
					},

					{
						0x0F, 0x31, 0x18, 0xA6, 0x51, 0x1D, 0x80, 0x1F, 0xDC, 0x69, 0xA8, 0x5A, 0xEC, 0x60, 0x3B, 0x6C,
						0x6B, 0xCE, 0x79, 0x1B, 0x95, 0x09, 0x48, 0x95, 0x73, 0xA0, 0xE5, 0x61, 0xF3, 0xA0, 0x0B, 0x48,
					},
				},
			},
		},
	}

	verifiableTxById_5_2_fake = &schema.VerifiableTx{
		Tx: &schema.Tx{
			Header: &schema.TxHeader{
				Id: 2,
				PrevAlh: []byte{
					0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
					0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x90, 0xBC, 0x22, 0xA3, 0x60, 0x0E, 0x97, 0x70, 0xA8, 0x89, 0x9C, 0x55, 0xD2, 0x7F, 0x17, 0xB0,
					0xA2, 0x40, 0xEC, 0x99, 0xE2, 0x99, 0xFE, 0x26, 0xB0, 0x34, 0xBE, 0x61, 0x9C, 0x1D, 0x84, 0xEA,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			Entries: []*schema.TxEntry{
				{
					Key: []byte{
						0x00, 0x66, 0x61, 0x6B, 0x65, 0x2D, 0x6B, 0x65, 0x79,
					},
					HValue: []byte{
						0x1E, 0x53, 0xF2, 0x30, 0xA2, 0x8E, 0x86, 0x56, 0x31, 0xD1, 0x98, 0xB9, 0x1D, 0x03, 0x1A, 0x9E,
						0x15, 0xB8, 0xA5, 0x2A, 0xAD, 0x76, 0x81, 0x33, 0x87, 0x4C, 0x86, 0xC7, 0xC3, 0x39, 0x75, 0xB1,
					},
					VLen: 11,
				},
			},
		},
		DualProof: &schema.DualProof{
			SourceTxHeader: &schema.TxHeader{
				Id: 2,
				PrevAlh: []byte{
					0xFB, 0x23, 0x40, 0xD3, 0x97, 0x23, 0xB2, 0x62, 0x46, 0x4F, 0xEA, 0x07, 0x96, 0xCB, 0xA8, 0xCA,
					0x04, 0xE7, 0x4B, 0x4B, 0x67, 0xB6, 0xAD, 0x74, 0x93, 0x19, 0x2B, 0x01, 0x6E, 0x70, 0x4E, 0x52,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x90, 0xBC, 0x22, 0xA3, 0x60, 0x0E, 0x97, 0x70, 0xA8, 0x89, 0x9C, 0x55, 0xD2, 0x7F, 0x17, 0xB0,
					0xA2, 0x40, 0xEC, 0x99, 0xE2, 0x99, 0xFE, 0x26, 0xB0, 0x34, 0xBE, 0x61, 0x9C, 0x1D, 0x84, 0xEA,
				},
				BlTxId: 1,
				BlRoot: []byte{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},
			},
			TargetTxHeader: &schema.TxHeader{
				Id: 5,
				PrevAlh: []byte{
					0x15, 0x09, 0x48, 0xAC, 0x8C, 0x92, 0x9E, 0xE8, 0x2C, 0x24, 0xED, 0x30, 0x75, 0xDE, 0x79, 0xCF,
					0xA0, 0x1E, 0xE9, 0xEE, 0x70, 0xF5, 0xB0, 0xEE, 0xC8, 0xEE, 0x50, 0x60, 0xDD, 0x2C, 0x23, 0x11,
				},
				Ts:       1661869350,
				Version:  1,
				Nentries: 1,
				EH: []byte{
					0x3A, 0x14, 0xB0, 0xD7, 0xC3, 0x8A, 0xC1, 0x8C, 0xE5, 0x14, 0x30, 0x75, 0x90, 0x5D, 0x96, 0xAC,
					0xB7, 0x18, 0x17, 0x6D, 0x19, 0xFE, 0xAE, 0xE1, 0x10, 0x40, 0xBC, 0xD0, 0x9E, 0x2A, 0x35, 0xDA,
				},
				BlTxId: 4,
				BlRoot: []byte{
					0x0C, 0x4E, 0x7C, 0xD0, 0xE9, 0x93, 0x07, 0x96, 0x75, 0x86, 0x65, 0xD8, 0x5C, 0x79, 0xAC, 0x26,
					0xE3, 0xA1, 0x7A, 0x9D, 0x18, 0x1A, 0xF0, 0x5A, 0x01, 0x48, 0x8F, 0x69, 0x52, 0xBB, 0xB7, 0x5C,
				},
			},
			InclusionProof: [][]byte{
				{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},

				{
					0xD8, 0x08, 0xE0, 0x3F, 0xA5, 0x1C, 0xC9, 0xD5, 0xC3, 0xF9, 0x4D, 0x19, 0x12, 0x98, 0x19, 0x53,
					0x68, 0x40, 0x9F, 0xC3, 0x4C, 0x0F, 0x57, 0x76, 0x41, 0x64, 0x81, 0x1F, 0x28, 0xE0, 0xF5, 0xEA,
				},
			},
			ConsistencyProof: [][]byte{
				{
					0xA1, 0xA7, 0xF6, 0xBF, 0x5D, 0xE3, 0x37, 0x1B, 0x85, 0x94, 0x06, 0xB3, 0x0E, 0x91, 0x9D, 0xBB,
					0x1D, 0xB8, 0xF5, 0x36, 0x8C, 0x66, 0xC2, 0x45, 0xFD, 0x1F, 0xC5, 0x11, 0xE8, 0x86, 0x1A, 0xE2,
				},

				{
					0xEB, 0xA0, 0xC2, 0x62, 0xC4, 0x5F, 0x64, 0xB5, 0x54, 0x29, 0x33, 0x54, 0x37, 0x33, 0x7D, 0x79,
					0x33, 0x43, 0x42, 0xE2, 0xCF, 0x71, 0x87, 0x6E, 0x93, 0x0B, 0x4B, 0x19, 0x90, 0xA5, 0x56, 0x8B,
				},

				{
					0xD8, 0x08, 0xE0, 0x3F, 0xA5, 0x1C, 0xC9, 0xD5, 0xC3, 0xF9, 0x4D, 0x19, 0x12, 0x98, 0x19, 0x53,
					0x68, 0x40, 0x9F, 0xC3, 0x4C, 0x0F, 0x57, 0x76, 0x41, 0x64, 0x81, 0x1F, 0x28, 0xE0, 0xF5, 0xEA,
				},
			},
			TargetBlTxAlh: []byte{
				0x15, 0x09, 0x48, 0xAC, 0x8C, 0x92, 0x9E, 0xE8, 0x2C, 0x24, 0xED, 0x30, 0x75, 0xDE, 0x79, 0xCF,
				0xA0, 0x1E, 0xE9, 0xEE, 0x70, 0xF5, 0xB0, 0xEE, 0xC8, 0xEE, 0x50, 0x60, 0xDD, 0x2C, 0x23, 0x11,
			},
			LastInclusionProof: [][]byte{
				{
					0x9B, 0xE3, 0x2A, 0x61, 0x60, 0xD2, 0x7A, 0x88, 0x4B, 0xA7, 0xCF, 0xB0, 0x20, 0xCE, 0x78, 0x73,
					0x5D, 0xBC, 0xCD, 0x40, 0x65, 0x23, 0xF3, 0x7D, 0x6E, 0x5A, 0xAD, 0x63, 0x39, 0xCD, 0x72, 0x73,
				},

				{
					0x56, 0x10, 0xDF, 0x2A, 0x78, 0x2B, 0xA3, 0xE6, 0xD7, 0x2C, 0x79, 0x0C, 0xEB, 0x81, 0x26, 0x12,
					0xEA, 0x2D, 0x2D, 0x53, 0x4C, 0x55, 0x4F, 0x92, 0x75, 0x7C, 0x1B, 0xD1, 0xDF, 0xFD, 0xD2, 0x3E,
				},
			},
			LinearProof: &schema.LinearProof{
				SourceTxId: 4,
				TargetTxId: 5,
				Terms: [][]byte{
					{
						0x15, 0x09, 0x48, 0xAC, 0x8C, 0x92, 0x9E, 0xE8, 0x2C, 0x24, 0xED, 0x30, 0x75, 0xDE, 0x79, 0xCF,
						0xA0, 0x1E, 0xE9, 0xEE, 0x70, 0xF5, 0xB0, 0xEE, 0xC8, 0xEE, 0x50, 0x60, 0xDD, 0x2C, 0x23, 0x11,
					},

					{
						0x0F, 0x31, 0x18, 0xA6, 0x51, 0x1D, 0x80, 0x1F, 0xDC, 0x69, 0xA8, 0x5A, 0xEC, 0x60, 0x3B, 0x6C,
						0x6B, 0xCE, 0x79, 0x1B, 0x95, 0x09, 0x48, 0x95, 0x73, 0xA0, 0xE5, 0x61, 0xF3, 0xA0, 0x0B, 0x48,
					},
				},
			},
		},
	}
)
