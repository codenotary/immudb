// Package immudbdocuments provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package immudbdocuments

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for DocumentschemaIndexType.
const (
	DOUBLE  DocumentschemaIndexType = "DOUBLE"
	INTEGER DocumentschemaIndexType = "INTEGER"
	STRING  DocumentschemaIndexType = "STRING"
)

// Defines values for DocumentschemaQueryOperator.
const (
	EQ   DocumentschemaQueryOperator = "EQ"
	GT   DocumentschemaQueryOperator = "GT"
	GTE  DocumentschemaQueryOperator = "GTE"
	LIKE DocumentschemaQueryOperator = "LIKE"
	LT   DocumentschemaQueryOperator = "LT"
	LTE  DocumentschemaQueryOperator = "LTE"
)

// DocumentschemaCollectionCreateRequest defines model for documentschemaCollectionCreateRequest.
type DocumentschemaCollectionCreateRequest struct {
	IndexKeys   *map[string]DocumentschemaIndexOption `json:"indexKeys,omitempty"`
	Name        *string                               `json:"name,omitempty"`
	PrimaryKeys *map[string]DocumentschemaIndexOption `json:"primaryKeys,omitempty"`
}

// DocumentschemaCollectionCreateResponse defines model for documentschemaCollectionCreateResponse.
type DocumentschemaCollectionCreateResponse struct {
	Collection *DocumentschemaCollectionInformation `json:"collection,omitempty"`
}

// DocumentschemaCollectionDeleteResponse defines model for documentschemaCollectionDeleteResponse.
type DocumentschemaCollectionDeleteResponse = map[string]interface{}

// DocumentschemaCollectionGetResponse defines model for documentschemaCollectionGetResponse.
type DocumentschemaCollectionGetResponse struct {
	Collection *DocumentschemaCollectionInformation `json:"collection,omitempty"`
}

// DocumentschemaCollectionInformation defines model for documentschemaCollectionInformation.
type DocumentschemaCollectionInformation struct {
	IndexKeys   *map[string]DocumentschemaIndexOption `json:"indexKeys,omitempty"`
	Name        *string                               `json:"name,omitempty"`
	PrimaryKeys *map[string]DocumentschemaIndexOption `json:"primaryKeys,omitempty"`
}

// DocumentschemaCollectionListRequest defines model for documentschemaCollectionListRequest.
type DocumentschemaCollectionListRequest = map[string]interface{}

// DocumentschemaCollectionListResponse defines model for documentschemaCollectionListResponse.
type DocumentschemaCollectionListResponse struct {
	Collections *[]DocumentschemaCollectionInformation `json:"collections,omitempty"`
}

// DocumentschemaDocumentAudit defines model for documentschemaDocumentAudit.
type DocumentschemaDocumentAudit struct {
	TransactionID *string                 `json:"transactionID,omitempty"`
	Value         *map[string]interface{} `json:"value,omitempty"`
}

// DocumentschemaDocumentAuditRequest defines model for documentschemaDocumentAuditRequest.
type DocumentschemaDocumentAuditRequest struct {
	Collection  *string                              `json:"collection,omitempty"`
	Page        *int64                               `json:"page,omitempty"`
	PerPage     *int64                               `json:"perPage,omitempty"`
	PrimaryKeys *map[string]DocumentschemaIndexValue `json:"primaryKeys,omitempty"`
}

// DocumentschemaDocumentAuditResponse defines model for documentschemaDocumentAuditResponse.
type DocumentschemaDocumentAuditResponse struct {
	EntriesLeft *int64                         `json:"entriesLeft,omitempty"`
	Page        *int64                         `json:"page,omitempty"`
	PerPage     *int64                         `json:"perPage,omitempty"`
	Results     *[]DocumentschemaDocumentAudit `json:"results,omitempty"`
}

// DocumentschemaDocumentInsertRequest defines model for documentschemaDocumentInsertRequest.
type DocumentschemaDocumentInsertRequest struct {
	Collection *string                   `json:"collection,omitempty"`
	Document   *[]map[string]interface{} `json:"document,omitempty"`
}

// DocumentschemaDocumentInsertResponse defines model for documentschemaDocumentInsertResponse.
type DocumentschemaDocumentInsertResponse struct {
	Proof *SchemaVerifiableTx `json:"proof,omitempty"`
}

// DocumentschemaDocumentProofRequest defines model for documentschemaDocumentProofRequest.
type DocumentschemaDocumentProofRequest struct {
	AtRevision  *string                              `json:"atRevision,omitempty"`
	Collection  *string                              `json:"collection,omitempty"`
	PrimaryKeys *map[string]DocumentschemaIndexValue `json:"primaryKeys,omitempty"`
}

// DocumentschemaDocumentProofResponse defines model for documentschemaDocumentProofResponse.
type DocumentschemaDocumentProofResponse struct {
	Proof *SchemaVerifiableTx `json:"proof,omitempty"`
}

// DocumentschemaDocumentQuery defines model for documentschemaDocumentQuery.
type DocumentschemaDocumentQuery struct {
	Field    *string                      `json:"field,omitempty"`
	Operator *DocumentschemaQueryOperator `json:"operator,omitempty"`
	Value    *string      `json:"value,omitempty"`
}

// DocumentschemaDocumentSearchRequest defines model for documentschemaDocumentSearchRequest.
type DocumentschemaDocumentSearchRequest struct {
	Collection *string                        `json:"collection,omitempty"`
	Page       *int64                         `json:"page,omitempty"`
	PerPage    *int64                         `json:"perPage,omitempty"`
	Query      *[]DocumentschemaDocumentQuery `json:"query,omitempty"`
}

// DocumentschemaDocumentSearchResponse defines model for documentschemaDocumentSearchResponse.
type DocumentschemaDocumentSearchResponse struct {
	EntriesLeft *int64                    `json:"entriesLeft,omitempty"`
	Page        *int64                    `json:"page,omitempty"`
	PerPage     *int64                    `json:"perPage,omitempty"`
	Results     *[]map[string]interface{} `json:"results,omitempty"`
}

// DocumentschemaIndexOption defines model for documentschemaIndexOption.
type DocumentschemaIndexOption struct {
	Type *DocumentschemaIndexType `json:"type,omitempty"`
}

// DocumentschemaIndexType defines model for documentschemaIndexType.
type DocumentschemaIndexType string

// DocumentschemaIndexValue defines model for documentschemaIndexValue.
type DocumentschemaIndexValue struct {
	BoolValue   *bool    `json:"bool_value,omitempty"`
	NullValue   *string  `json:"null_value,omitempty"`
	NumberValue *float64 `json:"number_value,omitempty"`
	StringValue *string  `json:"string_value,omitempty"`
}

// DocumentschemaQueryOperator defines model for documentschemaQueryOperator.
type DocumentschemaQueryOperator string

// ProtobufAny `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//	Foo foo = ...;
//	Any any;
//	any.PackFrom(foo);
//	...
//	if (any.UnpackTo(&foo)) {
//	  ...
//	}
//
// Example 2: Pack and unpack a message in Java.
//
//	   Foo foo = ...;
//	   Any any = Any.pack(foo);
//	   ...
//	   if (any.is(Foo.class)) {
//	     foo = any.unpack(Foo.class);
//	   }
//
//	Example 3: Pack and unpack a message in Python.
//
//	   foo = Foo(...)
//	   any = Any()
//	   any.Pack(foo)
//	   ...
//	   if any.Is(Foo.DESCRIPTOR):
//	     any.Unpack(foo)
//	     ...
//
//	Example 4: Pack and unpack a message in Go
//
//	    foo := &pb.Foo{...}
//	    any, err := ptypes.MarshalAny(foo)
//	    ...
//	    foo := &pb.Foo{}
//	    if err := ptypes.UnmarshalAny(any, foo); err != nil {
//	      ...
//	    }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//	package google.profile;
//	message Person {
//	  string first_name = 1;
//	  string last_name = 2;
//	}
//
//	{
//	  "@type": "type.googleapis.com/google.profile.Person",
//	  "firstName": <string>,
//	  "lastName": <string>
//	}
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//	{
//	  "@type": "type.googleapis.com/google.protobuf.Duration",
//	  "value": "1.212s"
//	}
type ProtobufAny struct {
	// TypeUrl A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeUrl *string `json:"type_url,omitempty"`

	// Value Must be a valid serialized protocol buffer of the above specified type.
	Value *[]byte `json:"value,omitempty"`
}

// RuntimeError defines model for runtimeError.
type RuntimeError struct {
	Code    *int32         `json:"code,omitempty"`
	Details *[]ProtobufAny `json:"details,omitempty"`
	Error   *string        `json:"error,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// SchemaDualProof defines model for schemaDualProof.
type SchemaDualProof struct {
	LinearAdvanceProof *SchemaLinearAdvanceProof `json:"LinearAdvanceProof,omitempty"`
	ConsistencyProof   *[][]byte                 `json:"consistencyProof,omitempty"`
	InclusionProof     *[][]byte                 `json:"inclusionProof,omitempty"`
	LastInclusionProof *[][]byte                 `json:"lastInclusionProof,omitempty"`
	LinearProof        *SchemaLinearProof        `json:"linearProof,omitempty"`
	SourceTxHeader     *SchemaTxHeader           `json:"sourceTxHeader,omitempty"`
	TargetBlTxAlh      *[]byte                   `json:"targetBlTxAlh,omitempty"`
	TargetTxHeader     *SchemaTxHeader           `json:"targetTxHeader,omitempty"`
}

// SchemaEntry defines model for schemaEntry.
type SchemaEntry struct {
	Expired      *bool             `json:"expired,omitempty"`
	Key          *[]byte           `json:"key,omitempty"`
	Metadata     *SchemaKVMetadata `json:"metadata,omitempty"`
	ReferencedBy *SchemaReference  `json:"referencedBy,omitempty"`
	Revision     *string           `json:"revision,omitempty"`
	Tx           *string           `json:"tx,omitempty"`
	Value        *[]byte           `json:"value,omitempty"`
}

// SchemaExpiration defines model for schemaExpiration.
type SchemaExpiration struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// SchemaInclusionProof defines model for schemaInclusionProof.
type SchemaInclusionProof struct {
	Leaf  *int32    `json:"leaf,omitempty"`
	Terms *[][]byte `json:"terms,omitempty"`
	Width *int32    `json:"width,omitempty"`
}

// SchemaKVMetadata defines model for schemaKVMetadata.
type SchemaKVMetadata struct {
	Deleted      *bool             `json:"deleted,omitempty"`
	Expiration   *SchemaExpiration `json:"expiration,omitempty"`
	NonIndexable *bool             `json:"nonIndexable,omitempty"`
}

// SchemaLinearAdvanceProof defines model for schemaLinearAdvanceProof.
type SchemaLinearAdvanceProof struct {
	InclusionProofs  *[]SchemaInclusionProof `json:"inclusionProofs,omitempty"`
	LinearProofTerms *[][]byte               `json:"linearProofTerms,omitempty"`
}

// SchemaLinearProof defines model for schemaLinearProof.
type SchemaLinearProof struct {
	TargetTxId *string   `json:"TargetTxId,omitempty"`
	SourceTxId *string   `json:"sourceTxId,omitempty"`
	Terms      *[][]byte `json:"terms,omitempty"`
}

// SchemaReference defines model for schemaReference.
type SchemaReference struct {
	AtTx     *string           `json:"atTx,omitempty"`
	Key      *[]byte           `json:"key,omitempty"`
	Metadata *SchemaKVMetadata `json:"metadata,omitempty"`
	Revision *string           `json:"revision,omitempty"`
	Tx       *string           `json:"tx,omitempty"`
}

// SchemaSignature defines model for schemaSignature.
type SchemaSignature struct {
	PublicKey *[]byte `json:"publicKey,omitempty"`
	Signature *[]byte `json:"signature,omitempty"`
}

// SchemaTx defines model for schemaTx.
type SchemaTx struct {
	Entries   *[]SchemaTxEntry `json:"entries,omitempty"`
	Header    *SchemaTxHeader  `json:"header,omitempty"`
	KvEntries *[]SchemaEntry   `json:"kvEntries,omitempty"`
	ZEntries  *[]SchemaZEntry  `json:"zEntries,omitempty"`
}

// SchemaTxEntry defines model for schemaTxEntry.
type SchemaTxEntry struct {
	HValue   *[]byte           `json:"hValue,omitempty"`
	Key      *[]byte           `json:"key,omitempty"`
	Metadata *SchemaKVMetadata `json:"metadata,omitempty"`
	VLen     *int32            `json:"vLen,omitempty"`

	// Value value, must be ignored when len(value) == 0 and vLen > 0.
	// Otherwise sha256(value) must be equal to hValue.
	Value *[]byte `json:"value,omitempty"`
}

// SchemaTxHeader defines model for schemaTxHeader.
type SchemaTxHeader struct {
	BlRoot   *[]byte           `json:"blRoot,omitempty"`
	BlTxId   *string           `json:"blTxId,omitempty"`
	EH       *[]byte           `json:"eH,omitempty"`
	Id       *string           `json:"id,omitempty"`
	Metadata *SchemaTxMetadata `json:"metadata,omitempty"`
	Nentries *int32            `json:"nentries,omitempty"`
	PrevAlh  *[]byte           `json:"prevAlh,omitempty"`
	Ts       *string           `json:"ts,omitempty"`
	Version  *int32            `json:"version,omitempty"`
}

// SchemaTxMetadata defines model for schemaTxMetadata.
type SchemaTxMetadata struct {
	TruncatedTxID *string `json:"truncatedTxID,omitempty"`
}

// SchemaVerifiableTx defines model for schemaVerifiableTx.
type SchemaVerifiableTx struct {
	DualProof *SchemaDualProof `json:"dualProof,omitempty"`
	Signature *SchemaSignature `json:"signature,omitempty"`
	Tx        *SchemaTx        `json:"tx,omitempty"`
}

// SchemaZEntry defines model for schemaZEntry.
type SchemaZEntry struct {
	AtTx  *string      `json:"atTx,omitempty"`
	Entry *SchemaEntry `json:"entry,omitempty"`
	Key   *[]byte      `json:"key,omitempty"`
	Score *float64     `json:"score,omitempty"`
	Set   *[]byte      `json:"set,omitempty"`
}

// DocumentServiceCollectionDeleteParams defines parameters for DocumentServiceCollectionDelete.
type DocumentServiceCollectionDeleteParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// DocumentServiceCollectionGetParams defines parameters for DocumentServiceCollectionGet.
type DocumentServiceCollectionGetParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// DocumentServiceCollectionCreateJSONRequestBody defines body for DocumentServiceCollectionCreate for application/json ContentType.
type DocumentServiceCollectionCreateJSONRequestBody = DocumentschemaCollectionCreateRequest

// DocumentServiceCollectionListJSONRequestBody defines body for DocumentServiceCollectionList for application/json ContentType.
type DocumentServiceCollectionListJSONRequestBody = DocumentschemaCollectionListRequest

// DocumentServiceDocumentAuditJSONRequestBody defines body for DocumentServiceDocumentAudit for application/json ContentType.
type DocumentServiceDocumentAuditJSONRequestBody = DocumentschemaDocumentAuditRequest

// DocumentServiceDocumentInsertJSONRequestBody defines body for DocumentServiceDocumentInsert for application/json ContentType.
type DocumentServiceDocumentInsertJSONRequestBody = DocumentschemaDocumentInsertRequest

// DocumentServiceDocumentProofJSONRequestBody defines body for DocumentServiceDocumentProof for application/json ContentType.
type DocumentServiceDocumentProofJSONRequestBody = DocumentschemaDocumentProofRequest

// DocumentServiceDocumentSearchJSONRequestBody defines body for DocumentServiceDocumentSearch for application/json ContentType.
type DocumentServiceDocumentSearchJSONRequestBody = DocumentschemaDocumentSearchRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DocumentServiceCollectionCreate request with any body
	DocumentServiceCollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentServiceCollectionCreate(ctx context.Context, body DocumentServiceCollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentServiceCollectionDelete request
	DocumentServiceCollectionDelete(ctx context.Context, params *DocumentServiceCollectionDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentServiceCollectionGet request
	DocumentServiceCollectionGet(ctx context.Context, params *DocumentServiceCollectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentServiceCollectionList request with any body
	DocumentServiceCollectionListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentServiceCollectionList(ctx context.Context, body DocumentServiceCollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentServiceDocumentAudit request with any body
	DocumentServiceDocumentAuditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentServiceDocumentAudit(ctx context.Context, body DocumentServiceDocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentServiceDocumentInsert request with any body
	DocumentServiceDocumentInsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentServiceDocumentInsert(ctx context.Context, body DocumentServiceDocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentServiceDocumentProof request with any body
	DocumentServiceDocumentProofWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentServiceDocumentProof(ctx context.Context, body DocumentServiceDocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentServiceDocumentSearch request with any body
	DocumentServiceDocumentSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentServiceDocumentSearch(ctx context.Context, body DocumentServiceDocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DocumentServiceCollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceCollectionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceCollectionCreate(ctx context.Context, body DocumentServiceCollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceCollectionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceCollectionDelete(ctx context.Context, params *DocumentServiceCollectionDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceCollectionDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceCollectionGet(ctx context.Context, params *DocumentServiceCollectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceCollectionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceCollectionListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceCollectionListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceCollectionList(ctx context.Context, body DocumentServiceCollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceCollectionListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentAuditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentAuditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentAudit(ctx context.Context, body DocumentServiceDocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentAuditRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentInsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentInsertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentInsert(ctx context.Context, body DocumentServiceDocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentInsertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentProofWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentProofRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentProof(ctx context.Context, body DocumentServiceDocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentProofRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentServiceDocumentSearch(ctx context.Context, body DocumentServiceDocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentServiceDocumentSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDocumentServiceCollectionCreateRequest calls the generic DocumentServiceCollectionCreate builder with application/json body
func NewDocumentServiceCollectionCreateRequest(server string, body DocumentServiceCollectionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentServiceCollectionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentServiceCollectionCreateRequestWithBody generates requests for DocumentServiceCollectionCreate with any type of body
func NewDocumentServiceCollectionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentServiceCollectionDeleteRequest generates requests for DocumentServiceCollectionDelete
func NewDocumentServiceCollectionDeleteRequest(server string, params *DocumentServiceCollectionDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentServiceCollectionGetRequest generates requests for DocumentServiceCollectionGet
func NewDocumentServiceCollectionGetRequest(server string, params *DocumentServiceCollectionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDocumentServiceCollectionListRequest calls the generic DocumentServiceCollectionList builder with application/json body
func NewDocumentServiceCollectionListRequest(server string, body DocumentServiceCollectionListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentServiceCollectionListRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentServiceCollectionListRequestWithBody generates requests for DocumentServiceCollectionList with any type of body
func NewDocumentServiceCollectionListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentServiceDocumentAuditRequest calls the generic DocumentServiceDocumentAudit builder with application/json body
func NewDocumentServiceDocumentAuditRequest(server string, body DocumentServiceDocumentAuditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentServiceDocumentAuditRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentServiceDocumentAuditRequestWithBody generates requests for DocumentServiceDocumentAudit with any type of body
func NewDocumentServiceDocumentAuditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentServiceDocumentInsertRequest calls the generic DocumentServiceDocumentInsert builder with application/json body
func NewDocumentServiceDocumentInsertRequest(server string, body DocumentServiceDocumentInsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentServiceDocumentInsertRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentServiceDocumentInsertRequestWithBody generates requests for DocumentServiceDocumentInsert with any type of body
func NewDocumentServiceDocumentInsertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/insert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentServiceDocumentProofRequest calls the generic DocumentServiceDocumentProof builder with application/json body
func NewDocumentServiceDocumentProofRequest(server string, body DocumentServiceDocumentProofJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentServiceDocumentProofRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentServiceDocumentProofRequestWithBody generates requests for DocumentServiceDocumentProof with any type of body
func NewDocumentServiceDocumentProofRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/proof")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentServiceDocumentSearchRequest calls the generic DocumentServiceDocumentSearch builder with application/json body
func NewDocumentServiceDocumentSearchRequest(server string, body DocumentServiceDocumentSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentServiceDocumentSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentServiceDocumentSearchRequestWithBody generates requests for DocumentServiceDocumentSearch with any type of body
func NewDocumentServiceDocumentSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DocumentServiceCollectionCreate request with any body
	DocumentServiceCollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionCreateResponse, error)

	DocumentServiceCollectionCreateWithResponse(ctx context.Context, body DocumentServiceCollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionCreateResponse, error)

	// DocumentServiceCollectionDelete request
	DocumentServiceCollectionDeleteWithResponse(ctx context.Context, params *DocumentServiceCollectionDeleteParams, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionDeleteResponse, error)

	// DocumentServiceCollectionGet request
	DocumentServiceCollectionGetWithResponse(ctx context.Context, params *DocumentServiceCollectionGetParams, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionGetResponse, error)

	// DocumentServiceCollectionList request with any body
	DocumentServiceCollectionListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionListResponse, error)

	DocumentServiceCollectionListWithResponse(ctx context.Context, body DocumentServiceCollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionListResponse, error)

	// DocumentServiceDocumentAudit request with any body
	DocumentServiceDocumentAuditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentAuditResponse, error)

	DocumentServiceDocumentAuditWithResponse(ctx context.Context, body DocumentServiceDocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentAuditResponse, error)

	// DocumentServiceDocumentInsert request with any body
	DocumentServiceDocumentInsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentInsertResponse, error)

	DocumentServiceDocumentInsertWithResponse(ctx context.Context, body DocumentServiceDocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentInsertResponse, error)

	// DocumentServiceDocumentProof request with any body
	DocumentServiceDocumentProofWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentProofResponse, error)

	DocumentServiceDocumentProofWithResponse(ctx context.Context, body DocumentServiceDocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentProofResponse, error)

	// DocumentServiceDocumentSearch request with any body
	DocumentServiceDocumentSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentSearchResponse, error)

	DocumentServiceDocumentSearchWithResponse(ctx context.Context, body DocumentServiceDocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentSearchResponse, error)
}

type DocumentServiceCollectionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaCollectionCreateResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceCollectionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceCollectionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentServiceCollectionDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaCollectionDeleteResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceCollectionDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceCollectionDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentServiceCollectionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaCollectionGetResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceCollectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceCollectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentServiceCollectionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaCollectionListResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceCollectionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceCollectionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentServiceDocumentAuditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaDocumentAuditResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceDocumentAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceDocumentAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentServiceDocumentInsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaDocumentInsertResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceDocumentInsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceDocumentInsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentServiceDocumentProofResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaDocumentProofResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceDocumentProofResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceDocumentProofResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentServiceDocumentSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DocumentschemaDocumentSearchResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentServiceDocumentSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentServiceDocumentSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DocumentServiceCollectionCreateWithBodyWithResponse request with arbitrary body returning *DocumentServiceCollectionCreateResponse
func (c *ClientWithResponses) DocumentServiceCollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionCreateResponse, error) {
	rsp, err := c.DocumentServiceCollectionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceCollectionCreateResponse(rsp)
}

func (c *ClientWithResponses) DocumentServiceCollectionCreateWithResponse(ctx context.Context, body DocumentServiceCollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionCreateResponse, error) {
	rsp, err := c.DocumentServiceCollectionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceCollectionCreateResponse(rsp)
}

// DocumentServiceCollectionDeleteWithResponse request returning *DocumentServiceCollectionDeleteResponse
func (c *ClientWithResponses) DocumentServiceCollectionDeleteWithResponse(ctx context.Context, params *DocumentServiceCollectionDeleteParams, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionDeleteResponse, error) {
	rsp, err := c.DocumentServiceCollectionDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceCollectionDeleteResponse(rsp)
}

// DocumentServiceCollectionGetWithResponse request returning *DocumentServiceCollectionGetResponse
func (c *ClientWithResponses) DocumentServiceCollectionGetWithResponse(ctx context.Context, params *DocumentServiceCollectionGetParams, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionGetResponse, error) {
	rsp, err := c.DocumentServiceCollectionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceCollectionGetResponse(rsp)
}

// DocumentServiceCollectionListWithBodyWithResponse request with arbitrary body returning *DocumentServiceCollectionListResponse
func (c *ClientWithResponses) DocumentServiceCollectionListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionListResponse, error) {
	rsp, err := c.DocumentServiceCollectionListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceCollectionListResponse(rsp)
}

func (c *ClientWithResponses) DocumentServiceCollectionListWithResponse(ctx context.Context, body DocumentServiceCollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceCollectionListResponse, error) {
	rsp, err := c.DocumentServiceCollectionList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceCollectionListResponse(rsp)
}

// DocumentServiceDocumentAuditWithBodyWithResponse request with arbitrary body returning *DocumentServiceDocumentAuditResponse
func (c *ClientWithResponses) DocumentServiceDocumentAuditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentAuditResponse, error) {
	rsp, err := c.DocumentServiceDocumentAuditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentAuditResponse(rsp)
}

func (c *ClientWithResponses) DocumentServiceDocumentAuditWithResponse(ctx context.Context, body DocumentServiceDocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentAuditResponse, error) {
	rsp, err := c.DocumentServiceDocumentAudit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentAuditResponse(rsp)
}

// DocumentServiceDocumentInsertWithBodyWithResponse request with arbitrary body returning *DocumentServiceDocumentInsertResponse
func (c *ClientWithResponses) DocumentServiceDocumentInsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentInsertResponse, error) {
	rsp, err := c.DocumentServiceDocumentInsertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentInsertResponse(rsp)
}

func (c *ClientWithResponses) DocumentServiceDocumentInsertWithResponse(ctx context.Context, body DocumentServiceDocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentInsertResponse, error) {
	rsp, err := c.DocumentServiceDocumentInsert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentInsertResponse(rsp)
}

// DocumentServiceDocumentProofWithBodyWithResponse request with arbitrary body returning *DocumentServiceDocumentProofResponse
func (c *ClientWithResponses) DocumentServiceDocumentProofWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentProofResponse, error) {
	rsp, err := c.DocumentServiceDocumentProofWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentProofResponse(rsp)
}

func (c *ClientWithResponses) DocumentServiceDocumentProofWithResponse(ctx context.Context, body DocumentServiceDocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentProofResponse, error) {
	rsp, err := c.DocumentServiceDocumentProof(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentProofResponse(rsp)
}

// DocumentServiceDocumentSearchWithBodyWithResponse request with arbitrary body returning *DocumentServiceDocumentSearchResponse
func (c *ClientWithResponses) DocumentServiceDocumentSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentSearchResponse, error) {
	rsp, err := c.DocumentServiceDocumentSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentSearchResponse(rsp)
}

func (c *ClientWithResponses) DocumentServiceDocumentSearchWithResponse(ctx context.Context, body DocumentServiceDocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentServiceDocumentSearchResponse, error) {
	rsp, err := c.DocumentServiceDocumentSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentServiceDocumentSearchResponse(rsp)
}

// ParseDocumentServiceCollectionCreateResponse parses an HTTP response from a DocumentServiceCollectionCreateWithResponse call
func ParseDocumentServiceCollectionCreateResponse(rsp *http.Response) (*DocumentServiceCollectionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceCollectionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaCollectionCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentServiceCollectionDeleteResponse parses an HTTP response from a DocumentServiceCollectionDeleteWithResponse call
func ParseDocumentServiceCollectionDeleteResponse(rsp *http.Response) (*DocumentServiceCollectionDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceCollectionDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaCollectionDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentServiceCollectionGetResponse parses an HTTP response from a DocumentServiceCollectionGetWithResponse call
func ParseDocumentServiceCollectionGetResponse(rsp *http.Response) (*DocumentServiceCollectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceCollectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaCollectionGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentServiceCollectionListResponse parses an HTTP response from a DocumentServiceCollectionListWithResponse call
func ParseDocumentServiceCollectionListResponse(rsp *http.Response) (*DocumentServiceCollectionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceCollectionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaCollectionListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentServiceDocumentAuditResponse parses an HTTP response from a DocumentServiceDocumentAuditWithResponse call
func ParseDocumentServiceDocumentAuditResponse(rsp *http.Response) (*DocumentServiceDocumentAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceDocumentAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaDocumentAuditResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentServiceDocumentInsertResponse parses an HTTP response from a DocumentServiceDocumentInsertWithResponse call
func ParseDocumentServiceDocumentInsertResponse(rsp *http.Response) (*DocumentServiceDocumentInsertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceDocumentInsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaDocumentInsertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentServiceDocumentProofResponse parses an HTTP response from a DocumentServiceDocumentProofWithResponse call
func ParseDocumentServiceDocumentProofResponse(rsp *http.Response) (*DocumentServiceDocumentProofResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceDocumentProofResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaDocumentProofResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentServiceDocumentSearchResponse parses an HTTP response from a DocumentServiceDocumentSearchWithResponse call
func ParseDocumentServiceDocumentSearchResponse(rsp *http.Response) (*DocumentServiceDocumentSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentServiceDocumentSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DocumentschemaDocumentSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
