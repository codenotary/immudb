---
swagger: "2.0"
info:
  version: "version not set"
  title: "immudb REST API v2"
basePath: "/api/v2"
consumes:
- "application/json"
produces:
- "application/json"
security:
- bearer: []
paths:
  /collections/create:
    put:
      tags:
      - "collections"
      operationId: "ImmuServiceV2_CollectionCreate"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/schemav2CollectionCreateRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemav2CollectionInformation"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /collections/delete:
    delete:
      tags:
      - "collections"
      operationId: "ImmuServiceV2_CollectionDelete"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema: {}
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /collections/get:
    get:
      tags:
      - "collections"
      operationId: "ImmuServiceV2_CollectionGet"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemav2CollectionInformation"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /collections/list:
    post:
      tags:
      - "collections"
      operationId: "ImmuServiceV2_CollectionList"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/schemav2CollectionListRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemav2CollectionListResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /documents/audit:
    post:
      tags:
      - "documents"
      operationId: "ImmuServiceV2_DocumentAudit"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/schemav2DocumentAuditRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemav2DocumentAuditResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /documents/insert:
    put:
      tags:
      - "documents"
      operationId: "ImmuServiceV2_DocumentInsert"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/schemav2DocumentInsertRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemaVerifiableTx"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /documents/proof:
    post:
      tags:
      - "documents"
      operationId: "ImmuServiceV2_DocumentProof"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/schemav2DocumentProofRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemaVerifiableTx"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /documents/search:
    post:
      tags:
      - "documents"
      operationId: "ImmuServiceV2_DocumentSearch"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/schemav2DocumentSearchRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemav2DocumentSearchResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /system/login:
    post:
      tags:
      - "authorization"
      operationId: "ImmuServiceV2_LoginV2"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/immudbschemav2LoginRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/schemav2LoginResponseV2"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
securityDefinitions:
  bearer:
    description: "Authentication token, prefixed by Bearer: Bearer <token>"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  immudbschemav2LoginRequest:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      database:
        type: "string"
  protobufAny:
    type: "object"
    properties:
      type_url:
        type: "string"
        description: "A URL/resource name that uniquely identifies the type of the\
          \ serialized\nprotocol buffer message. This string must contain at least\n\
          one \"/\" character. The last segment of the URL's path must represent\n\
          the fully qualified name of the type (as in\n`path/google.protobuf.Duration`).\
          \ The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\
          \nIn practice, teams usually precompile into the binary all types that they\n\
          expect it to use in the context of Any. However, for URLs which use the\n\
          scheme `http`, `https`, or no scheme, one can optionally set up a type\n\
          server that maps type URLs to message definitions as follows:\n\n* If no\
          \ scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must\
          \ yield a [google.protobuf.Type][]\n  value in binary format, or produce\
          \ an error.\n* Applications are allowed to cache lookup results based on\
          \ the\n  URL, or have them precompiled into a binary to avoid any\n  lookup.\
          \ Therefore, binary compatibility needs to be preserved\n  on changes to\
          \ types. (Use versioned type names to manage\n  breaking changes.)\n\nNote:\
          \ this functionality is not currently available in the official\nprotobuf\
          \ release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\
          \nSchemes other than `http`, `https` (or the empty scheme) might be\nused\
          \ with implementation specific semantics."
      value:
        type: "string"
        format: "byte"
        description: "Must be a valid serialized protocol buffer of the above specified\
          \ type."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "`Any` contains an arbitrary serialized protocol buffer message along\
      \ with a\nURL that describes the type of the serialized message.\n\nProtobuf\
      \ library provides support to pack/unpack Any values in the form\nof utility\
      \ functions or additional generated methods of the Any type.\n\nExample 1: Pack\
      \ and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n\
      \    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack\
      \ and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n\
      \    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n\
      \    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n\
      \    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n\
      \      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in\
      \ Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n\
      \     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo);\
      \ err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf\
      \ library will by default use\n'type.googleapis.com/full.type.name' as the type\
      \ URL and the unpack\nmethods only use the fully qualified type name after the\
      \ last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n\
      name \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses\
      \ the regular\nrepresentation of the deserialized, embedded message, with an\n\
      additional field `@type` which contains the type URL. Example:\n\n    package\
      \ google.profile;\n    message Person {\n      string first_name = 1;\n    \
      \  string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\"\
      ,\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf\
      \ the embedded message type is well-known and has a custom JSON\nrepresentation,\
      \ that representation will be embedded adding a field\n`value` which holds the\
      \ custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\
      \n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n\
      \      \"value\": \"1.212s\"\n    }"
  protobufNullValue:
    type: "string"
    description: "`NullValue` is a singleton enumeration to represent the null value\
      \ for the\n`Value` type union.\n\n The JSON representation for `NullValue` is\
      \ JSON `null`.\n\n - NULL_VALUE: Null value."
    enum:
    - "NULL_VALUE"
    default: "NULL_VALUE"
  runtimeError:
    type: "object"
    properties:
      error:
        type: "string"
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      details:
        type: "array"
        items:
          $ref: "#/definitions/protobufAny"
  schemaDualProof:
    type: "object"
    properties:
      sourceTxHeader:
        title: "Header of the source (earlier) transaction"
        $ref: "#/definitions/schemaTxHeader"
      targetTxHeader:
        title: "Header of the target (latter) transaction"
        $ref: "#/definitions/schemaTxHeader"
      inclusionProof:
        type: "array"
        title: "Inclusion proof of the source transaction hash in the main Merkle\
          \ Tree"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      consistencyProof:
        type: "array"
        title: "Consistency proof between Merkle Trees in the source and target transactions"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      targetBlTxAlh:
        type: "string"
        format: "byte"
        title: "Accumulative hash (Alh) of the last transaction that's part of the\
          \ target Merkle Tree"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      lastInclusionProof:
        type: "array"
        title: "Inclusion proof of the targetBlTxAlh in the target Merkle Tree"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      linearProof:
        title: "Linear proof starting from targetBlTxAlh to the final state value"
        $ref: "#/definitions/schemaLinearProof"
      LinearAdvanceProof:
        title: "Proof of consistency between some part of older linear chain and newer\
          \ Merkle Tree"
        $ref: "#/definitions/schemaLinearAdvanceProof"
    title: "DualProof contains inclusion and consistency proofs for dual Merkle-Tree\
      \ + Linear proofs"
    example:
      LinearAdvanceProof:
        inclusionProofs:
        - terms:
          - "terms"
          - "terms"
          width: 2
          leaf: 5
        - terms:
          - "terms"
          - "terms"
          width: 2
          leaf: 5
        linearProofTerms:
        - "linearProofTerms"
        - "linearProofTerms"
      sourceTxHeader:
        nentries: 0
        prevAlh: "prevAlh"
        metadata:
          truncatedTxID: "truncatedTxID"
        eH: "eH"
        id: "id"
        blTxId: "blTxId"
        version: 6
        ts: "ts"
        blRoot: "blRoot"
      linearProof:
        TargetTxId: "TargetTxId"
        terms:
        - "terms"
        - "terms"
        sourceTxId: "sourceTxId"
      targetBlTxAlh: "targetBlTxAlh"
      targetTxHeader:
        nentries: 0
        prevAlh: "prevAlh"
        metadata:
          truncatedTxID: "truncatedTxID"
        eH: "eH"
        id: "id"
        blTxId: "blTxId"
        version: 6
        ts: "ts"
        blRoot: "blRoot"
      inclusionProof:
      - "inclusionProof"
      - "inclusionProof"
      consistencyProof:
      - "consistencyProof"
      - "consistencyProof"
      lastInclusionProof:
      - "lastInclusionProof"
      - "lastInclusionProof"
  schemaEntry:
    type: "object"
    properties:
      tx:
        type: "string"
        format: "uint64"
        title: "Transaction id at which the target value was set (i.e. not the reference\
          \ transaction id)"
      key:
        type: "string"
        format: "byte"
        title: "Key of the target value (i.e. not the reference entry)"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      value:
        type: "string"
        format: "byte"
        title: "Value"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      referencedBy:
        title: "If the request was for a reference, this field will keep information\
          \ about the reference entry"
        $ref: "#/definitions/schemaReference"
      metadata:
        title: "Metadata of the target entry (i.e. not the reference entry)"
        $ref: "#/definitions/schemaKVMetadata"
      expired:
        type: "boolean"
        title: "If set to true, this entry has expired and the value is not retrieved"
      revision:
        type: "string"
        format: "uint64"
        title: "Key's revision, in case of GetAt it will be 0"
    example:
      metadata:
        deleted: true
        expiration:
          expiresAt: "expiresAt"
        nonIndexable: true
      expired: true
      tx: "tx"
      referencedBy:
        metadata:
          deleted: true
          expiration:
            expiresAt: "expiresAt"
          nonIndexable: true
        tx: "tx"
        atTx: "atTx"
        key: "key"
        revision: "revision"
      value: "value"
      key: "key"
      revision: "revision"
  schemaExpiration:
    type: "object"
    properties:
      expiresAt:
        type: "string"
        format: "int64"
        title: "Entry expiration time (unix timestamp in seconds)"
    example:
      expiresAt: "expiresAt"
  schemaInclusionProof:
    type: "object"
    properties:
      leaf:
        type: "integer"
        format: "int32"
        title: "Index of the leaf for which the proof is generated"
      width:
        type: "integer"
        format: "int32"
        title: "Width of the tree at the leaf level"
      terms:
        type: "array"
        title: "Proof terms (selected hashes from the tree)"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    example:
      terms:
      - "terms"
      - "terms"
      width: 2
      leaf: 5
  schemaKVMetadata:
    type: "object"
    properties:
      deleted:
        type: "boolean"
        title: "True if this entry denotes a logical deletion"
      expiration:
        title: "Entry expiration information"
        $ref: "#/definitions/schemaExpiration"
      nonIndexable:
        type: "boolean"
        title: "If set to true, this entry will not be indexed and will only be accessed\
          \ through GetAt calls"
    example:
      deleted: true
      expiration:
        expiresAt: "expiresAt"
      nonIndexable: true
  schemaLinearAdvanceProof:
    type: "object"
    properties:
      linearProofTerms:
        type: "array"
        title: "terms for the linear chain"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      inclusionProofs:
        type: "array"
        title: "inclusion proofs for steps on the linear chain"
        items:
          $ref: "#/definitions/schemaInclusionProof"
    title: "LinearAdvanceProof contains the proof of consistency between the consumed\
      \ part of the older linear chain\nand the new Merkle Tree"
    example:
      inclusionProofs:
      - terms:
        - "terms"
        - "terms"
        width: 2
        leaf: 5
      - terms:
        - "terms"
        - "terms"
        width: 2
        leaf: 5
      linearProofTerms:
      - "linearProofTerms"
      - "linearProofTerms"
  schemaLinearProof:
    type: "object"
    properties:
      sourceTxId:
        type: "string"
        format: "uint64"
        title: "Starting transaction of the proof"
      TargetTxId:
        type: "string"
        format: "uint64"
        title: "End transaction of the proof"
      terms:
        type: "array"
        title: "List of terms (inner hashes of transaction entries)"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    title: "LinearProof contains the linear part of the proof (outside the main Merkle\
      \ Tree)"
    example:
      TargetTxId: "TargetTxId"
      terms:
      - "terms"
      - "terms"
      sourceTxId: "sourceTxId"
  schemaReference:
    type: "object"
    properties:
      tx:
        type: "string"
        format: "uint64"
        title: "Transaction if when the reference key was set"
      key:
        type: "string"
        format: "byte"
        title: "Reference key"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      atTx:
        type: "string"
        format: "uint64"
        title: "At which transaction the key is bound, 0 if reference is not bound\
          \ and should read the most recent reference"
      metadata:
        title: "Metadata of the reference entry"
        $ref: "#/definitions/schemaKVMetadata"
      revision:
        type: "string"
        format: "uint64"
        title: "Revision of the reference entry"
    example:
      metadata:
        deleted: true
        expiration:
          expiresAt: "expiresAt"
        nonIndexable: true
      tx: "tx"
      atTx: "atTx"
      key: "key"
      revision: "revision"
  schemaSignature:
    type: "object"
    properties:
      publicKey:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      signature:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    example:
      signature: "signature"
      publicKey: "publicKey"
  schemaTx:
    type: "object"
    properties:
      header:
        title: "Transaction header"
        $ref: "#/definitions/schemaTxHeader"
      entries:
        type: "array"
        title: "Raw entry values"
        items:
          $ref: "#/definitions/schemaTxEntry"
      kvEntries:
        type: "array"
        title: "KV entries in the transaction (parsed)"
        items:
          $ref: "#/definitions/schemaEntry"
      zEntries:
        type: "array"
        title: "Sorted Set entries in the transaction (parsed)"
        items:
          $ref: "#/definitions/schemaZEntry"
    example:
      entries:
      - metadata:
          deleted: true
          expiration:
            expiresAt: "expiresAt"
          nonIndexable: true
        hValue: "hValue"
        vLen: 1
        value: "value"
        key: "key"
      - metadata:
          deleted: true
          expiration:
            expiresAt: "expiresAt"
          nonIndexable: true
        hValue: "hValue"
        vLen: 1
        value: "value"
        key: "key"
      kvEntries:
      - metadata:
          deleted: true
          expiration:
            expiresAt: "expiresAt"
          nonIndexable: true
        expired: true
        tx: "tx"
        referencedBy:
          metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          tx: "tx"
          atTx: "atTx"
          key: "key"
          revision: "revision"
        value: "value"
        key: "key"
        revision: "revision"
      - metadata:
          deleted: true
          expiration:
            expiresAt: "expiresAt"
          nonIndexable: true
        expired: true
        tx: "tx"
        referencedBy:
          metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          tx: "tx"
          atTx: "atTx"
          key: "key"
          revision: "revision"
        value: "value"
        key: "key"
        revision: "revision"
      header:
        nentries: 0
        prevAlh: "prevAlh"
        metadata:
          truncatedTxID: "truncatedTxID"
        eH: "eH"
        id: "id"
        blTxId: "blTxId"
        version: 6
        ts: "ts"
        blRoot: "blRoot"
      zEntries:
      - entry:
          metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          expired: true
          tx: "tx"
          referencedBy:
            metadata:
              deleted: true
              expiration:
                expiresAt: "expiresAt"
              nonIndexable: true
            tx: "tx"
            atTx: "atTx"
            key: "key"
            revision: "revision"
          value: "value"
          key: "key"
          revision: "revision"
        score: 5.962133916683182
        set: "set"
        atTx: "atTx"
        key: "key"
      - entry:
          metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          expired: true
          tx: "tx"
          referencedBy:
            metadata:
              deleted: true
              expiration:
                expiresAt: "expiresAt"
              nonIndexable: true
            tx: "tx"
            atTx: "atTx"
            key: "key"
            revision: "revision"
          value: "value"
          key: "key"
          revision: "revision"
        score: 5.962133916683182
        set: "set"
        atTx: "atTx"
        key: "key"
  schemaTxEntry:
    type: "object"
    properties:
      key:
        type: "string"
        format: "byte"
        title: "Raw key value (contains 1-byte prefix for kind of the key)"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      hValue:
        type: "string"
        format: "byte"
        title: "Value hash"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      vLen:
        type: "integer"
        format: "int32"
        title: "Value length"
      metadata:
        title: "Entry metadata"
        $ref: "#/definitions/schemaKVMetadata"
      value:
        type: "string"
        format: "byte"
        description: "value, must be ignored when len(value) == 0 and vLen > 0.\n\
          Otherwise sha256(value) must be equal to hValue."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    example:
      metadata:
        deleted: true
        expiration:
          expiresAt: "expiresAt"
        nonIndexable: true
      hValue: "hValue"
      vLen: 1
      value: "value"
      key: "key"
  schemaTxHeader:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uint64"
        title: "Transaction ID"
      prevAlh:
        type: "string"
        format: "byte"
        title: "State value (Accumulative Hash - Alh) of the previous transaction"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      ts:
        type: "string"
        format: "int64"
        title: "Unix timestamp of the transaction (in seconds)"
      nentries:
        type: "integer"
        format: "int32"
        title: "Number of entries in a transaction"
      eH:
        type: "string"
        format: "byte"
        title: "Entries Hash - cumulative hash of all entries in the transaction"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      blTxId:
        type: "string"
        format: "uint64"
        title: "Binary linking tree transaction ID\n(ID of last transaction already\
          \ in the main Merkle Tree)"
      blRoot:
        type: "string"
        format: "byte"
        title: "Binary linking tree root (Root hash of the Merkle Tree)"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      version:
        type: "integer"
        format: "int32"
        title: "Header version"
      metadata:
        title: "Transaction metadata"
        $ref: "#/definitions/schemaTxMetadata"
    example:
      nentries: 0
      prevAlh: "prevAlh"
      metadata:
        truncatedTxID: "truncatedTxID"
      eH: "eH"
      id: "id"
      blTxId: "blTxId"
      version: 6
      ts: "ts"
      blRoot: "blRoot"
  schemaTxMetadata:
    type: "object"
    properties:
      truncatedTxID:
        type: "string"
        format: "uint64"
        title: "Entry expiration information"
    title: "TxMetadata contains metadata set to whole transaction"
    example:
      truncatedTxID: "truncatedTxID"
  schemaVerifiableTx:
    type: "object"
    properties:
      tx:
        title: "Transaction to verify"
        $ref: "#/definitions/schemaTx"
      dualProof:
        title: "Proof for the transaction"
        $ref: "#/definitions/schemaDualProof"
      signature:
        title: "Signature for the new state value"
        $ref: "#/definitions/schemaSignature"
    example:
      dualProof:
        LinearAdvanceProof:
          inclusionProofs:
          - terms:
            - "terms"
            - "terms"
            width: 2
            leaf: 5
          - terms:
            - "terms"
            - "terms"
            width: 2
            leaf: 5
          linearProofTerms:
          - "linearProofTerms"
          - "linearProofTerms"
        sourceTxHeader:
          nentries: 0
          prevAlh: "prevAlh"
          metadata:
            truncatedTxID: "truncatedTxID"
          eH: "eH"
          id: "id"
          blTxId: "blTxId"
          version: 6
          ts: "ts"
          blRoot: "blRoot"
        linearProof:
          TargetTxId: "TargetTxId"
          terms:
          - "terms"
          - "terms"
          sourceTxId: "sourceTxId"
        targetBlTxAlh: "targetBlTxAlh"
        targetTxHeader:
          nentries: 0
          prevAlh: "prevAlh"
          metadata:
            truncatedTxID: "truncatedTxID"
          eH: "eH"
          id: "id"
          blTxId: "blTxId"
          version: 6
          ts: "ts"
          blRoot: "blRoot"
        inclusionProof:
        - "inclusionProof"
        - "inclusionProof"
        consistencyProof:
        - "consistencyProof"
        - "consistencyProof"
        lastInclusionProof:
        - "lastInclusionProof"
        - "lastInclusionProof"
      tx:
        entries:
        - metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          hValue: "hValue"
          vLen: 1
          value: "value"
          key: "key"
        - metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          hValue: "hValue"
          vLen: 1
          value: "value"
          key: "key"
        kvEntries:
        - metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          expired: true
          tx: "tx"
          referencedBy:
            metadata:
              deleted: true
              expiration:
                expiresAt: "expiresAt"
              nonIndexable: true
            tx: "tx"
            atTx: "atTx"
            key: "key"
            revision: "revision"
          value: "value"
          key: "key"
          revision: "revision"
        - metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          expired: true
          tx: "tx"
          referencedBy:
            metadata:
              deleted: true
              expiration:
                expiresAt: "expiresAt"
              nonIndexable: true
            tx: "tx"
            atTx: "atTx"
            key: "key"
            revision: "revision"
          value: "value"
          key: "key"
          revision: "revision"
        header:
          nentries: 0
          prevAlh: "prevAlh"
          metadata:
            truncatedTxID: "truncatedTxID"
          eH: "eH"
          id: "id"
          blTxId: "blTxId"
          version: 6
          ts: "ts"
          blRoot: "blRoot"
        zEntries:
        - entry:
            metadata:
              deleted: true
              expiration:
                expiresAt: "expiresAt"
              nonIndexable: true
            expired: true
            tx: "tx"
            referencedBy:
              metadata:
                deleted: true
                expiration:
                  expiresAt: "expiresAt"
                nonIndexable: true
              tx: "tx"
              atTx: "atTx"
              key: "key"
              revision: "revision"
            value: "value"
            key: "key"
            revision: "revision"
          score: 5.962133916683182
          set: "set"
          atTx: "atTx"
          key: "key"
        - entry:
            metadata:
              deleted: true
              expiration:
                expiresAt: "expiresAt"
              nonIndexable: true
            expired: true
            tx: "tx"
            referencedBy:
              metadata:
                deleted: true
                expiration:
                  expiresAt: "expiresAt"
                nonIndexable: true
              tx: "tx"
              atTx: "atTx"
              key: "key"
              revision: "revision"
            value: "value"
            key: "key"
            revision: "revision"
          score: 5.962133916683182
          set: "set"
          atTx: "atTx"
          key: "key"
      signature:
        signature: "signature"
        publicKey: "publicKey"
  schemaZEntry:
    type: "object"
    properties:
      set:
        type: "string"
        format: "byte"
        title: "Name of the sorted set"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      key:
        type: "string"
        format: "byte"
        title: "Referenced key"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      entry:
        title: "Referenced entry"
        $ref: "#/definitions/schemaEntry"
      score:
        type: "number"
        format: "double"
        title: "Sorted set element's score"
      atTx:
        type: "string"
        format: "uint64"
        title: "At which transaction the key is bound,\n0 if reference is not bound\
          \ and should read the most recent reference"
    example:
      entry:
        metadata:
          deleted: true
          expiration:
            expiresAt: "expiresAt"
          nonIndexable: true
        expired: true
        tx: "tx"
        referencedBy:
          metadata:
            deleted: true
            expiration:
              expiresAt: "expiresAt"
            nonIndexable: true
          tx: "tx"
          atTx: "atTx"
          key: "key"
          revision: "revision"
        value: "value"
        key: "key"
        revision: "revision"
      score: 5.962133916683182
      set: "set"
      atTx: "atTx"
      key: "key"
  schemav2CollectionCreateRequest:
    type: "object"
    properties:
      name:
        type: "string"
      primaryKeys:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/schemav2PossibleIndexType"
      indexKeys:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/schemav2PossibleIndexType"
  schemav2CollectionInformation:
    type: "object"
    properties:
      name:
        type: "string"
      primaryKeys:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/schemav2PossibleIndexType"
      indexKeys:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/schemav2PossibleIndexType"
    example:
      primaryKeys:
        key: {}
      name: "name"
      indexKeys: {}
  schemav2CollectionListRequest:
    type: "object"
  schemav2CollectionListResponse:
    type: "object"
    properties:
      collections:
        type: "array"
        items:
          $ref: "#/definitions/schemav2CollectionInformation"
    example:
      collections:
      - primaryKeys:
          key: {}
        name: "name"
        indexKeys: {}
      - primaryKeys:
          key: {}
        name: "name"
        indexKeys: {}
  schemav2DocumentAudit:
    type: "object"
    properties:
      value:
        type: "object"
        properties: {}
      transactionID:
        type: "string"
        format: "uint64"
    example:
      value: "{}"
      transactionID: "transactionID"
  schemav2DocumentAuditRequest:
    type: "object"
    properties:
      collection:
        type: "string"
      primaryKeys:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/schemav2PossibleIndexType"
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
  schemav2DocumentAuditResponse:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/schemav2DocumentAudit"
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
      entriesLeft:
        type: "integer"
        format: "int64"
    example:
      perPage: 6
      entriesLeft: 1
      page: 0
      results:
      - value: "{}"
        transactionID: "transactionID"
      - value: "{}"
        transactionID: "transactionID"
  schemav2DocumentInsertRequest:
    type: "object"
    properties:
      collection:
        type: "string"
      document:
        type: "array"
        items:
          type: "object"
          properties: {}
  schemav2DocumentProofRequest:
    type: "object"
    properties:
      collection:
        type: "string"
      primaryKeys:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/schemav2PossibleIndexType"
      atRevision:
        type: "string"
        format: "int64"
  schemav2DocumentQuery:
    type: "object"
    properties:
      field:
        type: "string"
      operator:
        $ref: "#/definitions/schemav2QueryOperator"
      value:
        type: "object"
        properties: {}
  schemav2DocumentSearchRequest:
    type: "object"
    properties:
      collection:
        type: "string"
      query:
        type: "array"
        items:
          $ref: "#/definitions/schemav2DocumentQuery"
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
  schemav2DocumentSearchResponse:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          type: "object"
          properties: {}
      page:
        type: "integer"
        format: "int64"
      perPage:
        type: "integer"
        format: "int64"
      entriesLeft:
        type: "integer"
        format: "int64"
    example:
      perPage: 6
      entriesLeft: 1
      page: 0
      results:
      - "{}"
      - "{}"
  schemav2LoginResponseV2:
    type: "object"
    properties:
      token:
        type: "string"
      expirationTimestamp:
        type: "integer"
        format: "int32"
    example:
      expirationTimestamp: 0
      token: "token"
  schemav2PossibleIndexType:
    type: "string"
    enum:
    - "DOUBLE"
    - "INTEGER"
    - "STRING"
    default: "DOUBLE"
  schemav2QueryOperator:
    type: "string"
    enum:
    - "EQ"
    - "GT"
    - "GTE"
    - "LT"
    - "LTE"
    - "LIKE"
    default: "EQ"
